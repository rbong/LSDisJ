; This disassembly is only partially complete.

;; 00:0000 Most RSTs are unused
00:0000 rst_00
00:0001 .data:0007
00:0008 rst_08
00:0008 .data:0008
00:0010 rst_10
;; 00:0018 Does nothing, used for breakpoints
00:0018 rst_18
;; 00:0020 Does nothing, used for breakpoints
00:0020 rst_20
00:0020 .data:0008
00:0028 rst_28
00:0028 .data:0008
00:0030 rst_30
00:0030 .data:0008
00:0038 rst_trigger_crash
;; 00:003c Does nothing, used for breakpoints
00:003c .data:0004

00:0040 vblank_interrupt
00:0045 .data:0003
00:0048 lcdc_interrupt
00:0049 .data:0007
00:0050 timer_overflow_interrupt
00:0053 .data:0005
00:0058 serial_transfer_complete_interrupt
00:005b .data:0005
00:0060 joypad_transition_interrupt
00:0061 jump_00_0061
00:0061 .code:0008
;; 00:0066 Jumps to 01:7954
00:0069 .data:0097

00:0100 Boot

00:0104 HeaderLogo
00:0134 HeaderTitle
00:013f HeaderManufacturerCode
;; 00:0143 Game supports CGB functions, but works on old gameboys also
00:0143 HeaderCGBFlag
00:0144 HeaderNewLicenseeCode
;; 00:0146 No SGB functions (Normal Gameboy or CGB only game)
00:0146 HeaderSGBFlag
;; 00:0147 MBC5+RAM+BATTERY, ROM Size: 1 MB, RAM Size: 128 KB
00:0147 HeaderCartridgeType
00:0148 HeaderROMSize
00:0149 HeaderRAMSize
;; 00:014a Destination is Japanese
00:014a HeaderDestinationCode
00:014b HeaderOldLicenseeCode
00:014c HeaderMaskROMVersion
;; 00:014d Checksums automatically calculated with rgbfix
00:014d HeaderComplementCheck
00:014e HeaderGlobalChecksum

00:0150 code_start
;; 00:0150 gbdk 2.95 libc/gb/crt0.s:.code_start (with modifications)
;; 00:0150 -
;; 00:0150 The labels in this subroutine are not local since they are possibly referenced elsewhere
;; 00:0152 Store CPU type 2 in E
;; 00:0155 Initialize stack at 0xe0000 instead of 0xc000 in gbdk
00:015f _code_start_1
;; 00:0166 Skip clearing from 0xfe00 to 0xfeff
;; 00:0166 Clear from 0xff80 to 0xffff
00:016b _code_start_2
;; 00:0173 Store CPU type 2
;; 00:0187 Copy refresh_oam routine to HIRAM
;; 00:018d:r_op end_refresh_oam - start_refresh_oam
00:018f _code_start_4
;; 00:0195 Skip installing interrupt routines
;; 00:01a6 V-Blank on, don't enable serial I/O yet
;; 00:01aa Don't turn sound off yet
;; 00:01b5 Skip erasing the malloc list and gsinit

00:01ba .data:0026
00:01e0 .data:01b1
00:01e0 MODE_TABLE
;; 00:01e0 gbdk 2.95 libc/gb/crt0.s:.MODE_TABLE
;; 00:01e0 Jump table for modes

00:07d2 call_00_7d2

00:081c .data:0015
00:0831 wav_instr_play_type_strings
00:0831 .text:0024
00:0855 .data:00a2

00:08f7 call_00_08f7

00:0942 call_00_0942

00:09a8 .data:d8

00:0ad1 call_00_0ad1

00:0b43 call_00_0b43

00:0bed call_banked_call_old
;; 00:0bed Call a subroutine in another bank.
;; 00:0bed This version of call_banked_call uses extra instructions.
;; 00:0bed Args: bank, address (word)
;; 00:0bed Registers used: A, HL
00:0c0a call_banked_call_old_return
;; 00:0c0a Doesn't appear to actually do anything with register B or E

00:0c18 call_banked_call_set_bank_old
;; 00:0c18 Call a subroutine in another bank, then set the bank.
;; 00:0c18 This version of call_banked_call_set_bank uses extra instructions.
;; 00:0c18
;; 00:0c18 Args: bank, address (word), new_bank
;; 00:0c18
;; 00:0c18 Exit conditions:
;; 00:0c18   The bank register (0x2000) will be set to new_bank
;; 00:0c18
;; 00:0c18 Registers used: A, HL
00:0c39 call_banked_call_set_bank_old_return

00:0c49 call_00_0c49

00:0c7e call_00_0c7e

00:0cb4 call_00_0cb4

00:0ced call_00_0ced

00:0d3b call_00_0d3b

00:0d7a call_00_0d7a

00:0dca call_00_0dca

00:1261 call_00_1261

00:12cf _main

00:155d call_00_155d

00:1ce0 call_00_1ce0

00:1f8c call_00_1f8c

00:2c79 call_00_2c79

00:2e22 call_00_2e22

00:313e call_00_313e

00:3155 call_00_3155

00:3183 call_00_3183

00:31bc call_00_31bc

00:31d3 call_00_31d3

00:31ea call_00_31ea

00:3201 call_00_3201

00:32b0 font_copy_uncompressed
;; 00:32b0 gbdk 2.95 libc/gb/font.ms:font_copy_uncompressed
;; 00:32b0
;; 00:32b0 Copy uncompressed 16 byte tiles.
;; 00:32b0 Uses the current fg_colour and bg_colour fields.
;; 00:32b0
;; 00:32b0 Entry conditions:
;; 00:32b0   BC = copy from address
;; 00:32b0   HL = copy to address (must be aligned to UWORD boundary)
;; 00:32b0   DE = count (cells * 8)
;; 00:32b0
;; 00:32b0 Registers used: A, BC, DE, HL
00:32bb .font_copy_uncompressed_4
00:32c0 .font_copy_uncompressed_1
00:32c9 .font_copy_uncompressed_1_b
00:32dd .font_copy_uncompressed_2

00:32e6 font_load
;; 00:32e6 gbdk 2.95 libc/gb/font.ms:font_load
;; 00:32e6 Load a font.
;; 00:32e6 Entry conditions: HL = font to load
;; 00:32e6 Registers used: A, B, DE, HL
00:32ef .font_load_find_slot
00:3301 .font_load_found
00:3325 .font_load_exit

00:332e font_copy_current
;; 00:332e gbdk 2.95 libc/gb/font.ms:font_copy_current (with modifications)
;; 00:332e Copy the tiles from the current font into VRAM.
;; 00:332e Registers used: A, BC, DE, HL
;; 00:332e See: font_copy_uncompressed
00:335a .font_copy_current_copy
;; 00:3370 Compressed fonts are not supported, jump straight to font_copy_uncompressed

00:3373 font_set
;; 00:3373 gbdk 2.95 libc/gb/font.ms:font_set
;; 00:3373 Set the current font.
;; 00:3373 Entry conditions: HL = font
;; 00:3373 Registers used: A, HL

00:3380 _font_load
;; 00:3380 gbdk 2.95 libc/gb/font.ms:_font_load
;; 00:3380 Load a font.
;; 00:3380 Args: font (word)
;; 00:3380 See: font_load

00:338e _font_set
;; 00:338e gbdk 2.95 libc/gb/font.ms:_font_set
;; 00:338e Set the current font.
;; 00:338e Args: font (word)
;; 00:338e See: font_set

00:339d _font_init
;; 00:339d gbdk 2.95 libc/gb/font.ms:_font_init (with modifications)
;; 00:339d Initialize the font system.
;; 00:339d Registers used: A, HL
00:33ac .font_init_1
;; 00:33ba Skip calling .cls

00:33d8 tmode
;; 00:33d8 gbdk 2.95 libc/gb/font.ms:.tmode (with modifications)
;; 00:33d8 Enter text mode.
;; 00:33d8 Registers used: A
;; 00:33df Skip removing interrupts since they're unused
00:33e2 .tmode_1

00:33ef tmode_out
;; 00:33ef gbdk 2.95 libc/gb/font.ms:.tmode_out

00:33fc _rand_randw
;; 00:33fc gbdk 2.95 libc/gb/rand.s:_rand/_randw
;; 00:33fc Generate a random number.
;; 00:33fc Result: DE
;; 00:33fc Registers used: A, DE, HL

00:3427 _cpu_fast
;; 00:3427 gbdk 2.95 libc/gb/cgb.s:_cpu_fast
;; 00:3427 Enable speed switch (CGB only).
;; 00:3427 Registers used: AF, HL

00:3442 call_00_3442

00:346a send_byte
;; 00:346a gbdk 2.95 libc/gb/serial.s:.send_byte/_send_byte
;; 00:346a Send the byte in IO_OUT to the serial port.
;; 00:346a Registers used: A

00:347d receive_byte
;; 00:347d gbdk 2.95 libc/gb/serial.s:.receive_byte/_receive_byte
;; 00:347d Receive byte from the serial port in IO_IN.
;; 00:347d Registers used: A

00:348e set_mode
;; 00:348e gbdk 2.95 libc/gb/crt0.s:.set_mode
;; 00:348e Sets the current mode. Will jump to the initialization routine.
;; 00:348e Entry conditions: L = mode
;; 00:348e Registers used: A, BC, HL

00:349e display_off
;; 00:349e gbdk 2.95 libc/gb/crt0.s:.display_off
;; 00:349e Turns off the screen.
;; 00:349e Registers used: A
;; 00:349e -
;; 00:349e The labels in this subroutine are not local since they are possibly referenced elsewhere
00:34a2 _display_off_1
00:34a8 _display_off_2

00:34b5 start_refresh_oam
;; 00:34b5 gbdk 2.95 libc/gb/crt0.s:.start_refresh_OAM (with modifications)
;; 00:34b5
;; 00:34b5 Copies OAM data to OAM RAM.
;; 00:34b5
;; 00:34b5 Exit conditions:
;; 00:34b5   The value at address HL will be cleared.
;; 00:34b5
;; 00:34b5 Registers used: A
;; 00:34b5:r_op _OAM
00:34bb .start_refresh_oam_1
00:34c0 end_refresh_oam

00:34c0 serial_io
;; 00:34c0 gbdk 2.95 libc/gb/crt0.s:.serial_io (with modifications)
;; 00:34c0 Serial interrupt handler.
00:34d2 .serial_io_10
00:34e0 .serial_io_11
00:34e2 .serial_io_12
;; 00:34e2 Skip using external clock and replying with idle byte
00:34e5 .serial_io_99
;; 00:34e9 TODO: document return handler at 00:167f

00:34ec _mode
;; 00:34ec gbdk 2.95 libc/gb/crt0.s:_mode
;; 00:34ec Sets the current mode.
;; 00:34ec Args: mode
;; 00:34f1 Use jr instead of call to jump directly back

00:34f3 _get_mode
;; 00:34f3 gbdk 2.95 libc/gb/crt0.s:_get_mode
;; 00:34f3 Gets the current mode.
;; 00:34f3 Result: E
;; 00:34f3 Registers used: E, HL

00:34f8 _enable_interrupts
;; 00:34f8 gbdk 2.95 libc/gb/crt0.s:_enable_interrupts

00:34fa _disable_interrupts
;; 00:34fa gbdk 2.95 libc/gb/crt0.s:_disable_interrupts

00:34fc _reset
;; 00:34fc gbdk 2.95 libc/gb/crt0.s:.reset/_reset

00:36e0 call_00_36e0

00:3717 _modslong_divslong_mulslong

00:3718 _divschar
;; 00:3718 gbdk 2.95 libc/asm/gbz80/div.s:__divschar
;; 00:3718 Divide chars.
;; 00:3718 Args: dividend, divisor
;; 00:3718 Result: E
;; 00:3718 See: div8_mod8

00:3724 _modschar
;; 00:3724 gbdk 2.95 libc/asm/gbz80/div.s:__modschar
;; 00:3724 Perform modulus on chars.
;; 00:3724 Args: dividend, divisor
;; 00:3724 Result: E
;; 00:3724 See: div8_mod8

00:372f _divsint
;; 00:372f gbdk 2.95 libc/asm/gbz80/div.s:__divsint
;; 00:372f Divide ints.
;; 00:372f Args: dividend (word), divisor (word)
;; 00:372f Result: DE
;; 00:372f See: div16_mod16

00:3740 _modsint
;; 00:3740 gbdk 2.95 libc/asm/gbz80/div.s:__modsint
;; 00:3740 Perform modulus on ints.
;; 00:3740 Args: dividend (word), divisor (word)
;; 00:3740 Result: DE
;; 00:3740 See: div16_mod16

00:374f _divuchar
;; 00:374f gbdk 2.95 libc/asm/gbz80/div.s:__divuchar
;; 00:374f Divide unsigned chars.
;; 00:374f Args: dividend, divisor
;; 00:374f Result: E
;; 00:374f See: divu8_modu8

00:375b _moduchar
;; 00:375b gbdk 2.95 libc/asm/gbz80/div.s:__moduchar
;; 00:375b Perform modulus on unsigned chars.
;; 00:375b Args: dividend, divisor
;; 00:375b Result: E
;; 00:375b See: divu8_modu8

00:3766 _divuint
;; 00:3766 gbdk 2.95 libc/asm/gbz80/div.s:__divuint
;; 00:3766 Divide unsigned ints.
;; 00:3766 Args: dividend (word), divisor (word)
;; 00:3766 Result: DE
;; 00:3766 See: divu16_modu16

00:3777 _moduint
;; 00:3777 gbdk 2.95 libc/asm/gbz80/div.s:__moduint
;; 00:3777 Perform modulus on unsigned ints.
;; 00:3777 Args: dividend (word), divisor (word)
;; 00:3777 Result: DE
;; 00:3777 See: divu16_modu16

00:3786 div8_mod8
;; 00:3786 gbdk 2.95 libc/asm/gbz80/div.s:.div8/.mod8
;; 00:3786
;; 00:3786 8-bit division.
;; 00:3786
;; 00:3786 Entry conditions:
;; 00:3786   C = dividend
;; 00:3786   E = divisor
;; 00:3786
;; 00:3786 Exit conditions:
;; 00:3786   C = quotient
;; 00:3786   E = remainder
;; 00:3786   If divisor is non-zero, carry=0
;; 00:3786   If divisor is 0, carry=1 and both quotient and remainder are 0
;; 00:3786
;; 00:3786 Registers used: AF, BC, DE, HL

00:378e div16_mod16
;; 00:378e gbdk 2.95 libc/asm/gbz80/div.s:.div16/.mod16
;; 00:378e
;; 00:378e 16-bit division.
;; 00:378e
;; 00:378e Entry conditions:
;; 00:378e   BC = dividend
;; 00:378e   DE = divisor
;; 00:378e
;; 00:378e Exit conditions:
;; 00:378e   BC = quotient
;; 00:378e   DE = remainder
;; 00:378e
;; 00:378e See: div8_mod8
00:379c .chkde
00:37a6 .dodiv
00:37ae .dodiv_1
00:37b9 .dorem

00:37c4 divu8_modu8
;; 00:37c4 gbdk 2.95 libc/asm/gbz80/div.s:.divu8/.modu8
;; 00:37c4 8-bit unsigned division.
;; 00:37c4 See: div8

00:37c7 divu16_modu16
;; 00:37c7 gbdk 2.95 libc/asm/gbz80/div.s:.divu16/.modu16 (with modifications)
;; 00:37c7 16-bit unsigned division.
;; 00:37c7 See: div16
00:37d2 .divide
;; 00:37d8 Instead of looping, as in gbdk 2.95, call a function 16 times
;; 00:3808 libc/asm/gbz80/div.s:.nodrop (without loop counter)

00:3812 call_divide_loop
;; 00:3812 gbdk 2.95 libc/asm/gbz80/div.s:.divide loop separated into its own function
00:3826 .drop

00:3829 initrand
;; 00:3829 gbdk 2.95 libc/gb/rand.s:_initrand
;; 00:3829 Set the random seed.
;; 00:3829 Registers used: A, HL

00:3834 _strcpy
;; 00:3834 gbdk 2.95 libc/asm/gbz80/asm_string.s:_strcpy
;; 00:3834 char *strcpy(char *dest, const char *source)
;; 00:3834 Result: DE = dest
00:383e .strcpy_1

00:3846 _memcpy
;; 00:3846 gbdk 2.95 libc/asm/gbz80/asm_string.s:_memcpy
;; 00:3846 void *memcpy(void *dest, const void *source, int count)
;; 00:3846 Result: DE = dest
00:385a .memcpy_1
00:385d .memcpy_2

00:3866 _strcmp
;; 00:3866 gbdk 2.95 libc/asm/gbz80/asm_string.s:_strcmp
;; 00:3866 int strcmp(const char *s1, const char *s2)
;; 00:3866 Result: DE = 0 if equal, 1 if s1 is greater than s2, -1 if s1 is less than s2
00:3871 .strcmp_2
00:3878 .strcmp_1
00:387c .strcmp_3
00:3881 .strcmp_4
00:3889 .strcmp_5

00:388a call_mem_fill
;; 00:388a Write a repeating byte to memory.
;; 00:388a Entry conditions: HL = address, B = byte, DE = size
;; 00:388a Registers used: A, B, DE, HL

00:3892 _call_mem_fill
;; 00:3892 Write a repeating byte to memory.
;; 00:3892 Args: address (word), byte, size (word)
;; 00:3892 Registers used: A, HL

00:38a5 _mulschar_muluchar
;; 00:38a5 gbdk 2.95 libc/asm/gbz80/mul.s:__mulschar/__muluchar
;; 00:38a5 Multiply chars.
;; 00:38a5 Args: multiplicand, multiplier
;; 00:38a5 Result: DE
;; 00:38a5 See: mul8_mulu8

00:38b1 _mulsint_muluint
;; 00:38b1 gbdk 2.95 libc/asm/gbz80/mul.s:__mulsint/__muluint
;; 00:38b1 Multiply ints.
;; 00:38b1 Args: multiplicand (word), multiplier (word)
;; 00:38b1 Result: DE
;; 00:38b1 See: mul16_mulu16

00:38c2 mul8_mulu8
;; 00:38c2 gbdk 2.95 libc/asm/gbz80/mul.s:.mul8/.mulu8
;; 00:38c2
;; 00:38c2 8-bit multiplication.
;; 00:38c2
;; 00:38c2 Entry conditions:
;; 00:38c2   C = dividend
;; 00:38c2   E = divisor
;; 00:38c2
;; 00:38c2 Exit conditions:
;; 00:38c2   DE = product
;; 00:38c2
;; 00:38c2 Registers used: AF, BC, DE, HL

00:38c5 mul16_mulu16
;; 00:38c5 gbdk 2.95 libc/asm/gbz80/mul.s:.mul16/.mulu16
;; 00:38c5
;; 00:38c5 16-bit multiplication.
;; 00:38c5
;; 00:38c5 Entry conditions:
;; 00:38c5   BC = dividend
;; 00:38c5   DE = divisor
;; 00:38c5
;; 00:38c5 Exit conditions:
;; 00:38c5   DE = product (least significant word)
;; 00:38c5
;; 00:38c5 Registers used: AF, BC, DE, HL
00:38ca .mlp
00:38d1 .mlp1
00:38da .mend

00:38db _set_bkg_palette
;; 00:38db gbdk 2.95 libc/gb/cgb.s:_set_bkg_palette
;; 00:38db
;; 00:38db Set background palettes.
;; 00:38db
;; 00:38db Args:
;; 00:38db   first_palette
;; 00:38db   nb_palettes (count)
;; 00:38db   rgb_data (address)
;; 00:38db
;; 00:38db Registers used: AF, HL
00:38f1 .set_bkg_palette_1

00:3906 vbl
;; 00:3906 gbdk 2.95 libc/gb/drawing.s:.vbl

00:3911 lcd
;; 00:3911 gbdk 2.95 libc/gb/drawing.s:.lcd

00:391e jpad
;; 00:391e gbdk 2.95 libc/gb/pad.s:.jpad (with modifications)
;; 00:391e
;; 00:391e Get keypad button status.
;; 00:391e
;; 00:391e Exit conditions:
;; 00:391e   E = status (buttons held)
;; 00:391e       0x80: Start
;; 00:391e       0x40: Select
;; 00:391e       0x20: B
;; 00:391e       0x10: A
;; 00:391e       0x08: Down
;; 00:391e       0x04: Up
;; 00:391e       0x02: Left
;; 00:391e       0x01: Right
;; 00:391e
;; 00:391e Registers used: A, E
;; 00:394a Use E for return status instead of A like in gbdk
;; 00:394a The _joypad subroutine handles this in gbdk
;; 00:394a This is a little faster

00:394c delay
;; 00:394c gbdk 2.95 libc/gb/delay.s:.delay
;; 00:394c
;; 00:394c Wait for a given period of time.
;; 00:394c
;; 00:394c Entry conditions:
;; 00:394c   DE = milliseconds (1 to 65536, 0 = 65536)
;; 00:394c
;; 00:394c Registers used: AF, DE
00:3952 .ldlp
00:3954 .delay_1
00:3956 .delay_2
00:3958 .delay_3
00:395a .delay_4
00:395c .delay_5
00:3964 .delay_6
00:3966 .delay_7
00:3968 .delay_8
00:3969 dly
00:396f .dlp
00:3971 .dly_1
00:3973 .dly_2
00:3975 .dly_3
00:3977 .dly_4
00:3979 .dly_5
00:3980 .dly_6
00:3982 .dly_7
00:3984 .dly_8

00:3986 _delay
;; 00:3986 gbdk 2.95 libc/gb/delay.s:_delay
;; 00:3986 Wait for a given period of time.
;; 00:3986 Args: milliseconds (word)
;; 00:3986 See: delay

00:398f init_vram
;; 00:398f gbdk 2.95 libc/gb/init_tt.s:.init_vram
;; 00:398f
;; 00:398f Fill part of the VRAM with a value.
;; 00:398f
;; 00:398f Entry conditions:
;; 00:398f   B = value
;; 00:398f   DE = size
;; 00:398f   HL = address
;; 00:398f
;; 00:398f Registers used: A, B, DE, HL

00:399d init_wtt
;; 00:399d gbdk 2.95 libc/gb/init_tt.s:.init_wtt
;; 00:399d Fill window tile table with a value.
;; 00:399d Entry conditions: B = value
;; 00:399d Registers used: A, B, DE, HL
;; 00:39a3:r_op _SCRN0
00:39a8 .init_wtt_1
;; 00:39a8:r_op _SCRN1

00:39ad init_btt
;; 00:39ad gbdk 2.95 libc/gb/init_tt.s:.init_btt
;; 00:39ad Fill background tile table with a value.
;; 00:39ad See: init_wtt
;; 00:39b3:r_op _SCRN0
00:39b8 .init_btt_1
;; 00:39b8:r_op _SCRN1

00:39bb init_tt
;; 00:39bb gbdk 2.95 libc/gb/init_tt.s:.init_tt
;; 00:39bb Fill a tile table with a value.
;; 00:39bb See: init_wtt, init_btt

00:39c1 copy_vram
;; 00:39c1 gbdk 2.95 libc/gb/cpy_data.s:.copy_vram
;; 00:39c1
;; 00:39c1 Copy part of VRAM.
;; 00:39c1
;; 00:39c1 Entry conditions:
;; 00:39c1   BC = copy from address
;; 00:39c1   HL = copy to address
;; 00:39c1   DE = count

00:39d0 _set_bkg_tiles
;; 00:39d0 gbdk 2.95 libc/gb/set_bk_t.s:_set_bkg_tiles
;; 00:39d0 Set background tiles.
;; 00:39d0 Registers used: A, DE, HL

00:39e4 set_xy_wtt
;; 00:39e4 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_wtt
;; 00:39e4 Store window tile table.
;; 00:39e4
;; 00:39e4 Entry conditions:
;; 00:39e4   BC = store at address
;; 00:39e4   D = X
;; 00:39e4   E = Y
;; 00:39e4   H = width
;; 00:39e4   L = height
;; 00:39e4
;; 00:39e4 Registers used: A, BC, DE, HL
;; 00:39eb:r_op _SCRN0
00:39f0 .set_xy_wtt_1
;; 00:39f0:r_op _SCRN1

00:39f5 set_xy_btt
;; 00:39f5 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_btt
;; 00:39f5 Store background tile table.
;; 00:39f5 See: set_xy_wtt
;; 00:39fc:r_op _SCRN0
00:3a01 .set_xy_btt_1
;; 00:3a01 Skip jump to the next instruction
;; 00:3a01:r_op _SCRN1

00:3a04 set_xy_tt
;; 00:3a04 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_tt (with modifications)
;; 00:3a04 Store tile table.
;; 00:3a04 See: set_xy_wtt, set_xy_btt
00:3a0c .set_xy_tt_1
00:3a10 .set_xy_tt_2
00:3a18 .set_xy_tt_3
;; 00:3a20 TODO: document changes
00:3a35 .set_xy_tt_4

00:3a36 call_set_default_ram_values
;; 00:3a36 Set RAM addresses used to their default values.
;; 00:3a36 Registers used: A, DE, HL
;; 00:3bce Set the default screen to the project screen

00:3de7 .bank_00_padding
00:3de7 .data:0219

01:4487 call_01_4487

01:4811 call_01_4811

01:4848 call_01_4848

01:4d67 call_01_4d67

01:4dd3 call_01_4dd3

01:4e43 call_01_4e43

01:4eb3 call_01_4eb3

01:4f59 call_01_4f59

01:4f99 call_01_4f99

01:4fec call_01_4fec

01:518c call_01_518c

01:522d call_01_522d

01:546e call_01_546e

01:6d3b call_01_6d3b

01:7869 call_01_7869

01:7881 call_01_7881

01:7954 jump_01_7954

01:7c94 call_01_7c94

01:7ee1 _set_sprite_palette
;; 01:7ee1 gbdk 2.95 libc/gb/cgb.s:_set_sprite_palette
;; 01:7ee1 See: _set_bkg_palette
01:7ef7 .set_sprite_palette_1

02:6465 call_02_6465

02:65bb call_02_65bb

02:6631 call_02_6631

03:47b9 call_03_47b9

04:5b4e call_04_5b4e

05:4040 call_05_4040

06:431d call_06_431d

06:5aa1 call_06_5aa1

06:7235 call_06_7235

06:7655 note_labels
06:7655 .text:0005
06:765a .text:0036
06:767e .text:0036
06:76a2 .text:0036
06:76c6 .text:0036
06:76ea .text:0036
06:770e .text:0036
06:7732 .text:0036
06:7756 .text:0036
06:777a .text:0034
06:779c .data:0021

07:4788 call_07_4788

07:4adb call_07_4adb

07:66fe digits_string
07:66fe .text:0011
;; 07:66fe gbdk 2.95 libc/gb/digits.c:digits

07:7059 call_07_7059

1b:4e8a call_1b_4e8a

1b:53e8 call_1b_53e8

1b:5dbf call_1b_5dbf

1b:6b7a call_1b_6b7a

1b:754f call_1b_754f

1c:40f2 call_1c_40f2

1c:4e10 call_1c_4e10

1c:59e6 call_1c_59e6

1c:60e2 call_1c_60e2

1c:6194 call_1c_6194

1c:6239 call_1c_6239

1c:6281 call_1c_6281

1c:6343 call_1c_6343

1c:6384 call_1c_6384

1c:6495 call_1c_6495

1c:64c1 call_1c_64c1

1c:64ee call_1c_64ee

1c:6a20 call_1c_6a20

1c:6a9a call_1c_6a9a

1c:6bd7 call_1c_6bd7

1c:6f75 call_1c_6f75

1c:717c call_1c_717c

1c:72bf call_1c_72bf

1d:423d call_1d_423d

1d:43f7 call_1d_43f7

1d:4d5f call_1d_4d5f

1d:603c call_1d_603c

1d:713f call_1d_713f

1e:4000 call_1e_4000

1e:432a tileset
1e:432a .image:0300:w64

1e:462a .data:0082

1e:46ac font_3_content
1e:46ac .image:00470:w64
1e:4b1c .data:0a26
1e:5542 font_1_content
1e:5542 .image:00470:w64
1e:59b2 .data:0a26
1e:63d8 font_2_content
1e:63d8 .image:00470:w64
1e:6848 .data:11b2

1e:7aa0 call_1e_7aa0

1f:44dd call_1f_44dd

1f:4a64 call_1f_4a64

1f:4b8c call_1f_4b8c

1f:4bbb call_1f_4bbb

1f:6278 call_1f_6278

1f:65f1 call_1f_65f1

1f:6612 call_1f_6612

1f:6633 call_1f_6633

1f:6bac call_1f_6bac

1f:6bc2 call_1f_6bc2

1f:6cd7 call_1f_6cd7

1f:7087 call_1f_7087

; Memory

00:c402 CURRENT_SCREEN
;; 00:c402 0x01: phrase screen
;; 00:c402 0x02: groove screen
;; 00:c402 0x03: chain screen
;; 00:c402 0x04: song screen
;; 00:c402 0x05: table screen
;; 00:c402 0x06: instrument screen
;; 00:c402 0x07: crash screen
;; 00:c402 0x08: synth screen
;; 00:c402 0x09: project screen
;; 00:c402 0x0a: wave editor screen
;; 00:c402 0x0b: talk screen
;; 00:c402 0x0c: word screen
;; 00:c402 0x0d: file screen
;; 00:c402 0x0e: help screen

00:cbd8 CPU
;; 00:cbd8 gbdk 2.95 libc/gb/crt0.s:__cpu
;; 00:cbd8 GB type (GB, PGB, CGB)
00:cbd9 CPU_2
;; 00:cbd9 GB type 2 (used to check for GBA)

00:cbda MODE
;; 00:cbda gbdk 2.95 libc/gb/crt0.s:.mode
;; 00:cbda Current mode

00:cbdb IO_OUT
;; 00:cbdb gbdk 2.95 libc/gb/global.s:__io_out
;; 00:cbdb IO out byte.

00:cbdd IO_STATUS
;; 00:cbdd gbdk 2.95 libc/gb/global.s:__io_status
;; 00:cbdd Current status of serial IO.

00:cbe0 FONT_CURRENT
;; 00:cbe0 gbdk 2.95 libc/gb/font.ms:font_current
00:cbe3 FONT_FIRST_FREE_TILE
;; 00:cbe3 gbdk 2.95 libc/gb/font.ms:font_first_free_tile
;; 00:cbe3 Cached copy of first free tile.
00:cbe4 FONT_TABLE
;; 00:cbe4 gbdk 2.95 libc/gb/font.ms:font_table

00:cbf6 CURX
;; 00:cbf6 gbdk 2.95 libc/gb/font.ms:.curx
;; 00:cbf6 Current cursor X position.
00:cbf7 CURY
;; 00:cbf7 gbdk 2.95 libc/gb/font.ms:.cury
;; 00:cbf7 Current cursor Y position.

00:cbf8 RANDHI
;; 00:cbf8 gbdk 2.95 libc/gb/rand.s:.randhi
;; 00:cbf8 The random seed upper byte.
00:cbf9 RANDLO
;; 00:cbf9 gbdk 2.95 libc/gb/rand.s:.randlo
;; 00:cbf9 The random seed lower byte.

00:cbfa FG_COLOUR
;; 00:cbfa gbdk 2.95 libc/gb/font.ms:.fg_colour
00:cbfb BG_COLOUR
;; 00:cbfb gbdk 2.95 libc/gb/font.ms:.bg_colour

00:ff80 REFRESH_OAM
;; 00:ff80 gbdk 2.95 libc/gb/global.s:refresh_OAM

00:ff8e CURRENT_BANK
;; 00:ff8e Used to store the current bank number for banked calls.

; Kits

08:4000 kit_1
08:4000 .data:4000
09:4000 kit_2
09:4000 .data:4000
0a:4000 kit_3
0a:4000 .data:4000
0b:4000 kit_4
0b:4000 .data:4000
0c:4000 kit_5
0c:4000 .data:4000
0d:4000 kit_6
0d:4000 .data:4000
0e:4000 kit_7
0e:4000 .data:4000
0f:4000 kit_8
0f:4000 .data:4000
10:4000 kit_9
10:4000 .data:4000
11:4000 kit_10
11:4000 .data:4000
12:4000 kit_11
12:4000 .data:4000
13:4000 kit_12
13:4000 .data:4000
14:4000 kit_13
14:4000 .data:4000
15:4000 kit_14
15:4000 .data:4000
16:4000 kit_15
16:4000 .data:4000
17:4000 kit_16
17:4000 .data:4000
18:4000 kit_17
18:4000 .data:4000
19:4000 kit_18
19:4000 .data:4000
1a:4000 kit_19
1a:4000 .data:4000

20:4000 kit_20
20:4000 .data:4000
21:4000 kit_21
21:4000 .data:4000
22:4000 kit_22
22:4000 .data:4000
23:4000 kit_23
23:4000 .data:4000
24:4000 kit_24
24:4000 .data:4000
25:4000 kit_25
25:4000 .data:4000
26:4000 kit_26
26:4000 .data:4000
27:4000 kit_27
27:4000 .data:4000
28:4000 kit_28
28:4000 .data:4000
29:4000 kit_29
29:4000 .data:4000
2a:4000 kit_30
2a:4000 .data:4000
2b:4000 kit_31
2b:4000 .data:4000
2c:4000 kit_32
2c:4000 .data:4000
2d:4000 kit_33
2d:4000 .data:4000
2e:4000 kit_34
2e:4000 .data:4000
2f:4000 kit_35
2f:4000 .data:4000
30:4000 kit_36
30:4000 .data:4000
31:4000 kit_37
31:4000 .data:4000
32:4000 kit_38
32:4000 .data:4000
33:4000 kit_39
33:4000 .data:4000
34:4000 kit_40
34:4000 .data:4000
35:4000 kit_41
35:4000 .data:4000
36:4000 kit_42
36:4000 .data:4000
37:4000 kit_43
37:4000 .data:4000
38:4000 kit_44
38:4000 .data:4000
39:4000 kit_45
39:4000 .data:4000
3a:4000 kit_46
3a:4000 .data:4000
3b:4000 kit_47
3b:4000 .data:4000
3c:4000 kit_48
3c:4000 .data:4000
3d:4000 kit_49
3d:4000 .data:4000
3e:4000 kit_50
3e:4000 .data:4000
3f:4000 kit_51
3f:4000 .data:4000
