; This disassembly is only partially complete.

;; 00:0000 Most RSTs are unused
00:0000 rst_00
;; 00:0001 00:0001
;; 00:0001:replace:0007 ds $0007, $ff
00:0008 rst_08
;; 00:0008 00:0008
;; 00:0008:replace:0008 ds $0008, $ff
00:0010 rst_10
00:0018 rst_18
;; 00:001e Does nothing, used for breakpoints
00:0020 rst_20
;; 00:0020 00:0020
;; 00:0020:replace:0008 ds $0008, $ff
00:0028 rst_28
;; 00:0028 00:0028
;; 00:0028:replace:0008 ds $0008, $ff
00:0030 rst_30
;; 00:0030 00:0030
;; 00:0030:replace:0008 ds $0008, $ff
00:0038 rst_trigger_crash
;; 00:0039 Does nothing, used for breakpoints
;; 00:003c 00:003c
;; 00:003c:replace:0004 ds $0004, $ff

00:0040 vblank_interrupt
;; 00:0045 00:0045
;; 00:0045:replace:0003 ds $0003, $ff
00:0048 lcdc_interrupt
;; 00:0049 00:0049
;; 00:0049:replace:0007 ds $0007, $ff
00:0050 timer_overflow_interrupt
;; 00:0053 00:0053
;; 00:0053:replace:0005 ds $0005, $ff
00:0058 serial_transfer_complete_interrupt
;; 00:005b 00:005b
;; 00:005b:replace:0005 ds $0005, $ff
00:0060 joypad_transition_interrupt
00:0061 jump_00_0061
00:0061 .code:0008
;; 00:0061:r_op BANK(jump_01_7954)
;; 00:0066:l_op jump_01_7954
;; 00:0069 00:0069
;; 00:0069:replace:0097 ds $0100 - @, $ff

00:0100 Boot

00:0104 HeaderLogo
;; 00:0104 00:0104
;; 00:0104:replace:0048 NINTENDO_LOGO
00:0134 HeaderTitle
00:0134 .text:000c
00:013f HeaderManufacturerCode
00:013f .data:0004
00:0143 HeaderCGBFlag
;; 00:0143 Game supports CGB functions, but works on old gameboys also
00:0144 HeaderNewLicenseeCode
00:0144 .data:0002
00:0146 HeaderSGBFlag
;; 00:0146 No SGB functions (Normal Gameboy or CGB only game)
00:0146 .data:0001
00:0147 HeaderCartridgeType
;; 00:0147 00:0147
;; 00:0147:replace:0001 db CART_ROM_MBC5_RAM_BAT
00:0148 HeaderROMSize
00:0148 .data:0001
00:0149 HeaderRAMSize
00:0149 .data:0001
00:014a HeaderDestinationCode
;; 00:014a Destination is Japanese
00:014a .data:0001
00:014b HeaderOldLicenseeCode
00:014b .data:0001
00:014c HeaderMaskROMVersion
00:014c .data:0001
00:014d HeaderComplementCheck
;; 00:014d Checksums automatically calculated with rgbfix
00:014d .data:0001
00:014e HeaderGlobalChecksum_1
00:014e .data:0001
00:014f HeaderGlobalChecksum_2
00:014f .data:0001

00:0150 code_start
;; 00:0150 gbdk 2.95 libc/gb/crt0.s:.code_start (with modifications)
;; 00:0150 -
;; 00:0150 The labels in this subroutine are not local since they are possibly referenced elsewhere
;; 00:0152 Store CPU type 2 in E
00:015f _code_start_1
;; 00:0166 Skip clearing from 0xfe00 to 0xfeff
;; 00:0166 Clear from 0xff80 to 0xffff
00:016b _code_start_2
;; 00:0173 Store CPU type 2
;; 00:0187 Copy refresh_oam routine to HIRAM
;; 00:018d:r_op end_refresh_oam - start_refresh_oam
00:018f _code_start_4
;; 00:0195 Skip installing interrupt routines
;; 00:01a6 V-Blank on, don't enable serial I/O yet
;; 00:01aa Don't turn sound off yet
;; 00:01b5 Skip erasing the malloc list and gsinit

00:01ba data_00_01ba
00:01ba .data:0026

00:01e0 MODE_TABLE
;; 00:01e0 gbdk 2.95 libc/gb/crt0.s:.MODE_TABLE
;; 00:01e0 Jump table for modes
00:01e0 .data:0120

00:0300 call_multiply_1
;; 00:0300 Multiply register A by 1.
;; 00:0300 Result: HL
;; 00:0300 Registers used: A, HL

00:0304 call_multiply_2
;; 00:0304 Multiply register A by 2.
;; 00:0304 Result: HL
;; 00:0304 Registers used: A, HL

00:0309 call_multiply_3
;; 00:0309 Multiply register A by 3.
;; 00:0309 Result: HL
;; 00:0309 Registers used: A, HL

00:0310 call_multiply_4
;; 00:0310 Multiply register A by 4.
;; 00:0310 Result: HL
;; 00:0310 Registers used: A, HL

00:0316 call_multiply_6
;; 00:0316 Multiply register A by 6.
;; 00:0316 Result: HL
;; 00:0316 Registers used: A, HL

00:031e call_multiply_8
;; 00:031e Multiply register A by 8.
;; 00:031e Result: HL
;; 00:031e Registers used: A, HL

00:0327 call_multiply_12
;; 00:0327 Multiply register A by 12.
;; 00:0327 Result: HL
;; 00:0327 Registers used: A, HL

00:0330 call_multiply_16
;; 00:0330 Multiply register A by 16.
;; 00:0330 Result: HL
;; 00:0330 Registers used: A, HL

00:0338 call_multiply_20
;; 00:0338 Multiply register A by 20.
;; 00:0338 Result: HL
;; 00:0338 Registers used: A, HL

00:0342 call_multiply_24
;; 00:0342 Multiply register A by 24.
;; 00:0342 Result: HL
;; 00:0342 Registers used: A, HL

00:034c call_multiply_28
;; 00:034c Multiply register A by 28.
;; 00:034c Result: HL
;; 00:034c Registers used: A, HL

00:0358 call_multiply_32
;; 00:0358 Multiply register A by 32.
;; 00:0358 Result: HL
;; 00:0358 Registers used: A, HL

00:0363 call_multiply_40
;; 00:0363 Multiply register A by 40.
;; 00:0363 Result: HL
;; 00:0363 Registers used: A, HL

00:036f call_multiply_48
;; 00:036f Multiply register A by 48.
;; 00:036f Result: HL
;; 00:036f Registers used: A, HL

00:037b call_multiply_56
;; 00:037b Multiply register A by 56.
;; 00:037b Result: HL
;; 00:037b Registers used: A, HL

00:0387 call_multiply_64
;; 00:0387 Multiply register A by 64.
;; 00:0387 Result: HL
;; 00:0387 Registers used: A, HL

00:0391 jump_timer_overflow

00:066a call_00_066a

00:075a call_00_075a

00:07d2 call_00_07d2

00:081c data_dash_letters_string
00:081c .text:0015

00:0831 data_wave_play_type_strings
00:0831 data_manual_wave_play_type_string
00:0831 .text:0009
00:083a data_once_wave_play_type_string
00:083a .text:0009
00:0843 data_loop_wave_play_type_string
00:0843 .text:0009
00:084c data_pingpong_wave_play_type_string
00:084c .text:0009

00:0855 data_00_0855
00:0855 .data:00a2

00:08f7 call_00_08f7

00:0942 call_write_instrument_param
;; 00:0942 Write a single instrument param.
;; 00:0942 There are 0x40 instruments and 0x10 params.
;; 00:0942 Instrument type is the first param and must be less than 4.
;; 00:0942
;; 00:0942 Args: instrument, param (see param constants), value
;; 00:0942
;; 00:0942 Registers used: A, DE, HL

;; 00:0945 Verify instrument is in range
;; 00:0948:l_op _INSTRUMENTS

00:0950 .jump_verify_param
;; 00:0953:l_op _INSTRUMENT_PARAMS_SIZE

00:095b .jump_verify_value
;; 00:0965:l_op _INSTRUMENT_TYPES

00:096d .jump_calculate_address_1
00:0976 .jump_calculate_address_2
00:097b .jump_calculate_address_3

;; 00:0995 Write param value
;; 00:097e:r_op _SRAM_INSTRUMENT_PARAMS
;; 00:099b:r_op _SRAM_INSTRUMENT_PARAMS_BANK

;; 00:09a4 Return

00:09a8 data_00_09a8
00:09a8 .data:d8

00:0a80 call_read_instrument_param
;; 00:0a80 Read a single instrument param.
;; 00:0a80 There are 0x40 instruments and 0x10 params.
;; 00:0a80
;; 00:0a80 Args: instrument, param (see param constants)
;; 00:0a80
;; 00:0a80 Result: E
;; 00:0a80
;; 00:0a80 Registers used: A, DE, HL

;; 00:0a83 Verify instrument is in range
;; 00:0a86:l_op _INSTRUMENTS

00:0a8e .jump_verify_param
;; 00:0a91:l_op _INSTRUMENT_PARAMS_SIZE

00:0a99 .jump_calculate_address_1
00:0aa2 .jump_calculate_address_2
00:0aa7 .jump_calculate_address_3

;; 00:0ac2 Read param value
;; 00:0ac3:r_op _SRAM_INSTRUMENT_PARAMS_BANK
;; 00:0aaa:r_op _SRAM_INSTRUMENT_PARAMS

;; 00:0acd Return

00:0ad1 call_read_current_instrument_param_1
;; 00:0ad1 Read a single param from CURRENT_INSTRUMENT_1.
;; 00:0ad1 See also call_read_instrument_param.
;; 00:0ad1
;; 00:0ad1 Args: param (see param constants)
;; 00:0ad1
;; 00:0ad1 Result: E
;; 00:0ad1
;; 00:0ad1 Registers used: A, DE, HL

00:0ae5 call_read_song_chain
;; 00:0ae5 Read a song chain number from a row/channel.
;; 00:0ae5 Args: channel, row
;; 00:0ae5 Result: E
;; 00:0ae5 Registers used: A, DE, HL

;; 00:0aeb:l_op _CHANNELS

00:0af3 .jump_verify_row
;; 00:0af6:l_op _SONG_ROWS

00:0afe .jump_calculate_address_1
;; 00:0b03 The loop below will shift the row number left 2 times, multiplying it by 4.
00:0b07 .jump_calculate_address_2
00:0b0c .jump_calculate_address_3

;; 00:0b0f:r_op _SRAM_SONG_CHAINS
;; 00:0b27 Read chain from SRAM.
;; 00:0b28:r_op _SRAM_SONG_CHAINS_BANK

;; 00:0b33 Check bit 7, since there are only 0x80 chains and the value should never exceed 0x7f.
;; 00:0b38 Return 0xff (empty row) if the chain number is invalid

00:0b3d .jump_set_return_to_chain_number
00:0b3e .jump_return

00:0b43 call_00_0b43

00:0bed call_banked_call_old
;; 00:0bed Call a subroutine in another bank.
;; 00:0bed This version of call_banked_call uses extra instructions.
;; 00:0bed Args: bank, address (word)
;; 00:0bed Registers used: A, HL
00:0c0a call_banked_call_old_return
;; 00:0c0a Doesn't appear to actually do anything with register B or E

00:0c18 call_banked_call_arg_old
;; 00:0c18 Call a subroutine in another bank with an argument.
;; 00:0c18 This version of call_banked_call_arg uses extra instructions.
;; 00:0c18 Args: bank, address (word), arg
;; 00:0c18 Registers used: A, HL
00:0c39 call_banked_call_arg_old_return

00:0c49 call_banked_call_arg_2_old
;; 00:0c49 Call a subroutine in another bank with two byte arguments.
;; 00:0c49 Args: bank, address (word), arg1, arg2
;; 00:0c49 Registers used: A, HL
00:0c6f call_banked_call_arg_2_old_return

00:0c7e call_banked_call_arg_2_old_dup
;; 00:0c7e Duplicate of call_banked_call_arg_2.
00:0ca4 call_banked_call_arg_2_old_dup_return
;; 00:0ca4 Doesn't appear to actually do anything with register B or E

00:0cb4 call_banked_call_arg_3_old
;; 00:0cb4 Call a subroutine in another bank with three byte arguments.
;; 00:0cb4 Args: bank, address (word), arg1, arg2, arg3
;; 00:0cb4 Registers used: A, HL
00:0cde call_banked_call_arg_3_old_return

00:0ced call_is_kit_present
;; 00:0ced Determine if the given kit number is present.
;; 00:0ced
;; 00:0ced Args: kit_num
;; 00:0ced
;; 00:0ced Result: E
;; 00:0ced
;; 00:0ced Registers used: A, E, HL
;; 00:0d01:r_op _MAX_KIT_BANK
00:0d0c .jump_check_kit
;; 00:0d1c:l_op _KIT_CHECK_1
;; 00:0d22:l_op _KIT_CHECK_2
00:0d2b .jump_undefined_kit
00:0d2c .jump_restore_bank
00:0d37 .jump_return

00:0d3b call_00_0d3b

00:0d7a call_sort_pair
;; 00:0d7a Swap the two bytes in the given addresses if the first byte is greater.
;; 00:0d7a Args: (word) addr1, (word) addr2
;; 00:0d7a Registers used: A, DE, HL
00:0da7 .jump_return

00:0dab call_set_banner_text
;; 00:0dab Set the text of the top banner, then show the banner.
;; 00:0dab Args: address (word)
;; 00:0dab Registers used: A, DE, HL

;; 00:0dbb:r_op call_show_banner
;; 00:0dbf:r_op BANK(call_show_banner)

00:0dca call_00_0dca
;; 00:0dd1:r_op rRAMG
;; 00:0dd4:r_op CART_RAM_DISABLE

;; 00:0dd6:r_op BANK(call_1b_6b7a)
;; 00:0ddd:r_op BANK(call_1b_6b7a)
;; 00:0ddf:l_op call_1b_6b7a
;; 00:0de2:r_op BANK(call_01_4cf1)
;; 00:0de9:r_op BANK(call_01_4cf1)
;; 00:0deb:l_op call_01_4cf1
;; 00:0dee Assume the bank of call_01_4848 is the same as call_01_4cf1
;; 00:0dee:l_op call_01_4848

;; 00:0dfa:r_op LOW(call_1e_7aa0)
;; 00:0dfc:r_op HIGH(call_1e_7aa0)
;; 00:0dff:r_op BANK(call_1e_7aa0)

;; 00:0e10 Assume the bank of call_cart_test is the same as call_01_4cf1
;; 00:0e10:l_op call_cart_test

;; 00:0e17:r_op _SRAM_TOTAL_TIME_DAYS
;; 00:0e1b:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 00:0e28:r_op _SRAM_TOTAL_TIME_MINUTES
;; 00:0e2c:r_op _SRAM_TOTAL_TIME_MINUTES_BANK
;; 00:0e39:r_op _SRAM_TOTAL_TIME_HOURS
;; 00:0e3d:r_op _SRAM_TOTAL_TIME_HOURS_BANK

;; 00:0e46 Assume the bank of call_01_45d1 is the same as call_01_4cf1
;; 00:0e46:l_op call_01_45d1

;; 00:0e49 Assume the bank of call_01_48d4 is the same as call_01_4cf1
;; 00:0e49:l_op call_01_48d4

;; 00:0e8b:r_op call_01_7c94
;; 00:0e93:r_op BANK(call_01_7c94)

;; 00:0e4c:r_op BANK(call_1c_4057)
;; 00:0e53:r_op BANK(call_1c_4057)
;; 00:0e55:l_op call_1c_4057

;; 00:0e5e:r_op BANK(call_01_4811)
;; 00:0e65:r_op BANK(call_01_4811)
;; 00:0e67:l_op call_01_4811

;; 00:0e70:r_op BANK(call_1c_47b1)
;; 00:0e77:r_op BANK(call_1c_47b1)
;; 00:0e79:l_op call_1c_47b1

00:0e9f call_00_0e9f

;; 00:0eaf:r_op BANK(call_07_6864)
;; 00:0eb6:r_op BANK(call_07_6864)
;; 00:0eb8:l_op call_07_6864

;; 00:0f4f:r_op BANK(call_read_chain_phrase)
;; 00:0f56:r_op BANK(call_read_chain_phrase)
;; 00:0f65:l_op call_read_chain_phrase

;; 00:0f73:r_op BANK(call_01_4cfb)
;; 00:0f7a:r_op BANK(call_01_4cfb)
;; 00:0f81:l_op call_01_4cfb

;; 00:0fc4:r_op BANK(call_01_4d67)
;; 00:0fcb:r_op BANK(call_01_4d67)
;; 00:0fd2:l_op call_01_4d67

;; 00:0ff0:r_op BANK(call_1f_4a25)
;; 00:0ff7:r_op BANK(call_1f_4a25)
;; 00:0ff9:l_op call_1f_4a25

;; 00:1010:r_op _SRAM_TRANSPOSE
;; 00:1014:r_op _SRAM_TRANSPOSE_BANK

;; 00:102b:r_op BANK(call_02_7b9b)
;; 00:1032:r_op BANK(call_02_7b9b)
;; 00:1034:l_op call_02_7b9b

;; 00:1090:r_op BANK(call_write_phrase_command)
;; 00:1097:r_op BANK(call_write_phrase_command)
;; 00:10a7:l_op call_write_phrase_command

;; 00:10af:r_op BANK(call_write_table_command)
;; 00:10b6:r_op BANK(call_write_table_command)
;; 00:10d0:l_op call_write_table_command

;; 00:10d8:r_op BANK(call_write_table_command)
;; 00:10df:r_op BANK(call_write_table_command)
;; 00:10f9:l_op call_write_table_command

;; 00:1128:r_op BANK(call_1d_4d5f)
;; 00:112f:r_op BANK(call_1d_4d5f)
;; 00:1131:l_op call_1d_4d5f

;; 00:1164:r_op _SRAM_FILE_CHANGED
;; 00:1168:r_op _SRAM_FILE_CHANGED_BANK

00:1261 call_set_bg_tile_row
;; 00:1261 Set a row of background attributes to a given tile.
;; 00:1261
;; 00:1261 Args: x, y, width, tile
;; 00:1261
;; 00:1261 Exit conditions:
;; 00:1261   VRAM bank will be set to 0
;; 00:1261
;; 00:1261 Registers used: A, HL

;; 00:1272:r_op _TILE_COLS

00:127d .jump_handle_gbc
00:12b3 .jump_handle_dmg
00:12cd .jump_return

00:12cf _main

;; 00:12f4:r_op _GAMEBOY_COLOR

;; 00:131f:r_op BANK(call_1c_40f2)
;; 00:1326:r_op BANK(call_1c_40f2)
;; 00:1328:l_op call_1c_40f2
;; 00:132f:r_op _SRAM_PRELISTEN
;; 00:1333:r_op _SRAM_PRELISTEN_BANK

;; 00:1350:r_op BANK(call_1d_603c)
;; 00:1357:r_op BANK(call_1d_603c)
;; 00:1359:l_op call_1d_603c

;; 00:13ab:r_op BANK(call_01_4fec)
;; 00:13b2:r_op BANK(call_01_4fec)
;; 00:13b4:l_op call_01_4fec

;; 00:13c5 Assume the bank of call_01_50a0 is the same ass call_01_4fec
;; 00:13c5:l_op call_01_50a0

;; 00:13c8 Assume the bank of call_01_7869 is the same ass call_01_4fec
;; 00:13c8:l_op call_01_7869

;; 00:13de Assume the bank of call_01_7881 is the same ass call_01_4fec
;; 00:13de:l_op call_01_7881

00:1441 call_get_kit_bank_num
;; 00:1441 Get the kit bank for the kit number given by register A.
;; 00:1441 Result: E
;; 00:1441 Registers used: A, E

00:144b call_handle_exception
;; 00:144b Trigger a exception if an exception is not already in progress.
;; 00:144b Registers used: A, HL
;; 00:144b -
;; 00:144b Does nothing, used for breakpoints
;; 00:1453:l_op rst_trigger_crash

00:1454 call_trigger_breakpoint
;; 00:1454 Does nothing.
;; 00:1454 "ld b, b" can be used for debugger breakpoints.

00:149a call_read_low_external_ram
;; 00:149a Reads a byte from external RAM (bank 0xf or less).
;; 00:149a
;; 00:149a Args: bank, address (word)
;; 00:149a
;; 00:149a Exit conditions:
;; 00:149a   E = the byte at the address
;; 00:149a   Interrupts will be enabled
;; 00:149a   The external RAM register (0x0000) will be set to 0
;; 00:149a
;; 00:149a Registers used: A, DE, HL
;; 00:149d External RAM bank cannot be greater than or equal to 0x10
;; 00:14a6 Set external RAM bank number
;; 00:14a6:l_op [rRAMB]
;; 00:14a9 Enable external RAM
;; 00:14a9:r_op CART_RAM_ENABLE
;; 00:14ab:l_op [rRAMG]
;; 00:14ae Read byte
;; 00:14b1 Disable external RAM
;; 00:14b1:l_op [rRAMG]

00:14b5 call_read_external_ram
;; 00:14b5 Reads a byte from external RAM.
;; 00:14b5
;; 00:14b5 Args: bank, address (word)
;; 00:14b5
;; 00:14b5 Exit conditions:
;; 00:14b5   E = the byte at the address
;; 00:14b5   The external RAM register (0x0000) will be set to 0
;; 00:14bb:l_op [rRAMB]
;; 00:14be:r_op CART_RAM_ENABLE
;; 00:14c0:l_op [rRAMG]
;; 00:14c6:l_op [rRAMG]

00:14ca call_copy_low_external_ram_16x
;; 00:14ca Copy 16 bytes from or to extermal RAM (bank 0xf or less).
;; 00:14ca
;; 00:14ca Args: bank, copy_from_addr (word), copy_to_addr (word)
;; 00:14ca
;; 00:14ca Exit conditions:
;; 00:14ca   Interrupts will be enabled
;; 00:14b5   The external RAM register (0x0000) will be set to 0
;; 00:14ca
;; 00:14ca Registers used: A, DE, HL
;; 00:14ce:l_op [rRAMB]
;; 00:14dd:r_op CART_RAM_ENABLE
;; 00:14df:l_op [rRAMG]
;; 00:1512:l_op [rRAMG]

00:1516 call_read_low_external_ram_offset
;; 00:1516 Read a byte offset from the start of external RAM (0xa0000).
;; 00:1516 The given bank must not be greater than 0xf.
;; 00:1516 The given offset must not be greater than 0x1fff.
;; 00:1516
;; 00:1516 Args: bank, offset (word)
;; 00:1516
;; 00:1516 Exit conditions:
;; 00:1516   E = the byte at the offset
;; 00:1516   Interrupts will be enabled
;; 00:1516   The external RAM register (0x0000) will be set to 0
;; 00:1527 Check that the address is not out of range
;; 00:1527:l_op HIGH(_SRAM)
;; 00:152c:l_op HIGH(_SRAM + $2000)
;; 00:1533:l_op [rRAMB]
;; 00:1536:r_op CART_RAM_ENABLE
;; 00:1538:l_op [rRAMG]
;; 00:153e:l_op [rRAMG]

00:1542 call_write_external_ram
;; 00:1542 Write a byte to external RAM.
;; 00:1542
;; 00:1542 Args: bank, address (word), byte
;; 00:1542
;; 00:1542 Exit conditions:
;; 00:1542   The external RAM register (0x0000) will be set to 0
;; 00:1542
;; 00:1542 Registers used: A, DE, HL
;; 00:154b Set the external RAM bank number
;; 00:154b:l_op [rRAMB]
;; 00:154e Enable external RAM
;; 00:1553 Write byte
;; 00:1555 Disable external RAM
;; 00:154e:r_op CART_RAM_ENABLE
;; 00:1550:l_op [rRAMG]
;; 00:1556:l_op [rRAMG]

00:155a call_halt
;; 00:155a Call the halt instruction, waiting for any interrupts

00:155d call_00_155d

00:1644 call_00_1644

00:172f call_00_172f

00:1768 call_jump_hl
;; 00:1768 Jump to the address stored in HL.

00:1769 call_banked_call
;; 00:1769 Call a subroutine in another bank.
;; 00:1769 Args: bank, address (word)
;; 00:1769 Registers used: A, HL

00:178a call_banked_call_arg
;; 00:178a Call a subroutine in another bank with an argument.
;; 00:178a Args: bank, address (word), arg
;; 00:178a Registers used: A, HL

00:17b0 call_00_17b0

00:17bb call_oam_vram_safe_write
;; 00:17bb Write a byte to OAM/VRAM when both are safe to use.
;; 00:17bb Args: address (word), byte
;; 00:17bb Registers used: A, E, HL
00:17c2 .jump_wait_for_oam_vram
;; 00:17c4:l_op STATF_OAM | STATF_BUSY

00:17ca call_clear_tiles
;; 00:17ca Clear all tiles in VRAM.
;; 00:17ca Registers used: A, BC, HL

;; 00:17cd:r_op _TILE_ROWS
00:17cf .jump_reset_tile_cols
;; 00:17cf:r_op _TILE_COLS

00:17d1 .jump_wait_vram
;; 00:17d3:l_op STATF_BUSY

;; 00:17d7 Clear tile
;; 00:17d8 Next address
;; 00:17e3 Return

00:17e4 call_00_17e4

00:193d call_00_193d

00:1958 call_00_1958

00:195d call_00_195d

00:19dd call_00_19dd

00:1a5e call_00_1a5e

00:1ab6 call_00_1ab6

00:1adf call_00_1adf

00:1b58 data_00_1b58
00:1b58 .data:0002

00:1b5e call_00_1b5e

00:1bad call_00_1bad

00:1bf4 call_00_1bf4

00:1c33 call_00_1c33

00:1c3b call_00_1c3b

00:1c4d call_00_1c4d

00:1c5f call_00_1c5f

00:1c71 call_00_1c71

00:1ca1 call_check_new_keys
;; 00:1ca1 Check new keypresses in the buffer and update CURRENT_KEY_PRESS_COUNT.
;; 00:1ca1 Registers used: A, E, HL

;; 00:1ca9:r_op HIGH(KEY_BUFFER)

00:1cb3 .jump_return

00:1cb6 call_00_1cb6
;; 00:1cb6:r_op _SRAM_SYNC
;; 00:1cbe:r_op _SRAM_PS2_DELAY

00:1ce0 call_00_1ce0

00:1d23 call_00_1d23

00:1d54 call_00_1d54

;; 00:1d99:r_op BANK(call_02_5f28)
;; 00:1da0:r_op BANK(call_02_5f28)
;; 00:1da2:l_op call_02_5f28

;; 00:1daa:l_op _SONG_SCREEN

;; 00:1e16:r_op BANK(call_02_7b9b)
;; 00:1e1d:r_op BANK(call_02_7b9b)
;; 00:1e1f:l_op call_02_7b9b

00:1e27 data_00_1e27
00:1e27 .text:0005

00:1e2c call_00_1e2c

;; 00:1e3a:r_op BANK(call_02_7b9b)
;; 00:1e41:r_op BANK(call_02_7b9b)
;; 00:1e43:l_op call_02_7b9b
;; 00:1e46:l_op call_02_7b9b

00:1e4a call_00_1e4a

00:1e7f call_00_1e7f

00:1e9a call_00_1e9a

00:1ebd call_00_1ebd

00:1f51 call_00_1f51

00:1f8c call_rom_test
;; 00:1f8c Check the ROM image for integrity by recalculating the global checksum.
;; 00:1f8c
;; 00:1f8c Exit conditions:
;; 00:1f8c   Current bank (0x2000) = 0x3f
;; 00:1f8c   E = success
;; 00:1f8c
;; 00:1f8c Registers used: A, DE, HL
00:1faa .call_rom_test_1
00:1fd1 .call_rom_test_2
00:1fd4 .call_rom_test_3
00:1fdf .call_rom_test_4
00:2007 .call_rom_test_5
00:2034 .call_rom_test_6
00:2035 .call_rom_test_7
00:2056 .call_rom_test_8
00:2057 .call_rom_test_9
00:2060 .call_rom_test_10
00:2064 .call_rom_test_11

00:206a call_sum_bank
;; 00:206a Get the sum of the ROM in the currently selected bank.
;; 00:206a Entry conditions: 0x2000 = bank
;; 00:206a Exit conditions: DE = sum
;; 00:206a Registers used: A, DE, HL
00:2070 .call_sum_bank_1
00:2076 .call_sum_bank_2

00:207b call_sram_test_address
;; 00:207b Test the integrity of a single SRAM address.
;; 00:207b Exit conditions: E = success
;; 00:207b Registers used: A, E, HL
00:207e .call_sram_test_address_1
00:2090 .call_sram_test_address_2

00:2092 call_00_2092

;; 00:2096:r_op BANK(call_02_7030)
;; 00:209d:r_op BANK(call_02_7030)
;; 00:209f:l_op call_02_7030

00:20bd call_00_20bd
;; 00:20d1:r_op _SRAM_SONG_CHAINS
;; 00:20ea:r_op _SRAM_SONG_CHAINS_BANK

00:20f8 call_00_20f8
;; 00:210c:r_op _SRAM_CHAIN_PHRASES
;; 00:2125:r_op _SRAM_CHAIN_PHRASES_BANK

00:2133 call_00_2133

00:2233 call_00_2233

;; 00:2273:r_op BANK(call_02_701d)
;; 00:227a:r_op BANK(call_02_701d)
;; 00:227f:l_op call_02_701d

;; 00:2286:l_op _PROJECT_SCREEN

;; 00:228b:r_op BANK(call_1b_5b7a)
;; 00:2292:r_op BANK(call_1b_5b7a)
;; 00:229e:l_op call_1b_5b7a

;; 00:22c1:r_op BANK(call_02_5534)
;; 00:22c8:r_op BANK(call_02_5534)
;; 00:22ca:l_op call_02_5534

00:2300 call_00_2300

;; 00:235f:r_op BANK(call_1c_72bf)
;; 00:2366:r_op BANK(call_1c_72bf)
;; 00:2368:l_op call_1c_72bf

00:237d call_00_237d

00:245b call_00_245b
;; 00:2460:l_op _CRASH_SCREEN
;; 00:2465:l_op _WAVE_EDITOR_SCREEN
;; 00:246a:l_op _PROJECT_SCREEN
;; 00:246f:l_op _FILE_SCREEN
;; 00:2474:l_op _HELP_SCREEN

00:2490 call_00_2490

;; 00:249e:r_op BANK(call_copy_current_screen_bg_tile_page)
;; 00:24a5:r_op BANK(call_copy_current_screen_bg_tile_page)
;; 00:24a7:l_op call_copy_current_screen_bg_tile_page

;; 00:24ae:l_op _INSTRUMENT_SCREEN
;; 00:24b3:l_op _WAVE_EDITOR_SCREEN
;; 00:24b8:l_op _SYNTH_SCREEN
;; 00:24bd:l_op _FILE_SCREEN
;; 00:24c2:l_op _HELP_SCREEN

;; 00:24c7:r_op BANK(call_05_4040)
;; 00:24ce:r_op BANK(call_05_4040)
;; 00:24d0:l_op call_05_4040

;; 00:24d7:l_op _PHRASE_SCREEN

;; 00:24dc:r_op BANK(call_1e_4000)
;; 00:24e3:r_op BANK(call_1e_4000)
;; 00:24e5:l_op call_1e_4000

;; 00:2503:r_op _HELP_SCREEN

00:2516 jump_table_00_2516

;; 00:2546:r_op BANK(call_04_4ce5)
;; 00:254d:r_op BANK(call_04_4ce5)
;; 00:254f:l_op call_04_4ce5

;; 00:2555:r_op BANK(call_1d_4202)
;; 00:255c:r_op BANK(call_1d_4202)
;; 00:255e:l_op call_1d_4202

;; 00:2564:r_op BANK(call_06_58e8)
;; 00:256b:r_op BANK(call_06_58e8)
;; 00:256d:l_op call_06_58e8

;; 00:2573:r_op BANK(call_07_4552)
;; 00:257a:r_op BANK(call_07_4552)
;; 00:257c:l_op call_07_4552

;; 00:2582:r_op BANK(call_05_4762)
;; 00:2589:r_op BANK(call_05_4762)
;; 00:258b:l_op call_05_4762

;; 00:2591:r_op BANK(call_03_4e06)
;; 00:2598:r_op BANK(call_03_4e06)
;; 00:259a:l_op call_03_4e06

;; 00:25a3:r_op BANK(call_06_4ec2)
;; 00:25aa:r_op BANK(call_06_4ec2)
;; 00:25ac:l_op call_06_4ec2

;; 00:25b2:r_op BANK(call_1b_5c17)
;; 00:25b9:r_op BANK(call_1b_5c17)
;; 00:25bb:l_op call_1b_5c17

;; 00:25c1:r_op BANK(call_1d_68b2)
;; 00:25c8:r_op BANK(call_1d_68b2)
;; 00:25ca:l_op call_1d_68b2

;; 00:25d3:r_op BANK(call_06_41a2)
;; 00:25da:r_op BANK(call_06_41a2)
;; 00:25dc:l_op call_06_41a2

;; 00:25e2:r_op BANK(call_1c_57bb)
;; 00:25e9:r_op BANK(call_1c_57bb)
;; 00:25eb:l_op call_1c_57bb

;; 00:25f1:r_op BANK(call_1b_4a62)
;; 00:25f8:r_op BANK(call_1b_4a62)
;; 00:25fa:l_op call_1b_4a62

00:25fe call_00_25fe

;; 00:2626:l_op _PHRASE_SCREEN
;; 00:262c:r_op _TABLE_SCREEN

00:2640 jump_table_00_2640

;; 00:264f:r_op BANK(call_1f_642a)
;; 00:2656:r_op BANK(call_1f_642a)
;; 00:2658:l_op call_1f_642a

;; 00:265e:r_op BANK(call_1d_423d)
;; 00:2665:r_op BANK(call_1d_423d)
;; 00:2667:l_op call_1d_423d

;; 00:266d:r_op BANK(call_05_4967)
;; 00:2674:r_op BANK(call_05_4967)
;; 00:2676:l_op call_05_4967

;; 00:267c:r_op BANK(call_06_5a03)
;; 00:2683:r_op BANK(call_06_5a03)
;; 00:2685:l_op call_06_5a03

;; 00:268b:r_op BANK(call_07_4788)
;; 00:2692:r_op BANK(call_07_4788)
;; 00:2694:l_op call_07_4788

;; 00:26a3:l_op _CRASH_SCREEN
;; 00:26a8:l_op _WAVE_EDITOR_SCREEN
;; 00:26ad:l_op _PROJECT_SCREEN
;; 00:26b2:l_op _FILE_SCREEN
;; 00:26b7:l_op _HELP_SCREEN

;; 00:26bc:r_op BANK(call_06_7235)
;; 00:26c3:r_op BANK(call_06_7235)
;; 00:26c5:l_op call_06_7235
;; 00:26c8:l_op call_06_741e

00:26cd call_00_26cd

;; 00:26d4:l_op _CRASH_SCREEN
;; 00:26d9:l_op _WAVE_EDITOR_SCREEN
;; 00:26de:l_op _PROJECT_SCREEN
;; 00:26e3:l_op _FILE_SCREEN
;; 00:26e8:l_op _HELP_SCREEN

;; 00:271e:l_op _SONG_SCREEN

;; 00:27a8:r_op BANK(call_02_6171)
;; 00:27af:r_op BANK(call_02_6171)
;; 00:27c1:l_op call_02_6171

;; 00:27d9:r_op BANK(call_1f_6ff1)
;; 00:27e0:r_op BANK(call_1f_6ff1)
;; 00:27e2:l_op call_1f_6ff1

;; 00:28d4:r_op BANK(call_1f_6ff1)
;; 00:28db:r_op BANK(call_1f_6ff1)
;; 00:28dd:l_op call_1f_6ff1

;; 00:28ee:l_op _SELECT_CURSOR_MODE

;; 00:2a12:r_op BANK(call_1f_6ff1)
;; 00:2a19:r_op BANK(call_1f_6ff1)
;; 00:2a1b:l_op call_1f_6ff1

00:2a24 call_00_2a24

;; 00:2a26:r_op _HELP_SCREEN

00:2a39 jump_table_00_2a39

;; 00:2a69:r_op BANK(call_04_5b4e)
;; 00:2a70:r_op BANK(call_04_5b4e)
;; 00:2a72:l_op call_04_5b4e

;; 00:2a79:r_op BANK(call_1d_43f7)
;; 00:2a80:r_op BANK(call_1d_43f7)
;; 00:2a82:l_op call_1d_43f7

;; 00:2a89:r_op BANK(call_06_5aa1)
;; 00:2a90:r_op BANK(call_06_5aa1)
;; 00:2a92:l_op call_06_5aa1

;; 00:2a99:r_op BANK(call_07_4adb)
;; 00:2aa0:r_op BANK(call_07_4adb)
;; 00:2aa2:l_op call_07_4adb

;; 00:2aa9:r_op BANK(call_05_4b5d)
;; 00:2ab0:r_op BANK(call_05_4b5d)
;; 00:2ab2:l_op call_05_4b5d

;; 00:2ab9:r_op BANK(call_03_53fd)
;; 00:2ac0:r_op BANK(call_03_53fd)
;; 00:2ac2:l_op call_03_53fd

;; 00:2ac9:r_op BANK(call_1b_53e8)
;; 00:2ad0:r_op BANK(call_1b_53e8)
;; 00:2ad2:l_op call_1b_53e8

;; 00:2ad9:r_op BANK(call_06_5029)
;; 00:2ae0:r_op BANK(call_06_5029)
;; 00:2ae2:l_op call_06_5029

;; 00:2ae9:r_op BANK(call_1b_5dbf)
;; 00:2af0:r_op BANK(call_1b_5dbf)
;; 00:2af2:l_op call_1b_5dbf

;; 00:2af9:r_op BANK(call_1d_713f)
;; 00:2b00:r_op BANK(call_1d_713f)
;; 00:2b02:l_op call_1d_713f

;; 00:2b0c:r_op BANK(call_06_431d)
;; 00:2b13:r_op BANK(call_06_431d)
;; 00:2b15:l_op call_06_431d

;; 00:2b1c:r_op BANK(call_1c_59e6)
;; 00:2b23:r_op BANK(call_1c_59e6)
;; 00:2b25:l_op call_1c_59e6

;; 00:2b2c:r_op BANK(call_1b_4bc3)
;; 00:2b33:r_op BANK(call_1b_4bc3)
;; 00:2b35:l_op call_1b_4bc3

00:2b40 call_00_2b40

00:2b77 call_00_2b77

00:2bef call_00_2bef

00:2c48 data_00_2c48
00:2c48 .data:0004
00:2c4c data_00_2c4c
00:2c4c .data:0004
00:2c50 data_00_2c50
00:2c50 .data:0004
00:2c54 data_00_2c54
00:2c54 .data:0003

00:2c57 call_00_2c57

00:2c79 call_00_2c79

00:2cc5 data_channel_label_strings
00:2cc5 data_noise_channel_label_string
00:2cc5 .text:0004
00:2cc9 data_pulse1_channel_label_string
00:2cc9 .text:0004
00:2ccd data_pulse2_channel_label_string
00:2ccd .text:0004
00:2cd1 data_wave_channel_label_string
00:2cd1 .text:0004

00:2cd5 call_write_instrument_pulse_wave_bg_attrs
;; 00:2cd5 Write the background attributes for instrument pulse waves.
;; 00:2cd5
;; 00:2cd5 Args:
;; 00:2cd5   pulse_wave_type (1 = 25%, 2 = 12.5%, 3 = 50%, otherwise 75%)
;; 00:2cd5
;; 00:2cd5 Registers used: A, DE, HL

;; 00:2cd8 Use 75% by default

00:2cf8 .jump_pulse_wave_50
00:2d03 .jump_pulse_waves_25
00:2d0e .jump_pulse_waves_12_5
00:2d16 .jump_write_bg_attrs

00:2d25 data_pulse_wave_tiles_75
;; 00:2d25 00:2d25
;; 00:2d25:replace:0003 db _PULSE_WAVE_75_ASCII_CODE_1, _PULSE_WAVE_75_ASCII_CODE_2, $00
00:2d28 data_pulse_wave_tiles_50
;; 00:2d28 00:2d28
;; 00:2d28:replace:0003 db _PULSE_WAVE_50_ASCII_CODE, _PULSE_WAVE_FLAT_ASCII_CODE, $00
00:2d2b data_pulse_wave_tiles_25
;; 00:2d2b 00:2d2b
;; 00:2d2b:replace:0003 db _PULSE_WAVE_25_ASCII_CODE, _PULSE_WAVE_FLAT_ASCII_CODE, $00
00:2d2e data_pulse_wave_tiles_12_5
;; 00:2d2e 00:2d2e
;; 00:2d2e:replace:0003 db _PULSE_WAVE_12_5_ASCII_CODE, _PULSE_WAVE_FLAT_ASCII_CODE, $00

00:2d31 call_write_command_value_bg_attrs
;; 00:2d31 Write the background attributes for a command.
;; 00:2d31 Draws sprites if the command is empty, or if the wave/ output command is used.
;; 00:2d31 Otherwise, draws the digits for the command value.
;; 00:2d31
;; 00:2d31 Args: command, command_value
;; 00:2d31
;; 00:2d31 Registers used: A, DE, HL

;; 00:2d3e:l_op _O_COMMAND
;; 00:2d46:l_op _W_COMMAND

00:2d4e .jump_handle_empty_command
00:2d5a .jump_handle_pulse_waves
;; 00:2d5e:l_op _WAVE_CHANNEL
00:2d70 .jump_write_pulse_waves_bg_attrs

00:2d7d .jump_handle_output
;; 00:2d7d Write L ON R ON by default
;; 00:2d89:l_op _OUTPUT_L_OFF_R_OFF_VALUE
;; 00:2d90:l_op _OUTPUT_L_ON_R_OFF_VALUE
;; 00:2d95:l_op _OUTPUT_L_OFF_R_ON_VALUE
00:2d9d .jump_output_l_off_r_off
00:2da8 .jump_output_l_on_r_off
00:2db3 .jump_output_l_off_r_on
00:2dbb .jump_write_output_bg_attrs

00:2dc9 .jump_handle_digits

00:2dd3 .jump_return

00:2dd7 data_output_l_on_r_on_tiles
;; 00:2dd7 00:2dd7
;; 00:2dd7:replace:0003 db _OUTPUT_L_ON_ASCII_CODE, _OUTPUT_R_ON_ASCII_CODE, $00
00:2dda data_empty_command_value_tiles
;; 00:2dda 00:2dda
;; 00:2dda:replace:0003 db _EMPTY_ROW_ASCII_CODE, _EMPTY_ROW_ASCII_CODE, $00
00:2ddd data_output_l_off_r_off_tiles
;; 00:2ddd 00:2ddd
;; 00:2ddd:replace:0003 db _OUTPUT_L_OFF_ASCII_CODE, _OUTPUT_R_OFF_ASCII_CODE, $00
00:2de0 data_output_l_on_r_off_tiles
;; 00:2de0 00:2de0
;; 00:2de0:replace:0003 db _OUTPUT_L_ON_ASCII_CODE, _OUTPUT_R_OFF_ASCII_CODE, $00
00:2de3 data_output_l_off_r_on_tiles
;; 00:2de3 00:2de3
;; 00:2de3:replace:0003 db _OUTPUT_L_OFF_ASCII_CODE, _OUTPUT_R_ON_ASCII_CODE, $00

00:2de6 call_write_2x_digit_bg_map_attrs
;; 00:2de6 Write 2 digit background map attributes to memory.
;; 00:2de6 If the target address is not in the range 0x9800 - 0x9aff, throws an exception.
;; 00:2de6
;; 00:2de6 Entry conditions:
;; 00:2de6   A = value (2 chars)
;; 00:2de6   BG_MAP_ATTR_TARGET_* must be set
;; 00:2de6   BG_MAP_ATTR_DIGIT_BG_PALETTE must be set
;; 00:2de6
;; 00:2de6 Exit conditions:
;; 00:2de6   Digits for the two chars will be written to the address given by BG_MAP_ATTR_TARGET_*
;; 00:2de6   BG_MAP_ATTR_TARGET_* will be incremented by 2
;; 00:2de6
;; 00:2de6 Registers used: A, E, HL

;; 00:2df2:l_op HIGH(_SCRN0)
;; 00:2df7:l_op HIGH(_SCRN0) + 3
00:2e03 .jump_wait_vram_1
;; 00:2e05:l_op STATF_BUSY
;; 00:2e09 Write upper char
00:2e10 .jump_wait_vram_2
;; 00:2e12:l_op STATF_BUSY
;; 00:2e16 Write lower char
;; 00:2e18 Increment target
;; 00:2e20 Return

00:2e22 call_write_2x_digit_bg_map_attrs_arg
;; 00:2e22 The same as call_write_2x_digit_bg_map_attrs, but use an argument instead of the A register for the source byte.
;; 00:2e22 Args: source_byte

;; 00:2e2c:l_op HIGH(_SCRN0)
;; 00:2e31:l_op HIGH(_SCRN0) + 3
00:2e45 .jump_wait_vram_1
;; 00:2e47:l_op STATF_BUSY
;; 00:2e4b Write upper char
00:2e4d .jump_read_lower_char
00:2e52 .jump_wait_vram_2
;; 00:2e58 Write lower char
;; 00:2e5a Increment target
;; 00:2e62 Return

00:2e64 call_update_dmg_sprite_bg
;; 00:2e64 Update the background color of tiles with sprites on original GameBoy (DMG).
;; 00:2e64
;; 00:2e64 Args:
;; 00:2e64   column
;; 00:2e64   row
;; 00:2e64   width
;; 00:2e64   height
;; 00:2e64   color (0x00 = background, 0x01 = secondary, 0x02 = foreground)
;; 00:2e64
;; 00:2e64 Registers used: A, DE, HL

;; 00:2e6b:l_op _DMG_COLOR_SECONDARY
;; 00:2e6f Handle foreground color
00:2e73 .jump_handle_background_color
00:2e77 .jump_handle_secondary_color
00:2e79 .jump_store_color

00:2e7d .jump_calculate_tile_address_1

00:2e93 .jump_calculate_tile_address_2
;; 00:2e94:r_op HIGH(_SCRN0)
;; 00:2e98:l_op HIGH(_SCRN0)
;; 00:2e9d:l_op HIGH(_SCRN0) + 3

; TODO: name better?
00:2ea5 .jump_store_loop_info
00:2ea9 .jump_wait_vram_1
;; 00:2eab:l_op STATF_BUSY

;; 00:2eaf Read current tile value
;; 00:2eb0 Start modifying tile value
00:2eb4 .jump_modify_tile_value

00:2ec2 .jump_wait_vram_2
;; 00:2ec4:l_op STATF_BUSY

;; 00:2ec8 Write updated tile

;; 00:2ec9 Start calculating next tile location
;; 00:2ecb:l_op _TILE_MAP_SIZE

00:2ed0 .jump_calculate_next_tile_address

;; 00:2ed8 Return

00:2eda call_write_bg_map_attr_indexes
;; 00:2eda Write background map attribute data to memory.
;; 00:2eda Data will be read from a source address using indexes.
;; 00:2eda If the target address is not in the range 0x9800 - 0x9aff, throws an exception.
;; 00:2eda
;; 00:2eda Entry conditions:
;; 00:2eda   BG_MAP_ATTR_SOURCE_* must be set
;; 00:2eda   BG_MAP_ATTR_TARGET_* must be set
;; 00:2eda   BG_MAP_ATTR_BG_PALETTE must be set
;; 00:2eda
;; 00:2eda Args:
;; 00:2eda   indexes (word) = An address containing an array of indexes offset from the source address.
;; 00:2eda                    Terminated by a null byte.
;; 00:2eda
;; 00:2eda Exit conditions:
;; 00:2eda   The values at BG_MAP_ATTR_SOURCE_* + indexes[*] added with BG_MAP_ATTR_BG_PALETTE will be written to BG_MAP_ATTR_TARGET_*.
;; 00:2eda
;; 00:2eda Registers used: A, DE, HL

;; 00:2ede:l_op HIGH(_SCRN0)
;; 00:2ee3:l_op HIGH(_SCRN0) + 3
00:2ef7 .jump_loop
00:2f02 .jump_read_value
;; 00:2f0b:l_op HIGH(_SCRN0) + 3
00:2f10 .jump_wait_vram
;; 00:2f12:l_op STATF_BUSY
;; 00:2f16 Write byte to VRAM
00:2f1f .jump_end_loop
00:2f22 .jump_return

00:2f24 call_write_bg_map_attr_index_20
;; 00:2f24 Same as call_write_bg_map_attr_index, but use 0x20 as the index.

00:2f26 call_write_bg_map_attr_index
;; 00:2f26 Write a single background map attribute byte to memory.
;; 00:2f26 Data will be read from a single index of a source address.
;; 00:2f26 If the target address is not in the range 0x9800 - 0x9aff, throws an exception.
;; 00:2f26
;; 00:2f26 Entry conditions:
;; 00:2f26   A = index
;; 00:2f26   BG_MAP_ATTR_SOURCE_* must be set
;; 00:2f26   BG_MAP_ATTR_TARGET_* must be set
;; 00:2f26   BG_MAP_ATTR_BG_PALETTE must be set
;; 00:2f26
;; 00:2f26 Exit conditions:
;; 00:2f26   The value at BG_MAP_ATTR_SOURCE_* + index added with BG_MAP_ATTR_BG_PALETTE will be written to BG_MAP_ATTR_TARGET_*.
;; 00:2f26
;; 00:2f26 Registers used: A, C, E, HL

;; 00:2f2a:l_op HIGH(_SCRN0)
;; 00:2f2f:l_op HIGH(_SCRN0) + 3
00:2f3e .jump_read_value
00:2f49 .jump_wait_vram
;; 00:2f4b:l_op STATF_BUSY
;; 00:2f4f Write byte to VRAM
;; 00:2f50 Increment target

00:2f63 call_00_2f63

00:2f6c call_00_2f6c

00:2f82 call_00_2f82

00:2f98 call_00_2f98

00:2faf data_00_2faf
00:2faf .data:0010

00:2ff5 call_00_2ff5

00:303c call_00_303c

00:3077 call_00_3077

00:307d call_00_307d

00:308c call_00_308c

00:30f4 call_00_30f4

00:3116 call_00_3116

00:313e call_00_313e

00:3155 call_00_3155

00:3183 call_00_3183

00:31bc call_00_31bc

00:31d3 call_00_31d3

00:31ea call_00_31ea

00:3201 call_00_3201

00:3264 call_00_3264

00:329b call_00_329b

00:32b0 font_copy_uncompressed
;; 00:32b0 gbdk 2.95 libc/gb/font.ms:font_copy_uncompressed
;; 00:32b0
;; 00:32b0 Copy uncompressed 16 byte tiles.
;; 00:32b0 Uses the current fg_colour and bg_colour fields.
;; 00:32b0
;; 00:32b0 Entry conditions:
;; 00:32b0   BC = copy from address
;; 00:32b0   HL = copy to address (must be aligned to UWORD boundary)
;; 00:32b0   DE = count (cells * 8)
;; 00:32b0
;; 00:32b0 Registers used: A, BC, DE, HL
00:32bb .font_copy_uncompressed_4
00:32c0 .font_copy_uncompressed_1
00:32c9 .font_copy_uncompressed_1_b
00:32dd .font_copy_uncompressed_2

00:32e6 font_load
;; 00:32e6 gbdk 2.95 libc/gb/font.ms:font_load
;; 00:32e6 Load a font.
;; 00:32e6 Entry conditions: HL = font to load
;; 00:32e6 Registers used: A, B, DE, HL

;; 00:32ea:r_op FONT_TABLE + _SFONT_HANDLE_FONT

00:32ef .font_load_find_slot
00:3301 .font_load_found
00:3325 .font_load_exit

00:332e font_copy_current
;; 00:332e gbdk 2.95 libc/gb/font.ms:font_copy_current (with modifications)
;; 00:332e Copy the tiles from the current font into VRAM.
;; 00:332e Registers used: A, BC, DE, HL
;; 00:332e See: font_copy_uncompressed

;; 00:332e:r_op FONT_CURRENT + _SFONT_HANDLE_FONT

00:335a .font_copy_current_copy
;; 00:3370 Compressed fonts are not supported, jump straight to font_copy_uncompressed

00:3373 font_set
;; 00:3373 gbdk 2.95 libc/gb/font.ms:font_set
;; 00:3373 Set the current font.
;; 00:3373 Entry conditions: HL = font
;; 00:3373 Registers used: A, HL

;; 00:3378:l_op [FONT_CURRENT + 1]
;; 00:337c:l_op [FONT_CURRENT + 2]

00:3380 _font_load
;; 00:3380 gbdk 2.95 libc/gb/font.ms:_font_load
;; 00:3380 Load a font.
;; 00:3380 Args: font (word)
;; 00:3380 See: font_load

00:338e _font_set
;; 00:338e gbdk 2.95 libc/gb/font.ms:_font_set
;; 00:338e Set the current font.
;; 00:338e Args: font (word)
;; 00:338e See: font_set

00:339d _font_init
;; 00:339d gbdk 2.95 libc/gb/font.ms:_font_init (with modifications)
;; 00:339d Initialize the font system.
;; 00:339d Registers used: A, HL
00:33ac .font_init_1
;; 00:33ba Skip calling .cls

00:33bc call_set_bg_attr_target
;; 00:33bc Set the background attribute target to a specific location.
;; 00:33bc Args: col, row
;; 00:33bc Registers used: A, HL

;; 00:33ca:r_op HIGH(_SCRN0)

00:33d7 call_pass
;; 00:33d7 Return immediately.

00:33d8 tmode
;; 00:33d8 gbdk 2.95 libc/gb/font.ms:.tmode (with modifications)
;; 00:33d8 Enter text mode.
;; 00:33d8 Registers used: A
;; 00:33df Skip removing interrupts since they're unused
00:33e2 .tmode_1

00:33ef tmode_out
;; 00:33ef gbdk 2.95 libc/gb/font.ms:.tmode_out (with modifications)
;; 00:33f6 Skip clearing the screen
;; 00:33f6:r_op _T_MODE

00:33fc _rand_randw
;; 00:33fc gbdk 2.95 libc/gb/rand.s:_rand/_randw
;; 00:33fc Generate a random number.
;; 00:33fc Result: DE
;; 00:33fc Registers used: A, DE, HL

00:3427 _cpu_fast
;; 00:3427 gbdk 2.95 libc/gb/cgb.s:_cpu_fast
;; 00:3427 Enable speed switch (CGB only).
;; 00:3427 Registers used: AF, HL

00:3442 call_00_3442

00:346a send_byte
;; 00:346a gbdk 2.95 libc/gb/serial.s:.send_byte/_send_byte
;; 00:346a Send the byte in IO_OUT to the serial port.
;; 00:346a Registers used: A

;; 00:346a:r_op _IO_SENDING

00:347d receive_byte
;; 00:347d gbdk 2.95 libc/gb/serial.s:.receive_byte/_receive_byte
;; 00:347d Receive byte from the serial port in IO_IN.
;; 00:347d Registers used: A

;; 00:347d:r_op _IO_RECEIVING

00:348e set_mode
;; 00:348e gbdk 2.95 libc/gb/crt0.s:.set_mode
;; 00:348e Sets the current mode. Will jump to the initialization routine.
;; 00:348e Entry conditions: L = mode
;; 00:348e Registers used: A, BC, HL

00:349e display_off
;; 00:349e gbdk 2.95 libc/gb/crt0.s:.display_off
;; 00:349e Turns off the screen.
;; 00:349e Registers used: A
;; 00:349e -
;; 00:349e The labels in this subroutine are not local since they are possibly referenced elsewhere
00:34a2 _display_off_1
00:34a8 _display_off_2

00:34b5 start_refresh_oam
;; 00:34b5 gbdk 2.95 libc/gb/crt0.s:.start_refresh_OAM (with modifications)
;; 00:34b5
;; 00:34b5 Copies OAM data to OAM RAM.
;; 00:34b5
;; 00:34b5 Exit conditions:
;; 00:34b5   The value at address HL will be cleared.
;; 00:34b5
;; 00:34b5 Registers used: A
;; 00:34b5:r_op _OAM
00:34bb .start_refresh_oam_1
00:34c0 end_refresh_oam

00:34c0 serial_io
;; 00:34c0 gbdk 2.95 libc/gb/crt0.s:.serial_io (with modifications)
;; 00:34c0 Serial interrupt handler.

;; 00:34c7:l_op _IO_RECEIVING
;; 00:34d8:l_op _DT_RECEIVING

00:34d2 .serial_io_10
;; 00:34d2:l_op _IO_SENDING
;; 00:34dc:r_op _IO_ERROR

00:34e0 .serial_io_11
;; 00:34e0:r_op _IO_IDLE

00:34e2 .serial_io_12
;; 00:34e2 Skip using external clock and replying with idle byte
00:34e5 .serial_io_99
;; 00:34e9 TODO: document return handler at 00:1482

00:34ec _mode
;; 00:34ec gbdk 2.95 libc/gb/crt0.s:_mode
;; 00:34ec Sets the current mode.
;; 00:34ec Args: mode
;; 00:34f1 Use jr instead of call to jump directly back

00:34f3 _get_mode
;; 00:34f3 gbdk 2.95 libc/gb/crt0.s:_get_mode
;; 00:34f3 Gets the current mode.
;; 00:34f3 Result: E
;; 00:34f3 Registers used: E, HL

00:34f8 _enable_interrupts
;; 00:34f8 gbdk 2.95 libc/gb/crt0.s:_enable_interrupts

00:34fa _disable_interrupts
;; 00:34fa gbdk 2.95 libc/gb/crt0.s:_disable_interrupts

00:34fc _reset
;; 00:34fc gbdk 2.95 libc/gb/crt0.s:.reset/_reset

00:3502 call_clear_interrupt_request
;; 00:3502 Clear an interrupt request by clearing bits in the interrupt flag register.
;; 00:3502
;; 00:3502 Entry conditions:
;; 00:3502   A = bits
;; 00:3502   Only bits enabled in the interrupt enable register (0xffff) will be cleared
;; 00:3502
;; 00:3502 Exit conditions:
;; 00:3502   The interrupt flag register (0xff0f) will have the given bits cleared
;; 00:3502   Interrupts will be enabled
;; 00:3502
;; 00:3502 Registers used: A, E, HL
;; 00:350b Check if IEF_HILO should be cleared
00:3511 .jump_skip_hilo
;; 00:3511 Check if IEF_SERIAL should be cleared
00:3517 .jump_skip_serial
;; 00:3517 Check if IEF_TIMER should be cleared
00:351d .jump_skip_timer
;; 00:351d Check if IEF_LCDC should be cleared
00:3523 .jump_skip_lcdc
;; 00:3523 Check if IEF_VBLANK should be cleared
00:3529 .jump_skip_vblank

00:352d call_00_352d

00:35b4 digits
;; 00:35b4 gbdk 2.95 libc/gb/digits.c:digits
00:35b4 .text:0011

00:35c5 call_00_35c5

00:36e0 call_strlen
;; 00:36e0 Get the length of the string given by the address.
;; 00:36e0
;; 00:36e0 Args: (word) address
;; 00:36e0
;; 00:36e0 Exit conditions:
;; 00:36e0   DE = length
;; 00:36e0   The address arg will be set to the address after the terminating null byte
;; 00:36e0
;; 00:36e0 Registers used: A, DE, HL
00:36ea .jump_count_loop
00:370b .jump_skip_increment_high
00:370e .jump_return

00:3717 _modslong_divslong_mulslong

00:3718 _divschar
;; 00:3718 gbdk 2.95 libc/asm/gbz80/div.s:__divschar
;; 00:3718 Divide chars.
;; 00:3718 Args: dividend, divisor
;; 00:3718 Result: E
;; 00:3718 See: div8_mod8

00:3724 _modschar
;; 00:3724 gbdk 2.95 libc/asm/gbz80/div.s:__modschar
;; 00:3724 Perform modulus on chars.
;; 00:3724 Args: dividend, divisor
;; 00:3724 Result: E
;; 00:3724 See: div8_mod8

00:372f _divsint
;; 00:372f gbdk 2.95 libc/asm/gbz80/div.s:__divsint
;; 00:372f Divide ints.
;; 00:372f Args: dividend (word), divisor (word)
;; 00:372f Result: DE
;; 00:372f See: div16_mod16

00:3740 _modsint
;; 00:3740 gbdk 2.95 libc/asm/gbz80/div.s:__modsint
;; 00:3740 Perform modulus on ints.
;; 00:3740 Args: dividend (word), divisor (word)
;; 00:3740 Result: DE
;; 00:3740 See: div16_mod16

00:374f _divuchar
;; 00:374f gbdk 2.95 libc/asm/gbz80/div.s:__divuchar
;; 00:374f Divide unsigned chars.
;; 00:374f Args: dividend, divisor
;; 00:374f Result: E
;; 00:374f See: divu8_modu8

00:375b _moduchar
;; 00:375b gbdk 2.95 libc/asm/gbz80/div.s:__moduchar
;; 00:375b Perform modulus on unsigned chars.
;; 00:375b Args: dividend, divisor
;; 00:375b Result: E
;; 00:375b See: divu8_modu8

00:3766 _divuint
;; 00:3766 gbdk 2.95 libc/asm/gbz80/div.s:__divuint
;; 00:3766 Divide unsigned ints.
;; 00:3766 Args: dividend (word), divisor (word)
;; 00:3766 Result: DE
;; 00:3766 See: divu16_modu16

00:3777 _moduint
;; 00:3777 gbdk 2.95 libc/asm/gbz80/div.s:__moduint
;; 00:3777 Perform modulus on unsigned ints.
;; 00:3777 Args: dividend (word), divisor (word)
;; 00:3777 Result: DE
;; 00:3777 See: divu16_modu16

00:3786 div8_mod8
;; 00:3786 gbdk 2.95 libc/asm/gbz80/div.s:.div8/.mod8
;; 00:3786
;; 00:3786 8-bit division.
;; 00:3786
;; 00:3786 Entry conditions:
;; 00:3786   C = dividend
;; 00:3786   E = divisor
;; 00:3786
;; 00:3786 Exit conditions:
;; 00:3786   C = quotient
;; 00:3786   E = remainder
;; 00:3786   If divisor is non-zero, carry=0
;; 00:3786   If divisor is 0, carry=1 and both quotient and remainder are 0
;; 00:3786
;; 00:3786 Registers used: AF, BC, DE, HL

00:378e div16_mod16
;; 00:378e gbdk 2.95 libc/asm/gbz80/div.s:.div16/.mod16
;; 00:378e
;; 00:378e 16-bit division.
;; 00:378e
;; 00:378e Entry conditions:
;; 00:378e   BC = dividend
;; 00:378e   DE = divisor
;; 00:378e
;; 00:378e Exit conditions:
;; 00:378e   BC = quotient
;; 00:378e   DE = remainder
;; 00:378e
;; 00:378e See: div8_mod8
00:379c .chkde
00:37a6 .dodiv
00:37ae .dodiv_1
00:37b9 .dorem

00:37c4 divu8_modu8
;; 00:37c4 gbdk 2.95 libc/asm/gbz80/div.s:.divu8/.modu8
;; 00:37c4 8-bit unsigned division.
;; 00:37c4 See: div8_mod8

00:37c7 divu16_modu16
;; 00:37c7 gbdk 2.95 libc/asm/gbz80/div.s:.divu16/.modu16 (with modifications)
;; 00:37c7 16-bit unsigned division.
;; 00:37c7 See: div16_mod16
00:37d2 .divide
;; 00:37d8 Instead of looping, as in gbdk 2.95, call a function 16 times
;; 00:3808 libc/asm/gbz80/div.s:.nodrop (without loop counter)

00:3812 call_divide_loop
;; 00:3812 gbdk 2.95 libc/asm/gbz80/div.s:.divide loop separated into its own function
00:3826 .drop

00:3829 initrand
;; 00:3829 gbdk 2.95 libc/gb/rand.s:_initrand
;; 00:3829 Set the random seed.
;; 00:3829 Args: seed (word)
;; 00:3829 Registers used: A, HL

00:3834 _strcpy
;; 00:3834 gbdk 2.95 libc/asm/gbz80/asm_string.s:_strcpy
;; 00:3834 char *strcpy(char *dest, const char *source)
;; 00:3834 Result: DE = dest
00:383e .strcpy_1

00:3846 _memcpy
;; 00:3846 gbdk 2.95 libc/asm/gbz80/asm_string.s:_memcpy
;; 00:3846 void *memcpy(void *dest, const void *source, int count)
;; 00:3846 Result: DE = dest
00:385a .memcpy_1
00:385d .memcpy_2

00:3866 _strcmp
;; 00:3866 gbdk 2.95 libc/asm/gbz80/asm_string.s:_strcmp
;; 00:3866 int strcmp(const char *s1, const char *s2)
;; 00:3866 Result: DE = 0 if equal, 1 if s1 is greater than s2, -1 if s1 is less than s2
00:3871 .strcmp_2
00:3878 .strcmp_1
00:387c .strcmp_3
00:3881 .strcmp_4
00:3889 .strcmp_5

00:388a call_mem_fill
;; 00:388a Write a repeating byte to memory.
;; 00:388a Entry conditions: HL = address, B = byte, DE = size
;; 00:388a Registers used: A, B, DE, HL

00:3892 _call_mem_fill
;; 00:3892 Write a repeating byte to memory.
;; 00:3892 Args: address (word), byte, size (word)
;; 00:3892 Registers used: A, HL

00:38a5 _mulschar_muluchar
;; 00:38a5 gbdk 2.95 libc/asm/gbz80/mul.s:__mulschar/__muluchar
;; 00:38a5 Multiply chars.
;; 00:38a5 Args: multiplicand, multiplier
;; 00:38a5 Result: DE
;; 00:38a5 See: mul8_mulu8

00:38b1 _mulsint_muluint
;; 00:38b1 gbdk 2.95 libc/asm/gbz80/mul.s:__mulsint/__muluint
;; 00:38b1 Multiply ints.
;; 00:38b1 Args: multiplicand (word), multiplier (word)
;; 00:38b1 Result: DE
;; 00:38b1 See: mul16_mulu16

00:38c2 mul8_mulu8
;; 00:38c2 gbdk 2.95 libc/asm/gbz80/mul.s:.mul8/.mulu8
;; 00:38c2
;; 00:38c2 8-bit multiplication.
;; 00:38c2
;; 00:38c2 Entry conditions:
;; 00:38c2   C = dividend
;; 00:38c2   E = divisor
;; 00:38c2
;; 00:38c2 Exit conditions:
;; 00:38c2   DE = product
;; 00:38c2
;; 00:38c2 Registers used: AF, BC, DE, HL

00:38c5 mul16_mulu16
;; 00:38c5 gbdk 2.95 libc/asm/gbz80/mul.s:.mul16/.mulu16
;; 00:38c5
;; 00:38c5 16-bit multiplication.
;; 00:38c5
;; 00:38c5 Entry conditions:
;; 00:38c5   BC = dividend
;; 00:38c5   DE = divisor
;; 00:38c5
;; 00:38c5 Exit conditions:
;; 00:38c5   DE = product (least significant word)
;; 00:38c5
;; 00:38c5 Registers used: AF, BC, DE, HL
00:38ca .mlp
00:38d1 .mlp1
00:38da .mend

00:38db _set_bkg_palette
;; 00:38db gbdk 2.95 libc/gb/cgb.s:_set_bkg_palette
;; 00:38db
;; 00:38db Set background palettes.
;; 00:38db
;; 00:38db Args:
;; 00:38db   first_palette
;; 00:38db   nb_palettes = Number of palettes
;; 00:38db   rgb_data (word) = Address of the data
;; 00:38db
;; 00:38db Registers used: AF, HL
00:38f1 .set_bkg_palette_1

00:3906 vbl
;; 00:3906 gbdk 2.95 libc/gb/drawing.s:.vbl

00:3911 lcd
;; 00:3911 gbdk 2.95 libc/gb/drawing.s:.lcd

00:391e jpad
;; 00:391e gbdk 2.95 libc/gb/pad.s:.jpad (with modifications)
;; 00:391e
;; 00:391e Get keypad button status.
;; 00:391e
;; 00:391e Exit conditions:
;; 00:391e   E = status (buttons held)
;; 00:391e       0x80: Start
;; 00:391e       0x40: Select
;; 00:391e       0x20: B
;; 00:391e       0x10: A
;; 00:391e       0x08: Down
;; 00:391e       0x04: Up
;; 00:391e       0x02: Left
;; 00:391e       0x01: Right
;; 00:391e
;; 00:391e Registers used: A, E
;; 00:394a Use E for return status instead of A like in gbdk
;; 00:394a The _joypad subroutine handles this in gbdk
;; 00:394a This is a little faster

00:394c delay
;; 00:394c gbdk 2.95 libc/gb/delay.s:.delay
;; 00:394c
;; 00:394c Wait for a given period of time.
;; 00:394c
;; 00:394c Entry conditions:
;; 00:394c   DE = milliseconds (1 to 65536, 0 = 65536)
;; 00:394c
;; 00:394c Registers used: AF, DE
00:3952 .ldlp
00:3954 .delay_1
00:3956 .delay_2
00:3958 .delay_3
00:395a .delay_4
00:395c .delay_5
00:3964 .delay_6
00:3966 .delay_7
00:3968 .delay_8
00:3969 dly
00:396f .dlp
00:3971 .dly_1
00:3973 .dly_2
00:3975 .dly_3
00:3977 .dly_4
00:3979 .dly_5
00:3980 .dly_6
00:3982 .dly_7
00:3984 .dly_8

00:3986 _delay
;; 00:3986 gbdk 2.95 libc/gb/delay.s:_delay
;; 00:3986 Wait for a given period of time.
;; 00:3986 Args: milliseconds (word)
;; 00:3986 See: delay

00:398f init_vram
;; 00:398f gbdk 2.95 libc/gb/init_tt.s:.init_vram
;; 00:398f
;; 00:398f Fill part of the VRAM with a value.
;; 00:398f
;; 00:398f Entry conditions:
;; 00:398f   B = value
;; 00:398f   DE = size
;; 00:398f   HL = address
;; 00:398f
;; 00:398f Registers used: A, B, DE, HL

00:399d init_wtt
;; 00:399d gbdk 2.95 libc/gb/init_tt.s:.init_wtt
;; 00:399d Fill window tile table with a value.
;; 00:399d Entry conditions: B = value
;; 00:399d Registers used: A, B, DE, HL
;; 00:39a3:r_op _SCRN0
00:39a8 .init_wtt_1
;; 00:39a8:r_op _SCRN1

00:39ad init_btt
;; 00:39ad gbdk 2.95 libc/gb/init_tt.s:.init_btt
;; 00:39ad Fill background tile table with a value.
;; 00:39ad See: init_wtt
;; 00:39b3:r_op _SCRN0
00:39b8 .init_btt_1
;; 00:39b8:r_op _SCRN1

00:39bb init_tt
;; 00:39bb gbdk 2.95 libc/gb/init_tt.s:.init_tt
;; 00:39bb Fill a tile table with a value.
;; 00:39bb See: init_wtt, init_btt

00:39c1 copy_vram
;; 00:39c1 gbdk 2.95 libc/gb/cpy_data.s:.copy_vram
;; 00:39c1
;; 00:39c1 Copy part of VRAM.
;; 00:39c1
;; 00:39c1 Entry conditions:
;; 00:39c1   BC = copy from address
;; 00:39c1   HL = copy to address
;; 00:39c1   DE = count

00:39d0 _set_bkg_tiles
;; 00:39d0 gbdk 2.95 libc/gb/set_bk_t.s:_set_bkg_tiles
;; 00:39d0 Set background tiles.
;; 00:39d0 Args: x, y, w, h, tiles_address (word)
;; 00:39d0 Registers used: A, DE, HL

00:39e4 set_xy_wtt
;; 00:39e4 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_wtt
;; 00:39e4 Store window tile table.
;; 00:39e4
;; 00:39e4 Entry conditions:
;; 00:39e4   BC = store at address
;; 00:39e4   D = X
;; 00:39e4   E = Y
;; 00:39e4   H = width
;; 00:39e4   L = height
;; 00:39e4
;; 00:39e4 Registers used: A, BC, DE, HL
;; 00:39eb:r_op _SCRN0
00:39f0 .set_xy_wtt_1
;; 00:39f0:r_op _SCRN1

00:39f5 set_xy_btt
;; 00:39f5 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_btt
;; 00:39f5 Store background tile table.
;; 00:39f5 See: set_xy_wtt
;; 00:39fc:r_op _SCRN0
00:3a01 .set_xy_btt_1
;; 00:3a01 Skip jump to the next instruction
;; 00:3a01:r_op _SCRN1

00:3a04 set_xy_tt
;; 00:3a04 gbdk 2.95 libc/gb/set_xy_t.s:.set_xy_tt (with modifications)
;; 00:3a04 Store tile table.
;; 00:3a04 See: set_xy_wtt, set_xy_btt
00:3a0c .set_xy_tt_1
00:3a10 .set_xy_tt_2
00:3a18 .set_xy_tt_3
;; 00:3a20 TODO: document changes
00:3a35 .set_xy_tt_4

00:3a36 call_set_default_ram_values
;; 00:3a36 Set RAM addresses used to their default values.
;; 00:3a36 Registers used: A, DE, HL

;; 00:3bd1:r_op _SONG_SCREEN

;; 00:3be5:r_op _NO_CURSOR_MODE

00:3de7 data_bank_00_padding
;; 00:3de7 00:3de7
;; 00:3de7:replace:0219 ds $4000 - @, $ff

01:4000 call_sram_random_test
;; 01:4000 Test SRAM by generating random numbers.
;; 01:4000 Exit conditions: E = success
;; 01:4000 Registers used: A, DE, HL
;; 01:400c:r_op rRAMG
;; 01:400f:r_op CART_RAM_ENABLE
01:4015 .call_sram_random_test_1
;; 01:4026:r_op rRAMB
01:402a .call_sram_random_test_2
01:403c .call_sram_random_test_3
01:403d .call_sram_random_test_4
01:4066 .call_sram_random_test_5
01:406c .call_sram_random_test_6
01:4079 .call_sram_random_test_7
;; 01:408a:r_op rRAMB
01:408e .call_sram_random_test_8
01:40a0 .call_sram_random_test_9
01:40a1 .call_sram_random_test_10
01:40bf .call_sram_random_test_11
01:40c0 .call_sram_random_test_12
01:40cc .call_sram_random_test_13
01:40d9 .call_sram_random_test_14
01:40df .call_sram_random_test_15
;; 01:40df:r_op rRAMG
;; 01:40e2:r_op CART_RAM_DISABLE
01:40e6 .call_sram_random_test_16

01:40ea data_default_wave_frame_1
01:40ea .data:0010
01:40fa data_01_40fa
01:40fa .data:00d8
01:41d2 data_01_41d2
01:41d2 .data:00d8
01:42aa data_01_42aa
01:42aa .data:00d8
01:4382 data_01_4382
01:4382 .data:00d8

01:445a call_sram_test
;; 01:445a Test SRAM integrity.
;; 01:445a Exit conditions: E = success
;; 01:445a Registers used: A, E, HL
;; 01:445b:r_op rRAMG
;; 01:445e:r_op CART_RAM_ENABLE
01:4462 .call_sram_test_1
;; 01:4468:r_op rRAMB
01:447a .call_sram_test_2
01:447e .call_sram_test_3
;; 01:447e:r_op rRAMG
;; 01:4481:r_op CART_RAM_DISABLE
01:4485 .call_sram_test_4

01:4487 call_cart_test
;; 01:4487 Run the cart test.
;; 01:4487 Prints messages to the screen, and performs ROM/SRAM tests.
;; 01:4487 Registers used: A, HL, DE
;; 01:44aa:r_op LOW(call_rom_test)
;; 01:44ac:r_op HIGH(call_rom_test)
;; 01:44af:r_op BANK(call_rom_test)
01:44ca .jump_rom_test_fail
01:44f5 .jump_rom_test_fail_halt
01:44f8 .jump_sram_test
;; 01:4509:l_op rRAMB
01:4527 .jump_sram_test_fail
01:4552 .jump_sram_test_fail_halt
01:4555 .jump_cart_test_end

01:4557 data_cart_test_title_string
01:4557 .text:000f
01:4566 data_cart_test_rom_string
01:4566 .text:0007
01:456d data_cart_test_rom_ok_string
01:456d .text:0004
01:4571 data_cart_test_rom_fail_string
01:4571 .text:0006
01:4577 data_cart_test_rom_error_1_string
01:4577 .text:0012
01:4589 data_cart_test_rom_error_2_string
01:4589 .text:0010
01:4599 data_cart_test_sram_string
01:4599 .text:0008
01:45a1 data_cart_test_sram_ok_string
01:45a1 .text:0004
01:45a5 data_cart_test_sram_fail_string
01:45a5 .text:0006
01:45ab data_cart_test_sram_error_1_string
01:45ab .text:0012
01:45bd data_cart_test_sram_error_2_string
01:45bd .text:0014

01:45d1 call_01_45d1
;; 01:45d5:r_op rRAMG
;; 01:45d8:r_op CART_RAM_ENABLE

;; 01:45e2:r_op LOW(call_07_63ff)
;; 01:45e4:r_op HIGH(call_07_63ff)
;; 01:45e7:r_op BANK(call_07_63ff)

;; 01:45da:r_op rRAMB
;; 01:45dd:r_op _SRAM_INIT_FLAG_1_BANK
;; 01:45f0:r_op _SRAM_INIT_FLAG_1
;; 01:45f6:r_op _SRAM_INIT_FLAG_1 + 1

;; 01:4641 Assume the bank for _SRAM_INIT_FLAG_1 is the same as _SRAM_SONG_CHAINS
;; 01:4641:r_op _SRAM_SONG_CHAINS

;; 01:46bb:r_op rRAMB
;; 01:46be Assume the banks for _SRAM_TOTAL_TIME_* are the same
;; 01:46be:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 01:46c0:r_op _SRAM_TOTAL_TIME_DAYS
;; 01:46c5:r_op _SRAM_TOTAL_TIME_HOURS
;; 01:46ca:r_op _SRAM_TOTAL_TIME_MINUTES

;; 01:46dc Assume the bank for _SRAM_LAST_USED_INSTRUMENT is the same as _SRAM_TOTAL_TIME_DAYS_BANK
;; 01:46dc:r_op _SRAM_LAST_USED_INSTRUMENT

;; 01:46e5:r_op _SRAM_TOTAL_TIME_DAYS
;; 01:46ea:r_op _SRAM_TOTAL_TIME_HOURS
;; 01:46ef:r_op _SRAM_TOTAL_TIME_MINUTES
;; 01:46f6:r_op _SRAM_PRELISTEN
;; 01:46fc:r_op rRAMB
;; 01:46ff Wrong bank used for _SRAM_TOTAL_TIME_DAYS, _SRAM_TOTAL_TIME_HOURS, _SRAM_TOTAL_TIME_MINUTES, _SRAM_PRELISTEN
;; 01:46ff:r_op _SRAM_PHRASE_INSTRUMENTS_BANK

;; 01:470c:r_op _SRAM_PHRASE_INSTRUMENTS

;; 01:471e:r_op rRAMG
;; 01:4721:r_op CART_RAM_ENABLE

;; 01:4723:r_op rRAMB
;; 01:4726 Assume the banks are the same for _SRAM_INIT_FLAG_2, _SRAM_TEMPO, _SRAM_KEY_DELAY, _SRAM_KEY_REPEAT
;; 01:4726:r_op _SRAM_INIT_FLAG_2_BANK
;; 01:4728:r_op _SRAM_INIT_FLAG_2
;; 01:472e:r_op _SRAM_INIT_FLAG_2 + 1
;; 01:4734:r_op _SRAM_TEMPO
;; 01:473a:r_op _SRAM_KEY_DELAY
;; 01:4740:r_op _SRAM_KEY_REPEAT

;; 01:4753 Assume the bank for _SRAM_CHAIN_PHRASES is the same as _SRAM_INIT_FLAG_2
;; 01:4753:r_op _SRAM_CHAIN_PHRASES

;; 01:47b8:r_op rRAMB
;; 01:47bd:r_op _SRAM_INIT_FLAG_3
;; 01:47c3:r_op _SRAM_INIT_FLAG_3 + 1
;; 01:47bb:r_op _SRAM_INIT_FLAG_3_BANK

;; 01:4801 Assume the bank for _SRAM_VERSION_FLAG is the same as _SRAM_INIT_FLAG_3
;; 01:4801:r_op _SRAM_VERSION_FLAG

;; 01:4808:r_op rRAMG
;; 01:480b:r_op CART_RAM_DISABLE

01:4811 call_01_4811
;; 01:4812:r_op _SRAM_FILE_INIT_FLAG
;; 01:4816:r_op _SRAM_FILE_INIT_FLAG_BANK
;; 01:482b:r_op _SRAM_FILE_INIT_FLAG + 1
;; 01:482f:r_op _SRAM_FILE_INIT_FLAG_BANK

01:4848 call_01_4848

;; 01:4849:r_op _SRAM_INIT_FLAG_1
;; 01:484d:r_op _SRAM_INIT_FLAG_1_BANK
;; 01:485d:r_op _SRAM_INIT_FLAG_1 + 1
;; 01:4861:r_op _SRAM_INIT_FLAG_1_BANK

;; 01:4876:r_op _SRAM_INIT_FLAG_3
;; 01:487a:r_op _SRAM_INIT_FLAG_3_BANK
;; 01:488a:r_op _SRAM_INIT_FLAG_3 + 1
;; 01:488e:r_op _SRAM_INIT_FLAG_3_BANK

;; 01:48a3:r_op _SRAM_INIT_FLAG_2
;; 01:48a7:r_op _SRAM_INIT_FLAG_2_BANK
;; 01:48b7:r_op _SRAM_INIT_FLAG_2 + 1
;; 01:48bb:r_op _SRAM_TABLE_COMMAND_VALUES_2_BANK

01:48d4 call_01_48d4

;; 01:48d8:r_op _SRAM_INIT_FLAG_1
;; 01:48dc:r_op _SRAM_INIT_FLAG_1_BANK
;; 01:48e9:r_op _SRAM_INIT_FLAG_1 + 1
;; 01:48ed:r_op _SRAM_INIT_FLAG_1_BANK

;; 01:48fa:r_op _SRAM_INIT_FLAG_2
;; 01:48fe:r_op _SRAM_INIT_FLAG_2_BANK
;; 01:490b:r_op _SRAM_INIT_FLAG_2 + 1
;; 01:490f:r_op _SRAM_INIT_FLAG_2_BANK

;; 01:491c:r_op _SRAM_INIT_FLAG_3
;; 01:4920:r_op _SRAM_INIT_FLAG_3_BANK
;; 01:492d:r_op _SRAM_INIT_FLAG_3 + 1
;; 01:4931:r_op _SRAM_INIT_FLAG_3_BANK

01:493b call_01_493b
;; 01:4973:r_op _SRAM_INSTRUMENT_NAMES
;; 01:4990:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:49b4:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:49dd:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4a06:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4a29:r_op _SRAM_INSTRUMENT_NAMES_BANK

01:4a44 data_speech_screen_title_string
01:4a44 .text:0005

01:4a49 call_01_4a49
;; 01:4a68:r_op _SRAM_INSTRUMENT_NAMES
;; 01:4a8a:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4aab:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4acc:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4aed:r_op _SRAM_INSTRUMENT_NAMES_BANK
;; 01:4b08:r_op _SRAM_INSTRUMENT_NAMES_BANK

01:4b15 call_01_4b15

01:4b5e call_01_4b5e

01:4c61 call_01_4c61

01:4cf1 call_01_4cf1

01:4cfb call_01_4cfb
;; 01:4d15:r_op _SRAM_PHRASE_ALLOC
;; 01:4d5a:r_op _SRAM_PHRASE_ALLOC_BANK

01:4d67 call_01_4d67
;; 01:4d81:r_op _SRAM_CHAIN_ALLOC
;; 01:4da3:r_op _SRAM_CHAIN_ALLOC_BANK

01:4dd3 call_01_4dd3
;; 01:4ded:r_op _SRAM_PHRASE_ALLOC
;; 01:4e0f:r_op _SRAM_PHRASE_ALLOC_BANK

01:4e43 call_01_4e43
;; 01:4e5d:r_op _SRAM_CHAIN_ALLOC
;; 01:4e7f:r_op _SRAM_CHAIN_ALLOC_BANK
;; 01:4ea6:r_op _SRAM_CHAIN_ALLOC_BANK

01:4eb3 call_01_4eb3
;; 01:4ee3:r_op _SRAM_PHRASE_ALLOC
;; 01:4ef2:r_op _SRAM_PHRASE_ALLOC_BANK
;; 01:4f1c:r_op _SRAM_PHRASE_ALLOC_BANK

;; 01:4f45:r_op LOW(call_01_75c6)
;; 01:4f47:r_op HIGH(call_01_75c6)
;; 01:4f4a:r_op BANK(call_01_75c6)

01:4f59 call_01_4f59

01:4f99 call_01_4f99
;; 01:4fb3:r_op _SRAM_PHRASE_ALLOC
;; 01:4fcc:r_op _SRAM_PHRASE_ALLOC_BANK

01:4fec call_01_4fec

;; 01:503d:l_op _PROJECT_SCREEN

01:5099 data_01_5099
01:5099 .text:0004
01:509d data_01_509d
01:509d .text:0003

01:50a0 call_01_50a0
;; 01:50a1:r_op _SRAM_WORK_TIME_MINUTES
;; 01:50a5:r_op _SRAM_WORK_TIME_MINUTES_BANK
;; 01:50ba:r_op _SRAM_WORK_TIME_MINUTES
;; 01:50be:r_op _SRAM_WORK_TIME_MINUTES_BANK
;; 01:50c7:r_op _SRAM_WORK_TIME_HOURS
;; 01:50cb:r_op _SRAM_WORK_TIME_HOURS_BANK
;; 01:50d9:r_op _SRAM_WORK_TIME_HOURS
;; 01:50dd:r_op _SRAM_WORK_TIME_HOURS_BANK
;; 01:50ec:r_op _SRAM_WORK_TIME_MINUTES
;; 01:50f0:r_op _SRAM_WORK_TIME_MINUTES_BANK
;; 01:50f9:r_op _SRAM_TOTAL_TIME_MINUTES
;; 01:50fd:r_op _SRAM_TOTAL_TIME_MINUTES_BANK
;; 01:5112:r_op _SRAM_TOTAL_TIME_MINUTES
;; 01:5116:r_op _SRAM_TOTAL_TIME_MINUTES_BANK
;; 01:511f:r_op _SRAM_TOTAL_TIME_HOURS
;; 01:5123:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 01:5138:r_op _SRAM_TOTAL_TIME_HOURS
;; 01:513c:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 01:5145:r_op _SRAM_TOTAL_TIME_DAYS
;; 01:5149:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 01:5157:r_op _SRAM_TOTAL_TIME_DAYS
;; 01:515b:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 01:516a:r_op _SRAM_TOTAL_TIME_HOURS
;; 01:516e:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 01:517d:r_op _SRAM_TOTAL_TIME_MINUTES
;; 01:5181:r_op _SRAM_TOTAL_TIME_MINUTES_BANK

01:518c call_01_518c

01:51ee data_01_51ee
01:51ee .data:0006

01:51f4 data_pitch_shift_type_strings
01:51f4 data_step_pitch_shift_type_string
01:51f4 .text:0005
01:51f9 data_tick_pitch_shift_type_string
01:51f9 .text:0005
01:51fe data_drum_pitch_shift_type_string
01:51fe .text:0005
01:5203 data_fast_pitch_shift_type_string
01:5203 .text:0005

01:5208 call_01_5208

01:522d call_01_522d

01:524b data_01_524b
01:524b .text:0004
01:524f data_01_524f
01:524f .text:0004

01:5253 call_01_5253

;; 01:5265:r_op _NORMAL_CURSOR_MODE

;; 01:52ce:r_op LOW(call_1c_717c)
;; 01:52d0:r_op HIGH(call_1c_717c)
;; 01:52d3:r_op BANK(call_1c_717c)

01:52de data_copied_instrument_string
01:52de .text:000d

01:52eb call_copy_16_low_external_ram
;; 01:52eb Copy 16 bytes from one location in external RAM to another.
;; 01:52eb Bank must be 0xf or less.
;; 01:52eb
;; 01:52eb Args: bank, read_start_address (word), write_start_address (word)
;; 01:52eb
;; 01:52eb Registers used: A, DE, HL
01:52ee .jump_loop
01:531f .jump_increment_write_address
01:5326 .jump_increment_count
01:532a .jump_return

01:532c data_01_532c
01:532c .data:0005

01:5331 call_01_5331
;; 01:5363:r_op _SRAM_TABLE_COMMANDS_1
;; 01:5371:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 01:5380:r_op _SRAM_TABLE_COMMANDS_2
;; 01:538f:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 01:539e:r_op _SRAM_TABLE_TRANSPOSE
;; 01:53ad:r_op _SRAM_TABLE_VOLS
;; 01:53b7:r_op _SRAM_TABLE_COMMANDS_1
;; 01:53c1:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 01:53cb:r_op _SRAM_TABLE_COMMANDS_2
;; 01:53d5:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 01:53df:r_op _SRAM_TABLE_TRANSPOSE
;; 01:53fd TODO: determine which bank number below is used for which SRAM value above

01:546e call_01_546e

;; 01:54ad:r_op LOW(call_1f_4b8c)
;; 01:54af:r_op HIGH(call_1f_4b8c)
;; 01:54b4:r_op BANK(call_1f_4b8c)

01:54ff data_out_of_tables_error_string
01:54ff .text:000f

01:550e data_cloned_instrument_table_string
01:550e .text:000d

01:551b call_01_551b

;; 01:552e:l_op _NORMAL_CURSOR_MODE

;; 01:55b9:r_op LOW(call_03_4e06)
;; 01:55bb:r_op HIGH(call_03_4e06)
;; 01:55be:r_op BANK(call_03_4e06)

01:55d4 data_pasted_instrument_string
01:55d4 .text:000d

01:55e1 call_get_current_screen_bg_tiles
;; 01:55e1 Get the address for the default background tiles for the current screen.
;; 01:55e1 If the current screen is invalid, returns 0x0000.
;; 01:55e1
;; 01:55e1 Result: DE
;; 01:55e1
;; 01:55e1 Registers used: A, DE, HL

;; 01:55e6:l_op _PHRASE_SCREEN
;; 01:55eb:l_op _GROOVE_SCREEN
;; 01:55f0:l_op _CHAIN_SCREEN
;; 01:55f5:l_op _SONG_SCREEN
;; 01:55fa:l_op _TABLE_SCREEN
;; 01:55ff:l_op _INSTRUMENT_SCREEN
;; 01:5604:l_op _WAVE_EDITOR_SCREEN
;; 01:5609:l_op _PROJECT_SCREEN
;; 01:560e:l_op _SYNTH_SCREEN
;; 01:5613:l_op _TALK_SCREEN
;; 01:5618:l_op _WORD_SCREEN
;; 01:561d:l_op _FILE_SCREEN

01:5625 .jump_load_phrase_screen_bg_tiles
01:562b .jump_load_groove_screen_bg_tiles
01:5631 .jump_load_chain_screen_bg_tiles
01:5637 .jump_load_song_screen_bg_tiles
01:563d .jump_load_table_screen_bg_tiles

01:5643 .jump_read_current_instrument
;; 01:5647:l_op _SPEECH_INSTRUMENT
;; 01:564c:r_op _INSTRUMENT_TYPE_INSTRUMENT_PARAM
;; 01:5657:r_op _NOISE_INSTRUMENT_TYPE
;; 01:5657 Noise instrument is the last instrument type.
;; 01:5657 If the instrument type is greater than this, draw nothing.

;; 01:565d Select jump location based on instrument type

01:5666 .jump_table_set_instrument_screen_bg_tiles

01:5672 .jump_load_pulse_instrument_screen_bg_tiles
01:5678 .jump_load_wave_instrument_screen_bg_tiles
01:567e .jump_load_kit_instrument_screen_bg_tiles
01:5684 .jump_load_noise_instrument_screen_bg_tiles
01:568a .jump_load_talk_screen_bg_tiles_1
01:5690 .jump_load_no_bg_tiles_1
01:5696 .jump_load_wave_screen_bg_tiles
01:569c .jump_load_project_screen_bg_tiles
01:56a2 .jump_load_synth_screen_bg_tiles
01:56a8 .jump_load_talk_screen_bg_tiles_2
01:56ae .jump_load_word_screen_bg_tiles
01:56b4 .jump_load_file_screen_bg_tiles

01:56ba .jump_load_no_bg_tiles_2
01:56bd .jump_return

01:56bf data_palette_content
01:56bf data_palette_1_content
01:56bf .data:0028
01:56e7 data_palette_2_content
01:56e7 .data:0028
01:570f data_palette_3_content
01:570f .data:0028
01:5737 data_palette_4_content
01:5737 .data:0028
01:575f data_palette_5_content
01:575f .data:0028
01:5787 data_palette_6_content
01:5787 .data:0028
01:57af data_palette_7_content
01:57af .data:0028

01:57d7 data_screen_bg_tiles
01:57d7 data_chain_screen_bg_tiles
01:57d7 .data:0168
01:593f data_table_screen_bg_tiles
01:593f .data:0168
01:5aa7 data_phrase_screen_bg_tiles
01:5aa7 .data:0168
01:5c0f data_groove_screen_bg_tiles
01:5c0f .data:0168
01:5d77 data_project_screen_bg_tiles
01:5d77 .data:0168
01:5edf data_song_screen_bg_tiles
01:5edf .data:0168
01:6047 data_pulse_instrument_screen_bg_tiles
01:6047 .data:0168
01:61af data_wave_instrument_screen_bg_tiles
01:61af .data:0168
01:6317 data_kit_instrument_screen_bg_tiles
01:6317 .data:0168
01:647f data_noise_instrument_screen_bg_tiles
01:647f .data:0168
01:65e7 data_talk_screen_bg_tiles
01:65e7 .data:0168
01:674f data_wave_screen_bg_tiles
01:674f .data:0168
01:68b7 data_synth_screen_bg_tiles
01:68b7 .data:0168
01:6a1f data_word_screen_bg_tiles
01:6a1f .data:0168
01:6b87 data_file_screen_bg_tiles
01:6b87 .data:0168

01:6cef call_copy_current_screen_bg_tile_page
;; 01:6cef Copy the tile page for the current screen.
;; 01:6cef If the current screen is invalid, clears the current tiles.
;; 01:6cef Resets the help banner.
;; 01:6cef
;; 01:6cef Registers used: A, DE, HL

;; 01:6cfc Clear tiles if current screen is invalid

;; 01:6d18 Check GameBoy type
;; 01:6d21 Handle GBC

01:6d31 .jump_handle_dmg
01:6d37 .jump_return

01:6d0a .jump_reset_help_banner

01:6d3b call_01_6d3b

01:6d5c call_01_6d5c

;; 01:6d7b:l_op _FILE_SCREEN

;; 01:6d90:l_op _PROJECT_SCREEN

;; 01:6dc6:l_op _PHRASE_SCREEN
;; 01:6dcb:l_op _GROOVE_SCREEN
;; 01:6dd0:l_op _CHAIN_SCREEN
;; 01:6dd5:l_op _SONG_SCREEN
;; 01:6dda:l_op _TABLE_SCREEN
;; 01:6ddf:l_op _INSTRUMENT_SCREEN
;; 01:6de4:l_op _WAVE_EDITOR_SCREEN
;; 01:6de9:l_op _PROJECT_SCREEN
;; 01:6dee:l_op _SYNTH_SCREEN

;; 01:6e77:r_op LOW(call_1c_4057)
;; 01:6e79:r_op HIGH(call_1c_4057)
;; 01:6e7e:r_op BANK(call_1c_4057)

;; 01:6f74:l_op _PROJECT_SCREEN

01:6f87 data_command_help_strings
01:6f87 data_command_help_title_string
01:6f87 .text:0030
01:6fb7 data_command_help_too_busy_error_string
01:6fb7 .text:000a
01:6fc1 data_a_command_help_string
01:6fc1 .text:0023
01:6fe4 data_b_command_help_string
01:6fe4 .text:003b
01:701f data_b_table_command_help_string
01:701f .text:0048
01:7067 data_c_command_help_string
01:7067 .text:0027
01:708e data_d_command_help_string
01:708e .text:0016
01:70a4 data_e_command_help_string
01:70a4 .text:0088
01:712c data_f_pulse2_command_help_string
01:712c .text:0020
01:714c data_f_wave_command_help_string
01:714c .text:0034
01:7180 data_g_command_help_string
01:7180 .text:0016
01:7196 data_h_command_help_string
01:7196 .text:0062
01:71f8 data_h_table_command_help_string
01:71f8 .text:004b
01:7243 data_k_command_help_string
01:7243 .text:001b
01:725e data_l_command_help_string
01:725e .text:00b5
01:7313 data_o_command_help_string
01:7313 .text:001b
01:732e data_p_command_help_string
01:732e .text:002d
01:735b data_r_command_help_string
01:735b .text:006a
01:73c5 data_t_command_help_string
01:73c5 .text:0032
01:73f7 data_v_command_help_string
01:73f7 .text:0023
01:741a data_w_command_help_string
01:741a .text:0008
01:7422 data_w_kit_command_help_string
01:7422 .text:0023
01:7445 data_z_command_help_string
01:7445 .text:0048

01:748d data_01_748d
01:748d .data:0014
01:74a1 data_01_74a1
01:74a1 .data:0014

01:74b5 data_screen_name_strings
01:74b5 data_live_screen_name_string
01:74b5 .text:0005
01:74ba data_song_screen_name_string
01:74ba .text:0005
01:74bf data_chain_screen_name_string
01:74bf .text:0007
01:74c6 data_phrase_screen_name_string
01:74c6 .text:0008
01:74ce data_table_screen_name_string
01:74ce .text:0007
01:74d5 data_project_screen_name_string
01:74d5 .text:0009
01:74de data_file_screen_name_string
01:74de .text:0006
01:74e4 data_instrument_screen_title_string
01:74e4 .text:0007
01:74eb data_wave_screen_title_string
01:74eb .text:0006
01:74f1 data_synth_screen_title_string
01:74f1 .text:0007
01:74f8 data_groove_screen_title_string
01:74f8 .text:0008

01:7500 call_show_banner
;; 01:7500 Show the currently selected banner text.
;; 01:7500 Registers used: A, DE, HL

01:75c6 call_01_75c6

01:75d0 data_out_of_memory_error_string
01:75d0 .text:0031

01:7601 call_01_7601

01:760b data_add_chain_error_string
01:760b .text:0014

01:761f call_01_761f

01:7629 data_add_phrase_error_string
01:7629 .text:0015

01:763e call_01_763e

01:7648 data_max_marks_error_string
01:7648 .text:000d

01:7655 call_01_7655

;; 01:76a3:l_op _PHRASE_SCREEN

;; 01:76c1:l_op _PHRASE_SCREEN

01:7777 data_01_7777
;; 01:7777 Assumed to be jump table
01:7777 .data:0028

01:779f data_s_command_help_strings
01:779f data_s_kit_command_help_string
01:779f .text:0049
01:77e8 data_s_noise_command_help_string
01:77e8 .text:002e
01:7816 data_s_pulse_command_help_string
01:7816 .text:0012

01:7828 call_01_7828

01:7869 call_01_7869

01:7881 call_01_7881

01:794e data_01_794e
01:794e .text:0006
;; 01:7958:r_op CART_RAM_DISABLE

01:7954 jump_01_7954
;; 01:7955:r_op rRAMG

;; 01:7b7c:r_op _INSTRUMENT_SCREEN

01:7b88 data_crash_help_strings
01:7b88 data_crash_help_title_string
01:7b88 .text:000c
01:7b94 data_crash_help_1_string
01:7b94 .text:0011
01:7ba5 data_crash_help_2_string
01:7ba5 .text:0010
01:7bb5 data_crash_help_3_string
01:7bb5 .text:0012
01:7bc7 data_crash_help_rom_string
01:7bc7 .text:0005
01:7bcc data_crash_help_stk_string
01:7bcc .text:0005
01:7bd1 data_crash_help_ply_string
01:7bd1 .text:0005
01:7bd6 data_crash_help_cvw_string
01:7bd6 .text:0005
01:7bdb data_crash_help_cgb_string
01:7bdb .text:0004
01:7bdf data_crash_help_gba_string
01:7bdf .text:0004
01:7be3 data_crash_help_syn_string
01:7be3 .text:0005
01:7be8 data_crash_help_ast_string
01:7be8 .text:0004

01:7bec call_01_7bec
;; 01:7c39:r_op rRAMG
;; 01:7c3c:r_op CART_RAM_ENABLE
;; 01:7c41:r_op rRAMG
;; 01:7c44:r_op CART_RAM_DISABLE

01:7c94 call_01_7c94
;; 01:7caa:r_op rRAMG
;; 01:7cad:r_op CART_RAM_ENABLE
;; 01:7caf:r_op rRAMB
;; 01:7cb2:r_op _SRAM_FONT_BANK
;; 01:7cb4:r_op _SRAM_FONT

;; 01:7ccb:r_op rRAMG
;; 01:7cce:r_op CART_RAM_ENABLE
;; 01:7cd0:r_op rRAMB
;; 01:7cd3:r_op _SRAM_CLONE_TYPE_BANK
;; 01:7cd5:r_op _SRAM_CLONE_TYPE
;; 01:7cdd:r_op _SRAM_PALETTE_NUM
;; 01:7ce0 Assume the bank for _SRAM_CLONE_TYPE and _SRAM_PALETTE_NUM are the same

;; 01:7cfe:r_op LOW(call_1e_7aa0)
;; 01:7cf9:r_op rRAMG
;; 01:7cfc:r_op CART_RAM_DISABLE
;; 01:7d00:r_op HIGH(call_1e_7aa0)
;; 01:7d03:r_op BANK(call_1e_7aa0)

;; 01:7d1c:r_op rRAMG
;; 01:7d1f:r_op CART_RAM_ENABLE
;; 01:7d21:r_op rRAMB
;; 01:7d24:r_op _SRAM_TEMPO_BANK
;; 01:7d26:r_op _SRAM_TEMPO
;; 01:7d2e:r_op _SRAM_OVERCLOCK
;; 01:7d31 Assume the bank for _SRAM_OVERCLOCK and _SRAM_TEMPO are the same
;; 01:7d36:r_op _SRAM_TRANSPOSE
;; 01:7d39 Assume the bank for _SRAM_TRANSPOSE and _SRAM_TEMPO are the same
;; 01:7d42:r_op _SRAM_LAST_USED_INSTRUMENT
;; 01:7d4a Assume the bank for _SRAM_LAST_USED_INSTRUMENT and _SRAM_TEMPO are the same

;; 01:7d89:r_op _SRAM_KEY_DELAY
;; 01:7d8c Assume the bank for _SRAM_KEY_DELAY and _SRAM_TEMPO are the same
;; 01:7d93:r_op _SRAM_KEY_REPEAT
;; 01:7d96 Assume the bank for _SRAM_KEY_REPEAT and _SRAM_TEMPO are the same

;; 01:7d9d:r_op rRAMG
;; 01:7da0:r_op CART_RAM_DISABLE

;; 01:7da2:r_op LOW(call_07_5d9a)
;; 01:7da4:r_op HIGH(call_07_5d9a)
;; 01:7da7:r_op BANK(call_07_5d9a)

;; 01:7dc0:r_op LOW(call_1c_4a46)
;; 01:7dc2:r_op HIGH(call_1c_4a46)
;; 01:7dc5:r_op BANK(call_1c_4a46)

;; 01:7dce:r_op LOW(call_1c_6f75)
;; 01:7dd0:r_op HIGH(call_1c_6f75)
;; 01:7dd3:r_op BANK(call_1c_6f75)

;; 01:7de5:r_op LOW(call_07_6505)
;; 01:7de7:r_op HIGH(call_07_6505)
;; 01:7dea:r_op BANK(call_07_6505)

01:7df7 call_clear_cart_ram
;; 01:7df7 This function clears cart RAM for the currently selected bank.
;; 01:7df7
;; 01:7df7 Entry conditions:
;; 01:7df7   Set the RAM bank (0x4000) to select which RAM bank is cleared.
;; 01:7df7
;; 01:7df7 Exit conditions:
;; 01:7df7   The RAM bank (0xa000 through 0xbfff) will be set to 0.
;; 01:7df7
;; 01:7df7 Registers used: A, HL
01:7dfa .jump_clear_ram_loop

01:7e09 call_copy_gbc_tile_page
;; 01:7e09 Copy an entire page of tiles from an address to VRAM.
;; 01:7e09 There are 18 rows and 20 columns in a page of tiles.
;; 01:7e09 Converts DMG tiles to GBC tiles.
;; 01:7e09 GBC only.
;; 01:7e09
;; 01:7e09 Args: address
;; 01:7e09
;; 01:7e09 Registers used: A, DE, HL

;; 01:7e12:r_op _TILE_ROWS

01:7e14 .jump_reset_tile_cols
;; 01:7e15:r_op _TILE_COLS

01:7e17 .jump_read_byte

01:7e20 .jump_convert_byte_1
01:7e28 .jump_convert_byte_2

01:7e2a .jump_set_vram_bank

01:7e2e .jump_wait_vram_1

;; 01:7e34 Write byte to VRAM bank 1

;; 01:7e35 Set VRAM bank to 0

;; 01:7e38 Read byte again
;; 01:7e39 Convert byte for VRAM 0
01:7e45 .jump_convert_byte_3

01:7e46 .jump_wait_vram_2

;; 01:7e4c Write byte to VRAM bank 0
;; 01:7e4d Increment
;; 01:7e5a Return

01:7e5c call_copy_dmg_tile_page
;; 01:7e5c Copy an entire page of tiles from an address to VRAM.
;; 01:7e5c There are 18 rows and 20 columns in a page of tiles.
;; 01:7e5c DMG only.
;; 01:7e5c
;; 01:7e5c Args: address
;; 01:7e5c
;; 01:7e5c Registers used: A, DE, HL

01:7e6a .jump_read_byte

01:7e6c .jump_wait_vram
;; 01:7e6e:l_op STATF_BUSY

;; 01:7e72 Write byte to VRAM

;; 01:7e73 Iterate
;; 01:7e80 Return

01:7e82 call_01_7e82

01:7ee1 _set_sprite_palette
;; 01:7ee1 gbdk 2.95 libc/gb/cgb.s:_set_sprite_palette
;; 01:7ee1 See: _set_bkg_palette
01:7ef7 .set_sprite_palette_1

01:7f0c data_bank_01_padding
;; 01:7f0c 01:7f0c
;; 01:7f0c:replace:00f4 ds $8000 - @, $ff

02:4000 call_02_4000

02:40e6 call_02_40e6

02:410c call_02_410c

02:4132 call_02_4132

02:4154 call_02_4154

02:4208 call_02_4208

02:422e call_02_422e

02:4254 call_02_4254

02:4276 call_02_4276

02:4286 call_02_4286
;; 02:42da:l_op [rRAMB]
;; 02:42dd:r_op CART_RAM_ENABLE
;; 02:42e0:l_op [rRAMG]
;; 02:42e6:l_op [rRAMG]

02:43ce call_02_43ce

02:43d8 data_02_43d8
02:43d8 .data:0200

02:45d8 call_02_45d8

02:4637 call_02_4637

02:4679 call_02_4679

02:46c7 call_02_46c7

02:46d8 call_02_46d8

02:46f7 call_02_46f7

02:472f call_02_472f

02:4753 call_02_4753

02:478d call_02_478d

02:47a2 data_02_47a2
02:47a2 .data:009d

02:483f call_02_483f

02:485a call_02_485a

02:487e call_02_487e
;; 02:4897:r_op _SRAM_GROOVES
;; 02:489b Assume bank for _SRAM_GROOVES is 0
;; 02:489c:l_op [rRAMB]
;; 02:489f:r_op CART_RAM_ENABLE
;; 02:48a2:l_op [rRAMG]
;; 02:48a7:l_op [rRAMG]

02:48ab call_02_48ab
;; 02:48ac:l_op [rRAMB]

02:48d2 call_02_48d2
;; 02:48de:r_op _SRAM_SONG_CHAINS_BANK
;; 02:48e0:l_op [rRAMB]
;; 02:48ef:r_op _SRAM_SONG_CHAINS
;; 02:4911:r_op CART_RAM_ENABLE
;; 02:4914:l_op [rRAMG]
;; 02:491a:r_op CART_RAM_DISABLE
;; 02:491c:l_op [rRAMG]
;; 02:4940:r_op CART_RAM_ENABLE
;; 02:4943:l_op [rRAMG]
;; 02:4949:l_op [rRAMG]

02:494d call_02_494d

02:4b8a call_02_4b8a
;; 02:4b9e:r_op _SRAM_CHAIN_TRANSPOSES
;; 02:4bab:r_op _SRAM_CHAIN_TRANSPOSES_BANK
;; 02:4bad:l_op [rRAMB]
;; 02:4bb0:r_op CART_RAM_ENABLE
;; 02:4bb3:l_op [rRAMG]
;; 02:4bb8:l_op [rRAMG]

02:4bc5 call_02_4bc5

02:4c26 call_02_4c26

02:4c42 call_02_4c42

02:4c4e call_02_4c4e

02:4c68 call_02_4c68
;; 02:4c6a:l_op [rRAMB]
;; 02:4c78:r_op CART_RAM_ENABLE
;; 02:4c7b:l_op [rRAMG]
;; 02:4c80:l_op [rRAMG]

02:4c9c call_02_4c9c

02:4cbf call_02_4cbf

02:4d71 call_02_4d71

02:4da9 call_02_4da9

02:4e17 call_02_4e17

02:4e2a call_02_4e2a

02:4e69 call_02_4e69

02:4e74 call_02_4e74

02:4ea3 call_02_4ea3

02:4ef9 call_fill_12x
;; 02:4ef9 Fill 12 addresses with the given byte.
;; 02:4ef9 Entry conditions: A = byte, HL = start_address
;; 02:4ef9 Exit conditions: HL = end_address
;; 02:4ef9 Registers used: A, HL

02:4efd call_fill_8x
;; 02:4efd Fill 8 addresses with the given byte.
;; 02:4efd Entry conditions: A = byte, HL = start_address
;; 02:4efd Exit conditions: HL = end_address
;; 02:4efd Registers used: A, HL

02:4f01 call_fill_4x
;; 02:4f01 Fill 4 addresses with the given byte.
;; 02:4f01 Entry conditions: A = byte, HL = start_address
;; 02:4f01 Exit conditions: HL = end_address
;; 02:4f01 Registers used: A, HL

02:4f06 call_02_4f06

02:4f8a call_02_4f8a
;; 02:4f8c:l_op [rRAMB]

02:5006 call_02_5006
;; 02:5009:r_op CART_RAM_ENABLE
;; 02:500b:r_op rRAMG

02:5014 call_02_5014

02:503e call_02_503e

02:5049 call_02_5049

02:5066 call_02_5066
;; 02:506b:l_op [rRAMB]

02:50ab call_02_50ab

02:50e3 call_02_50e3

02:511b call_02_511b
;; 02:5123:r_op CART_RAM_ENABLE
;; 02:5126:l_op [rRAMG]
;; 02:512b:l_op [rRAMG]

02:512f call_02_512f
;; 02:517f:l_op [rRAMB]
;; 02:5182:r_op CART_RAM_ENABLE
;; 02:5185:l_op [rRAMG]
;; 02:518a:l_op [rRAMG]
;; 02:521d:l_op [rRAMB]

02:530f call_02_530f

02:5423 call_02_5423
;; 02:5434:r_op CART_RAM_ENABLE
;; 02:5437:l_op [rRAMG]
;; 02:543d:l_op [rRAMG]

02:5441 call_02_5441

02:54a1 call_02_54a1

02:5534 call_02_5534

02:5578 call_02_5578

02:5595 call_02_5595

02:55b9 call_02_55b9

02:55ce call_02_55ce

02:55e5 call_02_55e5

02:5621 call_02_5621
;; 02:564c Assume bank is set to bank for _SRAM_TABLE_TRANSPOSE
;; 02:564c:r_op _SRAM_TABLE_TRANSPOSE
;; 02:568e Assume bank is set to bank for _SRAM_TABLE_COMMANDS_2
;; 02:568e:r_op _SRAM_TABLE_COMMANDS_2

02:56ab call_02_56ab

02:56f5 call_02_56f5

02:5715 call_02_5715
;; 02:5727 Assume bank is set to bank for _SRAM_TABLE_VOLS
;; 02:5727:r_op _SRAM_TABLE_VOLS

02:5742 call_02_5742

02:5809 call_02_5809

02:5847 call_02_5847
;; 02:5859 Assume bank is set to bank for _SRAM_TABLE_TRANSPOSE
;; 02:5859:r_op _SRAM_TABLE_TRANSPOSE

02:5891 call_write_ff_x32
;; 02:5891 Write 0xff to 32 addresses.
;; 02:5891 Entry conditions: HL = start
;; 02:5891 Exit conditions: HL = end + 1
;; 02:5891 Registers used: A, HL

02:58b4 call_02_58b4
;; 02:58be:r_op _SRAM_INSTRUMENT_PARAMS
;; 02:58c2:r_op _SRAM_INSTRUMENT_PARAMS_BANK
;; 02:58c4:l_op [rRAMB]
;; 02:58ca:r_op CART_RAM_ENABLE
;; 02:58cd:l_op [rRAMG]
;; 02:58fa:l_op [rRAMG]

02:5e46 call_02_5e46
;; 02:5e62:r_op _SRAM_CHAIN_PHRASES
;; 02:5e66:r_op _SRAM_CHAIN_PHRASES_BANK
;; 02:5e68:l_op [rRAMB]
;; 02:5e6b:r_op CART_RAM_ENABLE
;; 02:5e6e:l_op [rRAMG]
;; 02:5e73:l_op [rRAMG]

02:5e77 call_02_5e77
;; 02:5e8f:r_op _SRAM_SONG_CHAINS
;; 02:5e93:r_op _SRAM_SONG_CHAINS_BANK
;; 02:5e95:l_op [rRAMB]
;; 02:5e98:r_op CART_RAM_ENABLE
;; 02:5e9b:l_op [rRAMG]
;; 02:5ea0:l_op [rRAMG]

02:5ea4 data_02_5ea4
02:5ea4 .data:0078

02:5f1c call_02_5f1c

02:5f28 call_02_5f28

02:5f71 call_02_5f71

02:5f88 call_02_5f88

02:5fa4 call_02_5fa4

02:5fcf call_02_5fcf

02:5fdc call_02_5fdc

02:6013 call_02_6013

02:6059 call_02_6059

02:6099 call_02_6099
;; 02:60f8 Assume bank is set to bank for _SRAM_SPEECH_WORDS
;; 02:60f8:r_op _SRAM_SPEECH_WORDS

02:6171 call_02_6171

02:61bf call_02_61bf
;; 02:61d0:l_op [rRAMB]
;; 02:61d3:r_op CART_RAM_ENABLE
;; 02:61d6:l_op [rRAMG]
;; 02:620a:l_op [rRAMG]

02:620e call_02_620e

02:6441 call_02_6441

02:6465 call_02_6465

02:653f call_02_653f

02:65bb call_02_65bb

02:660e call_02_660e

02:6627 call_02_6627

02:6631 call_02_6631

;; 02:663d:r_op LOW(call_07_5d9a)
;; 02:663f:r_op HIGH(call_07_5d9a)
;; 02:6642:r_op BANK(call_07_5d9a)

02:665c call_02_665c

02:6809 call_02_6809

02:683d jump_table_02_683d

02:68c8 call_02_68c8

02:68dc data_02_68dc
02:68dc .data:0008

02:68e4 call_02_68e4

02:6999 call_02_6999

;; 02:69bc:l_op _CHAIN_SCREEN
;; 02:69c1:l_op _PHRASE_SCREEN

02:6a5e call_02_6a5e

;; 02:6a72:l_op _SONG_SCREEN

;; 02:6a7b:l_op _SELECT_CURSOR_MODE

02:6aa0 call_02_6aa0

02:6abf call_02_6abf

02:6c9c call_02_6c9c

02:6d31 call_02_6d31

02:6d46 call_02_6d46

02:6dc9 call_02_6dc9

02:6e87 call_read_chain_phrase
;; 02:6e87 Read a phrase number at a specific chain row from external memory.
;; 02:6e87 Args: chain, row
;; 02:6e87 Result: E
;; 02:6e87 Registers used: A, DE, HL

;; 02:6e8d There are only 0x80 chains starting from 0, so bit 7 should never be set

02:6e95 .jump_check_row
;; 02:6e98:l_op _CHAIN_ROWS

02:6ea0 .jump_calculate_address_1
;; 02:6ea5 The loop below will shift the chain number left 4 times, multiplying it by 16.
02:6ea9 .jump_calculate_address_2
02:6eae .jump_calculate_address_3

;; 02:6eb1:r_op _SRAM_CHAIN_PHRASES
;; 02:6eca:r_op _SRAM_CHAIN_PHRASES_BANK

02:6ed8 call_02_6ed8

02:6f56 call_02_6f56
;; 02:6f57:r_op rRAMB
;; 02:6f69:r_op rRAMG
;; 02:6f6c:r_op CART_RAM_ENABLE
;; 02:6f80:r_op rRAMG
;; 02:6f83:r_op CART_RAM_DISABLE
;; 02:6fdf:r_op rRAMG
;; 02:6fe2:r_op CART_RAM_DISABLE
;; 02:6ff1:r_op rRAMG
;; 02:6ff4:r_op CART_RAM_ENABLE
;; 02:7001:r_op rRAMG
;; 02:7004:r_op CART_RAM_DISABLE

02:701d call_02_701d

02:7030 call_02_7030

02:7041 call_02_7041

02:7284 call_02_7284

02:72d2 call_02_72d2

02:73b0 call_02_73b0
;; 02:73b3:r_op rRAMB

02:74e8 call_02_74e8

02:7712 call_02_7712

02:7791 call_02_7791

02:77e6 call_02_77e6

;; 02:77ea:l_op _SONG_SCREEN

;; 02:783a:r_op _SONG_SCREEN

02:784d call_02_784d

02:7a53 call_02_7a53

;; 02:7a6a:l_op _SONG_SCREEN

;; 02:7aa1:l_op _CHAIN_SCREEN
;; 02:7aa6:l_op _SONG_SCREEN

02:7b9b call_02_7b9b

02:7c4a call_02_7c4a

02:7c6c jump_table_02_7c6c

02:7cd0 data_02_7cd0
02:7cd0 .data:012b
02:7dfb data_02_7dfb
02:7dfb .data:0078

02:7e73 call_02_7e73

02:7e82 call_02_7e82

02:7e8d call_02_7e8d

02:7e98 call_02_7e98

02:7eb9 data_bank_02_padding
;; 02:7eb9 02:7eb9
;; 02:7eb9:replace:0147 ds $8000 - @, $ff

03:4000 call_write_current_instrument_param_1
;; 03:4000 Write a single param for CURRENT_INSTRUMENT_1.
;; 03:4000 See also call_write_instrument_param.
;; 03:4000
;; 03:4000 Args: param (see param constants), value
;; 03:4000
;; 03:4000 Registers used: A, DE, HL

03:4015 data_default_wave_frame_2
03:4015 .data:0010
03:4025 data_03_4025
03:4025 .data:0006
03:402b data_03_402b
03:402b .data:001b
03:4046 data_03_4046
03:4046 .data:0028
03:406e data_03_406e
03:406e .data:001b
03:4089 data_03_4089
03:4089 .data:0028
03:40b1 data_03_40b1
03:40b1 .data:0043
03:40f4 data_max_instrument_cursor_rows
03:40f4 data_max_pulse_instrument_cursor_row
;; 03:40f4 The max instrument cursor row for each type (excluding tables).
03:40f4 .data:0001
03:40f5 data_max_wave_instrument_cursor_row
03:40f5 .data:0001
03:40f6 data_max_kit_instrument_cursor_row
03:40f6 .data:0001
03:40f7 data_max_noise_instrument_cursor_row
03:40f7 .data:0001

03:40f8 call_read_current_instrument_wave_play_param
;; 03:40f8 Read the wave play instrument param from the current instrument.
;; 03:40f8 Result: E
;; 03:40f8 Registers used: A, DE, HL

;; 03:40f9:r_op _WAVE_PLAY_INSTRUMENT_PARAM

03:4105 call_current_instrument_has_manual_wave_play_type
;; 03:4105 Check if the current instrument has a manual wave play type.
;; 03:4105 Result: E
;; 03:4105 Registers used: A, DE, HL

03:4113 .jump_false
03:4114 .jump_return

03:4118 call_current_instrument_has_table_on_param
;; 03:4118 Checks to see if the current instrument has the table on instrument param.
;; 03:4118 Result: E
;; 03:4118 Registers used: A, DE, HL

;; 03:4119:r_op _TABLE_ON_INSTRUMENT_PARAM

;; 03:4124 Look at the bit of the table on param

03:412e .jump_set_false
03:4130 .jump_return

03:4133 call_enable_current_instrument_table_on_param
;; 03:4133 Enable the table on param for the current instrument.
;; 03:4133 Registers used: A, DE, HL

;; 03:4134 Read current instrument param
;; 03:413f Enable bit 5, table on param
;; 03:4142 Write updated param
;; 03:414d Return

03:414f call_is_instrument_cursor_max
;; 03:414f Checks if the instrument cursor row is at the max position (not including table).
;; 03:414f
;; 03:414f Args:
;; 03:414f    instrument_type (pulse, wave, kit, noise)
;; 03:414f
;; 03:414f Result: E
;; 03:414f
;; 03:414f Registers used: A, DE, HL
;; 03:4153:r_op LOW(data_max_instrument_cursor_rows)
;; 03:4157:r_op HIGH(data_max_instrument_cursor_rows)
03:416b .jump_false
03:416c .jump_return

03:4170 call_03_4170

03:4257 call_03_4257

;; 03:4266:r_op LOW(call_01_522d)
;; 03:4268:r_op HIGH(call_01_522d)
;; 03:4270:r_op BANK(call_01_522d)

03:427b call_03_427b

03:4293 call_03_4293

03:42ab call_03_42ab
;; 03:42b4:r_op _SRAM_WAVE_FRAMES
;; 03:42c4:r_op _SRAM_WAVE_FRAMES_BANK

03:42ff call_03_42ff

;; 03:432a:r_op call_show_banner
;; 03:432e:r_op BANK(call_show_banner)

03:433b data_out_of_synths_error_string
03:433b .text:0032

03:436d call_03_436d

;; 03:436e:r_op LOW(call_1f_4b8c)
;; 03:4370:r_op HIGH(call_1f_4b8c)
;; 03:4373:r_op BANK(call_1f_4b8c)

;; 03:4390:r_op call_show_banner
;; 03:4394:r_op BANK(call_show_banner)

;; 03:43ca:r_op LOW(call_draw_table_instrument_param)
;; 03:43cc:r_op HIGH(call_draw_table_instrument_param)
;; 03:43cf:r_op BANK(call_draw_table_instrument_param)

03:43da data_out_of_tables_instrument_screen_error_string
03:43da .text:000f

03:43e9 call_03_43e9

03:4443 call_03_4443
;; 03:44a1:r_op _SRAM_SYNTH_PARAMS
;; 03:44c9:r_op _SRAM_SYNTH_PARAMS_BANK

03:45c3 data_cloned_synth_string
03:45c3 .text:000d

03:45d0 call_03_45d0

;; 03:45d9:r_op call_05_4040
;; 03:45dd:r_op BANK(call_05_4040)

;; 03:45e6:r_op LOW(call_01_6d5c)
;; 03:45e8:r_op HIGH(call_01_6d5c)
;; 03:45eb:r_op BANK(call_01_6d5c)

03:45fc call_03_45fc

;; 03:4631:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 03:4633:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 03:4636:r_op BANK(call_copy_current_screen_bg_tile_page)

03:4644 call_03_4644

03:4661 call_03_4661

;; 03:468f:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 03:4691:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 03:4694:r_op BANK(call_copy_current_screen_bg_tile_page)

03:46a2 call_03_46a2

03:476a call_03_476a

03:4792 call_03_4792

03:47b9 call_03_47b9

03:47cb call_03_47cb

;; 03:4825:r_op LOW(call_draw_table_type_instrument_params)
;; 03:4827:r_op HIGH(call_draw_table_type_instrument_params)
;; 03:482a:r_op BANK(call_draw_table_type_instrument_params)

;; 03:4847:r_op LOW(call_draw_table_instrument_param)
;; 03:4849:r_op HIGH(call_draw_table_instrument_param)
;; 03:484c:r_op BANK(call_draw_table_instrument_param)

03:4857 call_handle_shift_table_type_right
;; 03:4857 Handle shifting the table on/step/tick instrument params when the right key is pressed.
;; 03:4857
;; 03:4857 Entry conditions:
;; 03:4857   KEY_CHANGE_START must be set to 1 after pressing the key
;; 03:4857
;; 03:4857 Registers used: A, DE, HL

;; 03:4869:r_op _TABLE_STEP_INSTRUMENT_PARAM

;; 03:4874 Enable the table step instrument param bit

03:4885 .jump_enable_table_on

;; 03:4894:r_op LOW(call_draw_table_type_instrument_params)
;; 03:4896:r_op HIGH(call_draw_table_type_instrument_params)
;; 03:4899:r_op BANK(call_draw_table_type_instrument_params)

;; 03:48b6:r_op LOW(call_draw_table_instrument_param)
;; 03:48b8:r_op HIGH(call_draw_table_instrument_param)
;; 03:48bb:r_op BANK(call_draw_table_instrument_param)

03:4888 .jump_draw_table_type
03:48aa .jump_draw_table

03:48c4 .jump_return

03:48c6 call_03_48c6

;; 03:48ef:r_op LOW(call_draw_table_instrument_param)
;; 03:48f1:r_op HIGH(call_draw_table_instrument_param)
;; 03:48f4:r_op BANK(call_draw_table_instrument_param)

03:48ff call_03_48ff

;; 03:493d:r_op LOW(call_draw_table_instrument_param)
;; 03:493f:r_op HIGH(call_draw_table_instrument_param)
;; 03:4942:r_op BANK(call_draw_table_instrument_param)

03:494d call_03_494d

;; 03:4975:r_op LOW(call_draw_table_instrument_param)
;; 03:4977:r_op HIGH(call_draw_table_instrument_param)
;; 03:497a:r_op BANK(call_draw_table_instrument_param)

03:4985 call_03_4985

;; 03:49a4:r_op LOW(call_draw_table_instrument_param)
;; 03:49a6:r_op HIGH(call_draw_table_instrument_param)
;; 03:49a9:r_op BANK(call_draw_table_instrument_param)

03:49b4 call_03_49b4

03:49e0 call_03_49e0

03:4a0d data_03_4a0d
03:4a0d .text:0003

03:4a10 call_read_current_instrument_wave_loop_pos_param
;; 03:4a10 Read the wave loop pos param for the current instrument.
;; 03:4a10 Result: E
;; 03:4a10 Registers used: A, DE, HL

;; 03:4a11:r_op _WAVE_LOOP_POS_INSTRUMENT_PARAM
;; 03:4a1c Mask the param to only get the wave loop pos part
;; 03:4a1f Wave loop pos is stored as a negative, subtract from 0xf to get the real value

;; 03:4a24 Return

03:4a26 call_draw_wave_loop_pos_instrument_param
;; 03:4a26 Draw the wave loop pos instrument param for the current instrument.
;; 03:4a26 Registers used: A, DE, HL

;; 03:4a34:l_op _PLAY_LOOP
;; 03:4a39:l_op _PLAY_PINGPONG
;; 03:4a3e:l_op _PLAY_RESYNC

;; 03:4a40 Manual and once do not have loop pos

03:4a43 .jump_draw_loop_pos
03:4a58 .jump_draw_empty

;; 03:4a58:r_op _EMPTY_ROW_ASCII_CODE

03:4a61 .jump_return

03:4a63 call_03_4a63

03:4ad3 data_instrument_distortion_type_strings
03:4ad3 data_hard_instrument_distortion_type_string
03:4ad3 .text:0006
03:4ad9 data_soft_instrument_distortion_type_string
03:4ad9 .text:0006
03:4adf data_fold_instrument_distortion_type_string
03:4adf .text:0006
03:4ae5 data_wrap_instrument_distortion_type_string
03:4ae5 .text:0006
03:4aeb data_extra_instrument_distortion_type_prefix_string
03:4aeb .text:0003

03:4aee call_03_4aee

03:4aff call_03_4aff

03:4b13 call_read_current_instrument_wave_length_param
;; 03:4b13 Read the value of the wave length param for the current instrument.
;; 03:4b13 Result: E
;; 03:4b13 Registers used: A, DE, HL

;; 03:4b14:r_op _WAVE_LENGTH_INSTRUMENT_PARAM
;; 03:4b1f Mask the param to only get the wave length part
;; 03:4b22 Wave length is stored as a negative, subtract from 0xf to get the real value

;; 03:4b27 Return

03:4b29 call_03_4b29

03:4b48 call_03_4b48

03:4b6b call_03_4b6b

03:4b7d call_03_4b7d

;; 03:4bad:r_op LOW(call_01_5208)
;; 03:4baf:r_op HIGH(call_01_5208)

;; 03:4bb4:r_op LOW(call_01_518c)
;; 03:4bb6:r_op HIGH(call_01_518c)

;; 03:4bc0 Assume the bank of call_01_518c is the same as call_01_5208
;; 03:4bc0:r_op BANK(call_01_5208)
;; 03:4bc4 Call either call_01_518c or call_01_5208

03:4bcb call_03_4bcb

03:4bea call_03_4bea

03:4c08 call_03_4c08

03:4c18 call_03_4c18

;; 03:4c6a:r_op LOW(call_01_518c)
;; 03:4c6c:r_op HIGH(call_01_518c)
;; 03:4c76:r_op BANK(call_01_518c)

03:4c83 call_03_4c83

;; 03:4cdf:r_op LOW(call_01_518c)
;; 03:4ce1:r_op HIGH(call_01_518c)
;; 03:4ceb:r_op BANK(call_01_518c)

03:4cf8 call_03_4cf8

03:4d34 call_03_4d34

03:4dea data_wave_instrument_screen_string
03:4dea .text:0006
03:4df0 data_synth_instrument_screen_string
03:4df0 .text:0006

03:4df6 call_03_4df6

;; 03:4df7:r_op call_1b_754f
;; 03:4dfb:r_op BANK(call_1b_754f)

03:4e06 call_03_4e06

;; 03:4e1f:r_op LOW(call_1f_7087)
;; 03:4e21:r_op HIGH(call_1f_7087)
;; 03:4e24:r_op BANK(call_1f_7087)

;; 03:4e36:r_op call_1f_4929
;; 03:4e3a:r_op BANK(call_1f_4929)

;; 03:4ecd:r_op LOW(call_01_493b)
;; 03:4ecf:r_op HIGH(call_01_493b)
;; 03:4ed8:r_op BANK(call_01_493b)

03:4f6b jump_table_03_4f6b

;; 03:4f77:r_op LOW(call_1f_423d)
;; 03:4f79:r_op HIGH(call_1f_423d)

;; 03:4f7e:r_op LOW(call_1f_474e)
;; 03:4f80:r_op HIGH(call_1f_474e)

;; 03:4f85:r_op LOW(call_1f_4399)
;; 03:4f87:r_op HIGH(call_1f_4399)

;; 03:4f8c:r_op LOW(call_1f_44dd)
;; 03:4f8e:r_op HIGH(call_1f_44dd)

;; 03:4f91 Assume the banks of call_1f_423d, call_1f_474e, call_1f_4399 and call_1f_44dd are the same
;; 03:4f91:r_op BANK(call_1f_423d)

;; 03:4f9a:r_op LOW(call_1f_6ff1)
;; 03:4f9c:r_op HIGH(call_1f_6ff1)
;; 03:4f9f:r_op BANK(call_1f_6ff1)

03:4fe3 data_instrument_type_strings
03:4fe3 data_pulse_instrument_type_string
03:4fe3 .text:0006
03:4fe9 data_wave_instrument_type_string
03:4fe9 .text:0006
03:4fef data_kit_instrument_type_string
03:4fef .text:0006
03:4ff5 data_noise_instrument_type_string
03:4ff5 .text:0006

03:4ffb call_03_4ffb

03:5021 call_03_5021

03:5059 call_03_5059

03:50ab call_03_50ab

03:50fe call_03_50fe

03:5147 call_03_5147

;; 03:517e:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 03:5180:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 03:5185:r_op BANK(call_copy_current_screen_bg_tile_page)

03:51a0 call_03_51a0

;; 03:51c6:r_op call_1f_418a
;; 03:51ca:r_op BANK(call_1f_418a)

03:51db call_03_51db

;; 03:51fe:r_op call_1f_418a
;; 03:5202:r_op BANK(call_1f_418a)

03:5213 call_03_5213

;; 03:523b:r_op call_1f_418a
;; 03:523f:r_op BANK(call_1f_418a)

03:5250 call_03_5250

;; 03:5275:r_op call_1f_418a
;; 03:5279:r_op BANK(call_1f_418a)

03:528a call_03_528a

03:52da data_03_52da
03:52da .text:0004

03:52de call_03_52de

03:5337 jump_table_03_5337

03:533b call_03_533b

03:5395 data_03_5395
03:5395 .text:0004

03:5399 call_03_5399

03:53f9 jump_table_03_53f9

03:53fd call_03_53fd

;; 03:5409:r_op LOW(call_1f_71cc)
;; 03:540b:r_op HIGH(call_1f_71cc)
;; 03:540e:r_op BANK(call_1f_71cc)

03:5515 jump_table_03_5515

03:575b jump_table_03_575b

03:580c jump_table_03_580c

;; 03:582e:r_op call_read_current_instrument_env_1_byte_1
;; 03:5832:r_op BANK(call_read_current_instrument_env_1_byte_1)

;; 03:5848:r_op call_1f_4169
;; 03:584c:r_op BANK(call_1f_4169)

;; 03:58c7:r_op call_read_current_instrument_env_1_byte_1
;; 03:58cb:r_op BANK(call_read_current_instrument_env_1_byte_1)

;; 03:58e1:r_op call_1f_4169
;; 03:58e5:r_op BANK(call_1f_4169)

03:5994 jump_table_03_5994

03:59be jump_table_03_59be

03:5b58 jump_table_03_5b58

03:5df0 jump_table_03_5df0

03:60fd jump_table_03_60fd

03:6256 jump_table_03_6256

03:6280 jump_table_03_6280

03:641b jump_table_03_641b

03:66ac jump_table_03_66ac

03:69d8 jump_table_03_69d8

03:6b11 jump_table_03_6b11

03:7130 jump_table_03_7130

;; 03:76ea:r_op LOW(call_1b_4e8a)
;; 03:76ec:r_op HIGH(call_1b_4e8a)
;; 03:76ef:r_op BANK(call_1b_4e8a)

;; 03:7798:r_op call_05_6936
;; 03:77a1:r_op BANK(call_05_6936)

;; 03:7833:r_op call_draw_table_type_instrument_params
;; 03:7837:r_op BANK(call_draw_table_type_instrument_params)

;; 03:7854:r_op call_draw_table_instrument_param
;; 03:7858:r_op BANK(call_draw_table_instrument_param)

;; 03:78c0:r_op call_move_screen_up
;; 03:78c4:r_op BANK(call_move_screen_up)

;; 03:78cd:r_op LOW(call_00_2490)
;; 03:78cf:r_op HIGH(call_00_2490)
;; 03:78d2 Unused bank for call_00_2490
;; 03:78d6 Banked call used for call_00_2490 unnecessarily

;; 03:78e6:r_op call_move_screen_down
;; 03:78ea:r_op BANK(call_move_screen_down)

;; 03:78f3:r_op LOW(call_00_2490)
;; 03:78f5:r_op HIGH(call_00_2490)
;; 03:78f8 Unused bank for call_00_2490
;; 03:78fc Banked call used for call_00_2490 unnecessarily

;; 03:790c:r_op call_move_screen_left
;; 03:7910:r_op BANK(call_move_screen_left)

;; 03:7919:r_op LOW(call_00_2490)
;; 03:791b:r_op HIGH(call_00_2490)
;; 03:791e Unused bank for call_00_2490
;; 03:7922 Banked call used for call_00_2490 unnecessarily

;; 03:7934:r_op call_move_screen_right
;; 03:7938:r_op BANK(call_move_screen_right)

;; 03:7959:r_op LOW(call_00_2490)
;; 03:795b:r_op HIGH(call_00_2490)
;; 03:795e Unused bank for call_00_2490
;; 03:7962 Banked call used for call_00_2490 unnecessarily

;; 03:79ac:r_op LOW(call_01_546e)
;; 03:79ae:r_op HIGH(call_01_546e)
;; 03:79b1:r_op BANK(call_01_546e)

;; 03:79bd:r_op LOW(call_01_551b)
;; 03:79bf:r_op HIGH(call_01_551b)
;; 03:79c2:r_op BANK(call_01_551b)

;; 03:79e0:r_op LOW(call_02_77e6)
;; 03:79e2:r_op HIGH(call_02_77e6)
;; 03:79e5:r_op BANK(call_02_77e6)

;; 03:7a08:r_op LOW(call_02_7b9b)
;; 03:7a0a:r_op HIGH(call_02_7b9b)
;; 03:7a0d:r_op BANK(call_02_7b9b)

;; 03:7a1b:r_op LOW(call_01_5253)
;; 03:7a1d:r_op HIGH(call_01_5253)
;; 03:7a20:r_op BANK(call_01_5253)

03:7a39 data_instrument_param_strings
03:7a39 data_loop_on_left_instrument_param_string
03:7a39 .text:0004
03:7a3d data_loop_atk_left_instrument_param_string
03:7a3d .text:0004
03:7a41 data_loop_on_right_instrument_param_string
03:7a41 .text:0004
03:7a45 data_loop_atk_right_instrument_param_string
03:7a45 .text:0004
03:7a49 data_full_kit_speed_instrument_param_string
03:7a49 .text:0004
03:7a4d data_safe_noise_type_instrument_param_string
03:7a4d .text:0005
03:7a52 data_03_7a52
03:7a52 .text:0004
03:7a56 data_loop_off_left_instrument_param_string
03:7a56 .text:0004
03:7a5a data_03_7a5a
03:7a5a .text:0004
03:7a5e data_loop_off_right_instrument_param_string
03:7a5e .text:0004
03:7a62 data_len_all_left_instrument_param_string
03:7a62 .text:0004
03:7a66 data_half_kit_speed_instrument_param_string
03:7a66 .text:0004
03:7a6a data_free_noise_type_instrument_param_string
03:7a6a .text:0005
03:7a6f data_len_all_right_instrument_param_string
03:7a6f .text:0004

03:7a73 data_bank_03_padding
;; 03:7a73 03:7a73
;; 03:7a73:replace:058d ds $8000 - @, $ff

04:4000 call_04_4000

;; 04:4001:r_op call_06_752b
;; 04:4010:r_op BANK(call_06_752b)

04:401b call_04_401b

;; 04:401c:r_op LOW(call_1f_6bac)
;; 04:401e:r_op HIGH(call_1f_6bac)
;; 04:4021:r_op BANK(call_1f_6bac)

04:402c call_04_402c

04:405d call_04_405d

04:4071 call_read_current_phrase_row_instrument
;; 04:4071 Read the instrument at the current phrase row.
;; 04:4071
;; 04:4071 Entry conditions:
;; 04:4071   PHRASE_CURSOR_ROW must be set
;; 04:4071   CURRENT_PHRASE must be set
;; 04:4071
;; 04:4071 Result: E
;; 04:4071
;; 04:4071 Registers used: A, DE, HL

04:4087 call_04_4087

04:40b2 call_04_40b2

;; 04:40d1:l_op _SELECT_CURSOR_MODE

04:4106 call_04_4106

04:418f call_write_current_phrase_note
;; 04:418f Write a note to a row in the current phrase.
;; 04:418f Args: row, note
;; 04:418f Registers used: A, D, HL

;; 04:4198:l_op LOW(_SRAM_PHRASE_NOTES)
;; 04:419c:l_op HIGH(_SRAM_PHRASE_NOTES)

;; 04:41a7:l_op _PHRASE_NOTES

04:41af .jump_check_phrase
;; 04:41b3:l_op _PHRASES

04:41bb .jump_calculate_address_1
;; 04:41c1 The loop below will shift the phrase number left 4 times, multiplying it by 16.
04:41c5 .jump_calculate_address_2
04:41ca .jump_calculate_address_3

;; 04:41e3:r_op _SRAM_PHRASE_NOTES_BANK

04:41f0 call_write_phrase_instrument
;; 04:41f0 Write an instrument number to a phrase row.
;; 04:41f0 Args: phrase, row, value
;; 04:41f0 Registers used: A, DE, HL

;; 04:41f6:l_op _PHRASES

04:41fe .jump_verify_row

;; 04:4201:l_op _PHRASE_NOTES

04:4209 .jump_verify_instrument

;; 04:420a:r_op _INSTRUMENTS
;; 04:4212 Allow clearing an instrument

04:421b .jump_calculate_address_1
;; 04:4220 The following loop will shift the phrase number left 4 times, multiplying it by 16.

04:4224 .jump_calculate_address_2
04:4229 .jump_calculate_address_3

;; 04:422c:r_op _SRAM_PHRASE_INSTRUMENTS
;; 04:4244 Write phrase instrument value
;; 04:424a:r_op _SRAM_PHRASE_INSTRUMENTS_BANK

;; 04:4253 Return

04:4257 call_04_4257

04:429e data_04_429e
04:429e .data:0005
04:42a3 data_04_42a3
04:42a3 .data:0005

04:42a8 call_04_42a8

;; 04:42d0:r_op LOW(call_1f_4a64)
;; 04:42d2:r_op HIGH(call_1f_4a64)
;; 04:42d7:r_op BANK(call_1f_4a64)

;; 04:4362:r_op LOW(call_01_493b)
;; 04:4364:r_op HIGH(call_01_493b)
;; 04:436c:r_op BANK(call_01_493b)

;; 04:43ac:r_op LOW(call_01_7828)
;; 04:43ae:r_op HIGH(call_01_7828)
;; 04:43b1:r_op BANK(call_01_7828)

04:43cd call_04_43cd

;; 04:44d0:l_op _SELECT_CURSOR_MODE

;; 04:44fe:l_op _SELECT_CURSOR_MODE

04:457c call_04_457c

;; 04:45e9:l_op _SELECT_CURSOR_MODE

;; 04:468a:l_op _SELECT_CURSOR_MODE

04:470b call_04_470b

;; 04:477c:l_op _SELECT_CURSOR_MODE

;; 04:47ac:l_op _SELECT_CURSOR_MODE

04:4811 call_04_4811

;; 04:4884:l_op _SELECT_CURSOR_MODE

;; 04:48b2:l_op _SELECT_CURSOR_MODE

04:4918 call_read_phrase_instrument
;; 04:4918 Read an instrument number from a row in a phrase.
;; 04:4918 Args: phrase, row
;; 04:4918 Result: E
;; 04:4918 Registers used: A, DE, HL

;; 04:491e:l_op _PHRASES

04:4926 .jump_verify_phrase_row

;; 04:4929:l_op _PHRASE_NOTES

04:4931 .jump_calculate_address_1

;; 04:4936 The following loopp rotates the phrase left 4 times, multiplying it by 16.

04:493a .jump_calculate_address_2

04:493f .jump_calculate_address_3

;; 04:4942:r_op _SRAM_PHRASE_INSTRUMENTS
;; 04:4959 Read the phrase instrument
;; 04:495a:r_op _SRAM_PHRASE_INSTRUMENTS_BANK

;; 04:4964 Return

04:4968 call_read_current_phrase_note
;; 04:4968 Read the note number from a row in the current phrase.
;; 04:4968 Args: row
;; 04:4968 Result: E
;; 04:4968 Registers used: A, DE, HL

;; 04:4971:l_op LOW(_SRAM_PHRASE_NOTES)
;; 04:4975:l_op HIGH(_SRAM_PHRASE_NOTES)

;; 04:4980:l_op _PHRASE_NOTES

04:4988 .jump_verify_current_phrase

;; 04:498c The current phrase should not be unset.
;; 04:498c:l_op _PHRASES

04:4994 .jump_calculate_address_1
;; 04:499a The loop below will shift the phrase number left 4 times, multiplying it by 16.
04:499e .jump_calculate_address_2
04:49a3 .jump_calculate_address_3

;; 04:49b7 _SRAM_PHRASE_NOTES_BANK

04:49c5 call_write_phrase_command
;; 04:49c5 Write a command to a row in a phrase.
;; 04:49c5 Args: phrase, row, command (see command constants)
;; 04:49c5 Registers used: A, DE, HL

;; 04:49ce:l_op LOW(_SRAM_PHRASE_COMMANDS)
;; 04:49d2:l_op HIGH(_SRAM_PHRASE_COMMANDS)

;; 04:49da Verify phrase

;; 04:49dd:l_op _PHRASES

04:49e5 .jump_verify_row

;; 04:49e8:l_op _PHRASE_NOTES

04:49f0 .jump_verify_command

;; 04:49f1:r_op _Z_COMMAND

04:49fc .jump_calculate_address_1

;; 04:4a01 The following loop will shift the phrase number left 4 times, multiplying it by 16.

04:4a05 .jump_calculate_address_2
04:4a0a .jump_calculate_address_3

;; 04:4a19 Write phrase command
;; 04:4a23:r_op _SRAM_PHRASE_COMMANDS_BANK

;; 04:4a2c Return

04:4a30 call_write_phrase_command_value
;; 04:4a30 Write a command value to a phrase row.
;; 04:4a30 Args: phrase, row, value
;; 04:4a30 Registers used: A, DE, HL

;; 04:4a39:l_op LOW(_SRAM_PHRASE_COMMAND_VALUES)
;; 04:4a3d:l_op HIGH(_SRAM_PHRASE_COMMAND_VALUES)

;; 04:4a45 Verify the phrase

;; 04:4a48:l_op _PHRASES

04:4a50 .jump_verify_row

;; 04:4a53:l_op _PHRASE_NOTES

04:4a5b .jump_calculate_address_1

;; 04:4a60 The following loop will shift the phrase number left 4 times, multiplying it by 16.

04:4a64 .jump_calculate_address_2
04:4a69 .jump_calculate_address_3

;; 04:4a78 Write phrase command value
;; 04:4a82:r_op _SRAM_PHRASE_COMMAND_VALUES_BANK

;; 04:4a8b Return

04:4a8f call_read_phrase_command_value
;; 04:4a8f Read a command value from the row of a phrase.
;; 04:4a8f Args: phrase, row
;; 04:4a8f Registers used: A, DE, HL

;; 04:4a98:l_op LOW(_SRAM_PHRASE_COMMAND_VALUES)
;; 04:4a9c:l_op HIGH(_SRAM_PHRASE_COMMAND_VALUES)

;; 04:4aa7:l_op _PHRASES

04:4aaf .jump_check_row

;; 04:4ab2:l_op _PHRASE_NOTES

04:4aba .jump_calculate_address_1

;; 04:4abf The following loop rotates the phrase number left 4 times, multiplying it by 16.

04:4ac3 .jump_calculate_address_2
04:4ac8 .jump_calculate_address_3

;; 04:4ad7 Read the phrase row command value

;; 04:4adc:r_op _SRAM_PHRASE_COMMAND_VALUES_BANK

;; 04:4ae6 Return

04:4aea call_read_phrase_command
;; 04:4aea Read a command from a row in the given phrase.
;; 04:4aea If the command is invalid, returns 0.
;; 04:4aea
;; 04:4aea Args: phrase, row
;; 04:4aea
;; 04:4aea Result: E
;; 04:4aea
;; 04:4aea Registers used: A, DE, HL

;; 04:4af3:l_op LOW(_SRAM_PHRASE_COMMANDS)
;; 04:4af7:l_op HIGH(_SRAM_PHRASE_COMMANDS)

;; 04:4b02:l_op _PHRASES

04:4b0a .jump_check_row

;; 04:4b0d:l_op _PHRASE_NOTES

04:4b15 .jump_calculate_address_1

;; 04:4b1a The following loop rotates the phrase left 4 times, multiplying it by 16.

04:4b1e .jump_calculate_address_2

04:4b23 .jump_calculate_address_3

;; 04:4b32 Read the command from the phrase row

;; 04:4b37:r_op _SRAM_PHRASE_COMMANDS_BANK

;; 04:4b54 Command is invalid

04:4b56 .jump_return

04:4b5b call_04_4b5b

;; 04:4bcc:l_op _SELECT_CURSOR_MODE

04:4c06 call_04_4c06

04:4c10 data_04_4c10
04:4c10 .text:0004

04:4c14 call_04_4c14
;; 04:4c34:r_op _SRAM_PHRASE_NOTES
;; 04:4c47:r_op _SRAM_PHRASE_NOTES_BANK
;; 04:4c55:r_op _SRAM_PHRASE_INSTRUMENTS
;; 04:4c60:r_op _SRAM_PHRASE_INSTRUMENTS_BANK
;; 04:4c81:r_op _SRAM_PHRASE_COMMAND_VALUES
;; 04:4c8c:r_op _SRAM_PHRASE_COMMAND_VALUES_BANK

04:4c99 call_banked_1f_6cd7

;; 04:4c9a:r_op LOW(call_1f_6cd7)
;; 04:4c9c:r_op HIGH(call_1f_6cd7)
;; 04:4c9f:r_op BANK(call_1f_6cd7)

04:4caa call_04_4caa

04:4cc4 call_draw_sample_note
;; 04:4cc4 Draw the current sample note string.
;; 04:4cc4
;; 04:4cc4 Entry conditions:
;; 04:4cc4   SAMPLE_NOTE_STRING must be set
;; 04:4cc4
;; 04:4cc4 Registers used: A, DE

04:4cd4 .jump_sample_off
04:4cd9 .jump_draw

;; 04:4cdf Return

04:4ce1 data_kit_note_off
04:4ce1 .text:0004

04:4ce5 call_04_4ce5

;; 04:4d0a:r_op LOW(call_01_6d5c)
;; 04:4d0c:r_op HIGH(call_01_6d5c)
;; 04:4d0f:r_op BANK(call_01_6d5c)

;; 04:4d18:r_op call_06_55d0
;; 04:4d1c:r_op BANK(call_06_55d0)

;; 04:4e94:r_op _SRAM_INSTRUMENT_PARAMS + 2
;; 04:4ea3:r_op _SRAM_INSTRUMENT_PARAMS_BANK

;; 04:4f0d:r_op _SRAM_INSTRUMENT_PARAMS + 9
;; 04:4f1c:r_op _SRAM_INSTRUMENT_PARAMS_BANK

;; 04:4f92:r_op LOW(call_1f_6bc2)
;; 04:4f94:r_op HIGH(call_1f_6bc2)
;; 04:4f9a:r_op BANK(call_1f_6bc2)

;; 04:50aa:l_op _SELECT_CURSOR_MODE

;; 04:50b8:r_op LOW(call_1f_6ff1)
;; 04:50ba:r_op HIGH(call_1f_6ff1)
;; 04:50bd:r_op BANK(call_1f_6ff1)

;; 04:50c6:r_op LOW(call_1e_4000)
;; 04:50c8:r_op HIGH(call_1e_4000)
;; 04:50cb:r_op BANK(call_1e_4000)

04:50d8 data_04_50d8
04:50d8 .data:000d
04:50e5 data_04_50e5
04:50e5 .data:000d
04:50f2 data_04_50f2
04:50f2 .data:000d

04:50ff data_04_50ff
04:50ff .text:0004
04:5103 data_04_5103
04:5103 .text:0003
04:5106 data_04_5106
04:5106 .text:0004

04:510a call_04_510a

04:5136 call_04_5136

04:51ae call_04_51ae

04:52b5 jump_table_04_52b5

04:548d data_04_548d
04:548d .text:0006

04:5493 call_04_5493

;; 04:54bd:r_op LOW(call_01_493b)
;; 04:54bf:r_op HIGH(call_01_493b)
;; 04:54c7:r_op BANK(call_01_493b)

;; 04:54d0:r_op LOW(call_01_4a49)
;; 04:54d2:r_op HIGH(call_01_4a49)
;; 04:54da:r_op BANK(call_01_4a49)

04:54e5 data_04_54e5
04:54e5 .data:0050

04:5535 call_04_5535

;; 04:5550:r_op LOW(call_1f_4a64)
;; 04:5552:r_op HIGH(call_1f_4a64)
;; 04:5557:r_op BANK(call_1f_4a64)

;; 04:5577:r_op call_restore_backup_selection
;; 04:557b:r_op BANK(call_restore_backup_selection)

04:55a8 call_04_55a8

;; 04:55c9:r_op LOW(call_1f_4b8c)
;; 04:55cb:r_op HIGH(call_1f_4b8c)
;; 04:55d0:r_op BANK(call_1f_4b8c)

;; 04:55e5:r_op LOW(call_01_5331)
;; 04:55e7:r_op HIGH(call_01_5331)
;; 04:55f5:r_op BANK(call_01_5331)

;; 04:55fe:r_op call_restore_backup_selection
;; 04:5602:r_op BANK(call_restore_backup_selection)

04:5629 call_04_5629

04:5666 call_04_5666

04:56ce data_cloned_instrument_string
04:56ce .text:000d
04:56db data_cloned_phrase_table_string
04:56db .text:000d

04:56e8 call_04_56e8

;; 04:56f5:l_op _SELECT_CURSOR_MODE

;; 04:5718:r_op LOW(call_02_7b9b)
;; 04:571a:r_op HIGH(call_02_7b9b)
;; 04:571d:r_op BANK(call_02_7b9b)

;; 04:576c:r_op LOW(call_02_7b9b)
;; 04:576e:r_op HIGH(call_02_7b9b)
;; 04:5771:r_op BANK(call_02_7b9b)

04:577c call_04_577c

;; 04:5783:r_op LOW(call_01_493b)
;; 04:5785:r_op HIGH(call_01_493b)
;; 04:578f:r_op BANK(call_01_493b)

;; 04:57cf:r_op LOW(call_01_7828)
;; 04:57d1:r_op HIGH(call_01_7828)
;; 04:57d4:r_op BANK(call_01_7828)

04:5881 call_04_5881

04:5925 call_04_5925

04:59c8 call_04_59c8

04:5a6f call_04_5a6f

04:5b06 call_04_5b06

04:5b4e call_04_5b4e

;; 04:5b9e:l_op _SELECT_CURSOR_MODE

;; 04:5bc8:r_op call_restore_backup_selection
;; 04:5bcc:r_op BANK(call_restore_backup_selection)

04:5cc6 jump_table_04_5cc6

;; 04:5dd9:r_op LOW(call_1f_4a64)
;; 04:5ddb:r_op HIGH(call_1f_4a64)
;; 04:5de0:r_op BANK(call_1f_4a64)

;; 04:5e59:r_op LOW(call_01_7655)
;; 04:5e5b:r_op HIGH(call_01_7655)
;; 04:5e63:r_op BANK(call_01_7655)

;; 04:5ecb:r_op LOW(call_1f_6e7d)
;; 04:5ecd:r_op HIGH(call_1f_6e7d)
;; 04:5ed0:r_op BANK(call_1f_6e7d)

;; 04:5f0f:r_op LOW(call_1f_6e7d)
;; 04:5f11:r_op HIGH(call_1f_6e7d)
;; 04:5f14:r_op BANK(call_1f_6e7d)

;; 04:5f82:r_op LOW(call_1f_6e7d)
;; 04:5f84:r_op HIGH(call_1f_6e7d)
;; 04:5f87:r_op BANK(call_1f_6e7d)

;; 04:5fca:r_op LOW(call_read_chain_phrase)
;; 04:5fcc:r_op HIGH(call_read_chain_phrase)
;; 04:5fdd:r_op BANK(call_read_chain_phrase)

;; 04:6048:r_op LOW(call_1f_6e7d)
;; 04:604a:r_op HIGH(call_1f_6e7d)
;; 04:604d:r_op BANK(call_1f_6e7d)

;; 04:6095:r_op LOW(call_read_chain_phrase)
;; 04:6097:r_op HIGH(call_read_chain_phrase)
;; 04:60a4:r_op BANK(call_read_chain_phrase)

04:6170 jump_table_04_6170

;; 04:6237:r_op LOW(call_1f_6bc2)
;; 04:6239:r_op HIGH(call_1f_6bc2)
;; 04:623f:r_op BANK(call_1f_6bc2)

;; 04:63ed:r_op LOW(call_01_7655)
;; 04:63ef:r_op HIGH(call_01_7655)
;; 04:63f7:r_op BANK(call_01_7655)

04:6599 jump_table_04_6599

;; 04:6663:r_op LOW(call_1f_6bc2)
;; 04:6665:r_op HIGH(call_1f_6bc2)
;; 04:666f:r_op BANK(call_1f_6bc2)

;; 04:6820:r_op LOW(call_01_7655)
;; 04:6822:r_op HIGH(call_01_7655)
;; 04:682a:r_op BANK(call_01_7655)

04:69ec jump_table_04_69ec

;; 04:6b0e:r_op LOW(call_1f_6bc2)
;; 04:6b10:r_op HIGH(call_1f_6bc2)
;; 04:6b16:r_op BANK(call_1f_6bc2)

;; 04:6cf9:r_op LOW(call_01_7655)
;; 04:6cfb:r_op HIGH(call_01_7655)
;; 04:6d03:r_op BANK(call_01_7655)

04:6ea7 jump_table_04_6ea7

;; 04:6fd4:r_op LOW(call_1f_6bc2)
;; 04:6fd6:r_op HIGH(call_1f_6bc2)
;; 04:6fde:r_op BANK(call_1f_6bc2)

;; 04:71c2:r_op LOW(call_01_7655)
;; 04:71c4:r_op HIGH(call_01_7655)
;; 04:71cc:r_op BANK(call_01_7655)

;; 04:731b:r_op LOW(call_1f_65f1)
;; 04:731d:r_op HIGH(call_1f_65f1)
;; 04:7320:r_op BANK(call_1f_65f1)

;; 04:7344:r_op LOW(call_1f_6612)
;; 04:7346:r_op HIGH(call_1f_6612)
;; 04:7349:r_op BANK(call_1f_6612)

;; 04:7388:r_op LOW(call_read_chain_phrase)
;; 04:738a:r_op HIGH(call_read_chain_phrase)
;; 04:7398:r_op BANK(call_read_chain_phrase)

;; 04:7407:r_op LOW(call_read_chain_phrase)
;; 04:7409:r_op HIGH(call_read_chain_phrase)
;; 04:7416:r_op BANK(call_read_chain_phrase)

;; 04:745c:r_op _NORMAL_CURSOR_MODE

04:7491 jump_table_04_7491

;; 04:772f:l_op _NO_CURSOR_MODE

;; 04:777e:r_op LOW(call_1f_6633)
;; 04:7780:r_op HIGH(call_1f_6633)
;; 04:7789:r_op BANK(call_1f_6633)

04:77be jump_table_04_77be

;; 04:77f8:r_op LOW(call_1f_6e7d)
;; 04:77fa:r_op HIGH(call_1f_6e7d)
;; 04:77fd:r_op BANK(call_1f_6e7d)

;; 04:7827:r_op LOW(call_02_77e6)
;; 04:7829:r_op HIGH(call_02_77e6)
;; 04:782c:r_op BANK(call_02_77e6)

;; 04:7866:r_op LOW(call_02_7b9b)
;; 04:7868:r_op HIGH(call_02_7b9b)
;; 04:786b:r_op BANK(call_02_7b9b)

;; 04:788f:r_op call_move_screen_left
;; 04:7893:r_op BANK(call_move_screen_left)

;; 04:789c:r_op LOW(call_00_2490)
;; 04:789e:r_op HIGH(call_00_2490)
;; 04:78a1 Unused bank for call_00_2490
;; 04:78a5 Banked call used for call_00_2490 unnecessarily

;; 04:7902:r_op call_move_screen_down
;; 04:7906:r_op BANK(call_move_screen_down)

;; 04:790f:r_op LOW(call_00_2490)
;; 04:7911:r_op HIGH(call_00_2490)
;; 04:7914 Unused bank for call_00_2490
;; 04:7918 Banked call used for call_00_2490 unnecessarily

;; 04:7938:r_op call_move_screen_up
;; 04:793c:r_op BANK(call_move_screen_up)

;; 04:7945:r_op LOW(call_00_2490)
;; 04:7947:r_op HIGH(call_00_2490)
;; 04:794a Unused bank for call_00_2490
;; 04:794d Banked call used for call_00_2490 unnecessarily

;; 04:79fd:r_op call_move_screen_right
;; 04:7a01:r_op BANK(call_move_screen_right)

;; 04:7a0a:r_op call_move_screen_right
;; 04:7a0e:r_op BANK(call_move_screen_right)

;; 04:7a17:r_op LOW(call_00_2490)
;; 04:7a19:r_op HIGH(call_00_2490)
;; 04:7a1e Unused bank for call_00_2490
;; 04:7a22 Banked call used for call_00_2490 unnecessarily

;; 04:7a33:r_op call_move_screen_right
;; 04:7a37:r_op BANK(call_move_screen_right)

;; 04:7a40:r_op LOW(call_00_2490)
;; 04:7a42:r_op HIGH(call_00_2490)
;; 04:7a45 Unused bank for call_00_2490
;; 04:7a49 Banked call used for call_00_2490 unnecessarily

;; 04:7a70:r_op LOW(call_1f_6633)
;; 04:7a72:r_op HIGH(call_1f_6633)
;; 04:7a79:r_op BANK(call_1f_6633)

;; 04:7b4e:r_op LOW(call_1f_6633)
;; 04:7b50:r_op HIGH(call_1f_6633)
;; 04:7b57:r_op BANK(call_1f_6633)

;; 04:7b65:r_op call_write_backup_selection
;; 04:7b69:r_op BANK(call_write_backup_selection)

04:7b9b data_phrase_screen_cancel_select_string
04:7b9b .text:000e
04:7ba9 data_phrase_screen_select_string
04:7ba9 .text:0007

04:7bb0 data_bank_04_padding
;; 04:7bb0 04:7bb0
;; 04:7bb0:replace:0450 ds $8000 - @, $ff

05:4000 call_05_4000

05:4040 call_05_4040

05:4160 data_05_4160
05:4160 .text:0003
05:4163 data_05_4163
05:4163 .text:0004

05:4167 call_update_current_screen
;; 05:4167 Update CURRENT_SCREEN based on the value of CURRENT_SCREEN_ROW and CURRENT_SCREEN_COL.
;; 05:4167 Registers used: A, DE, HL

;; 05:417a Invalid row, do not update CURRENT_SCREEN.

05:417d .jump_handle_row_0

;; 05:418b:r_op _PROJECT_SCREEN

05:4190 .jump_read_synth_screen_col

;; 05:419e:r_op _SYNTH_SCREEN

05:41a3 .jump_set_wave_screen

;; 05:41a6:r_op _WAVE_EDITOR_SCREEN

05:41ab .jump_handle_row_1

;; 05:41ac:r_op _SCREEN_ROW_1_WIDTH
;; 05:41b2 Invalid row 1 column, do not update CURRENT_SCREEN.

;; 05:41b5 Find the jump table address based on the screen column.

05:41bf .jump_table_set_screen

05:41ce .jump_set_song_screen

;; 05:41d1:r_op _SONG_SCREEN

05:41d6 .jump_set_chain_screen

;; 05:41d9:r_op _CHAIN_SCREEN

05:41de .jump_set_phrase_screen

;; 05:41e1:r_op _PHRASE_SCREEN

05:41e6 .jump_set_instrument_screen

;; 05:41e9:r_op _INSTRUMENT_SCREEN

05:41ee .jump_check_current_instrument

;; 05:41f2 Check the current instrument to determine whether we are in the word screen or the table screen.
;; 05:41f2:l_op _SPEECH_INSTRUMENT

;; 05:41f7:r_op _WORD_SCREEN

05:41fc .jump_set_table_screen

;; 05:41fc:r_op _TABLE_SCREEN

05:41fe .jump_set_word_table_screen

05:4205 .jump_handle_row_2

;; 05:4208:r_op _GROOVE_SCREEN

05:420a .jump_return

05:420c call_set_screen_move_direction
;; 05:420c Set SCREEN_MOVE_DIRECTION and reset rSCX/rSCY.
;; 05:420c Args: direction (see screen move constants)
;; 05:420c Registers used: A, H

05:421a call_cancel_selection
;; 05:421a Cancel the current selection and restore the backup.
;; 05:421a Registers used:  A, HL

;; 05:421f:l_op _SELECT_CURSOR_MODE

;; 05:4221 Do nothing if not in select mode

;; 05:4228:r_op BANK(call_restore_backup_selection)
;; 05:422c Banked call used for call_restore_backup_selection unnecessarily

05:4231 .jump_return

05:4233 call_move_screen_left
;; 05:4233 Move the current screen left.
;; 05:4233 Registers used: A, DE, HL

05:4243 .jump_update_current_screen

;; 05:4246:r_op _SCREEN_MOVE_LEFT

05:4253 call_move_screen_right
;; 05:4253 Move the current screen right.
;; 05:4253 Registers used: A, DE, HL

;; 05:425d:r_op _SCREEN_MOVE_RIGHT

05:426a call_move_screen_up
;; 05:426a Move the current screen up.
;; 05:426a Registers used: A, DE, HL

05:427a .jump_update_current_screen

;; 05:427d:r_op _SCREEN_MOVE_UP

05:4287 call_move_screen_down
;; 05:4287 Move the current screen down.
;; 05:4287 Registers used: A, DE, HL

;; 05:428f:l_op _SCREEN_ROWS

05:4297 .jump_update_current_screen

;; 05:429a:r_op _SCREEN_MOVE_DOWN

05:42a4 call_05_42a4

05:42d5 data_05_42d5
05:42d5 .data:0006
05:42db data_05_42db
05:42db .data:000c

05:42e7 call_read_table_command
;; 05:42e7 Read a table command based on SRAM_TABLE_COMMANDS_* and CURRENT_TABLE_SCREEN.
;; 05:42e7 Args: row
;; 05:42e7 Registers used: A, DE, HL

;; 05:42fb:l_op _TABLE_ROWS

05:4303 .jump_verify_table_screen

;; 05:4307:l_op _TABLES

05:430f .jump_calculate_address_1
;; 05:4315 The loop below will shift the table number left 4 times, multiplying it by 16.
05:4319 .jump_calculate_address_2
05:431e .jump_calculate_address_3

;; 05:433c Assume that the banks for all table commands are the same
;; 05:433c:r_op _SRAM_TABLE_COMMANDS_1_BANK

05:435b .jump_return

05:4360 call_write_table_vol_value
;; 05:4360 Write a value to a table volume row.
;; 05:4360 Args: row, value
;; 05:4360 Registers used: A, DE, HL

;; 05:4366:l_op _TABLE_ROWS

05:436e .jump_verify_table_screen

;; 05:4372:l_op _TABLES

05:437a .jump_calculate_address_1
;; 05:4380 The loop below will shift the table number left 4 times, multiplying it by 16.

05:4384 .jump_calculate_address_2
05:4389 .jump_calculate_address_3

;; 05:438c:r_op _SRAM_TABLE_VOLS
;; 05:43a4 Write volume value
;; 05:43aa:r_op _SRAM_TABLE_VOLS_BANK

;; 05:43b3  Return

05:43b7 call_write_table_command
;; 05:43b7 Write a table command given CURRENT_TABLE_SCREEN and SRAM_TABLE_COMMANDS_*.
;; 05:43b7 Args: row, value
;; 05:43b7 Registers used: A, DE, HL

;; 05:43cb:l_op _TABLE_ROWS

05:43d3 .jump_validate_table

;; 05:43d7:l_op _TABLES

05:43df .jump_validate_value

05:43eb .jump_calculate_address_1

;; 05:43f1 In the next loop, the current table will be shifted left 3 times, multiplying it by 16.

05:43f5 .jump_calculate_address_2

05:43fa .jump_calculate_address_3

;; 05:4417 Write table command

;; 05:441d Assume that table commands 1 and 2 are in the same bank
;; 05:441d:r_op _SRAM_TABLE_COMMANDS_1_BANK

;; 05:4426 Return

05:442a call_write_table_command_value
;; 05:442a Write a table command value based on CURRENT_TABLE_SCREEN and SRAM_TABLE_COMMAND_VALUES_*.
;; 05:442a Args: row, value

;; 05:443e:l_op _TABLE_ROWS

05:4446 .jump_verify_table

;; 05:444a:l_op _TABLES

05:4452 .jump_calculate_address_1

;; 05:4458 The following loop rotates the current table left 4 times, multiplying it by 16.

05:445c .jump_calculate_address_2
05:4461 .jump_calculate_address_3

;; 05:447e Write the table command value
;; 05:4484 Assume that the bank for command values 1 and 2 are in the same bank
;; 05:4484:r_op _SRAM_TABLE_COMMAND_VALUES_1_BANK

;; 05:448d Return

05:4491 call_write_table_transpose_value
;; 05:4491 Write a transpose value to a row in a table.
;; 05:4491 Args: row, value
;; 05:4491 Registers used: A, DE, HL

;; 05:4497:l_op _TABLE_ROWS

05:449f .jump_verify_current_table

;; 05:44a3:l_op _TABLES

05:44ab .jump_calculate_address_1
;; 05:44b1 The following loop will rotate CURRENT_TABLE_SCREEN left 4 times, multiplying it by 16.

05:44b5 .jump_calculate_address_2
05:44ba .jump_calculate_address_3

;; 05:44bd:r_op _SRAM_TABLE_TRANSPOSE
;; 05:44d5 Write transpose value
;; 05:44db:r_op _SRAM_TABLE_TRANSPOSE_BANK

;; 05:44e4 Return

05:44e8 call_read_table_vol_value
;; 05:44e8 Read a table volume value from a row in the current table.
;; 05:44e8 Args: row
;; 05:44e8 Result: E
;; 05:44e8 Registers used: A, DE, HL

;; 05:44ee:l_op _TABLE_ROWS

05:44f6 .jump_verify_table

;; 05:44fa:l_op _TABLES

05:4502 .jump_calculate_address_1

;; 05:4508 The following loop rotates the table left 4 times, multiplying it by 16.

05:450c .jump_calculate_address_2
05:4511 .jump_calculate_address_3

;; 05:4514:r_op _SRAM_TABLE_VOLS
;; 05:452a Read the table vol value
;; 05:452d:r_op _SRAM_TABLE_VOLS_BANK

;; 05:4537 Return

05:453b call_read_table_command_value
;; 05:453b Read a command value from a row in a table.
;; 05:453b Args: table, row
;; 05:453b Result: E
;; 05:453b Registers used: A, DE, HL

;; 05:454f:l_op _TABLE_ROWS

05:4557 .jump_verify_table

;; 05:455b:l_op _TABLES

05:4563 .jump_calculate_address_1

;; 05:4569 The following loop rotates the table left 4 times, multiplying it by 16.

05:456d .jump_calculate_address_2
05:4572 .jump_calculate_address_3

;; 05:458f Read the table command value

;; 05:459a Return

05:459e call_read_table_transpose_value
;; 05:459e Read a table transpose value for on a certain row in the current table.
;; 05:459e Args: row
;; 05:459e Result: E
;; 05:459e Registers used: A, DE, HL

;; 05:45a4:l_op _TABLE_ROWS

05:45ac .jump_verify_table

;; 05:45b0:l_op _TABLES

05:45b8 .jump_calculate_address_1

;; 05:45be The following loop will shift the table number left 4 times, multiplying it by 16.

05:45c2 .jump_calculate_address_2
05:45c7 .jump_calculate_address_3

;; 05:45ca:r_op _SRAM_TABLE_TRANSPOSE
;; 05:45e0 Read the table transpose value
;; 05:45e3:r_op _SRAM_TABLE_TRANSPOSE_BANK

;; 05:45ed Return

05:45f1 call_05_45f1

;; 05:4601:l_op _SELECT_CURSOR_MODE

05:4668 call_05_4668
;; 05:4680:r_op _SRAM_TABLE_VOLS
;; 05:468a:r_op _SRAM_TABLE_TRANSPOSE
;; 05:4694:r_op _SRAM_TABLE_COMMANDS_1
;; 05:469e:r_op _SRAM_TABLE_COMMANDS_2
;; 05:46a8:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 05:46c4 TODO: determine which bank number below is used for which SRAM value above

05:472b call_05_472b

05:4762 call_05_4762

;; 05:47b3:r_op LOW(call_01_6d5c)
;; 05:47b5:r_op HIGH(call_01_6d5c)
;; 05:47b8:r_op BANK(call_01_6d5c)

;; 05:4912:r_op LOW(call_1f_6ff1)
;; 05:4914:r_op HIGH(call_1f_6ff1)
;; 05:4917:r_op BANK(call_1f_6ff1)

;; 05:4924:l_op _SELECT_CURSOR_MODE

05:4930 call_05_4930

05:4967 call_05_4967

05:4aa8 call_05_4aa8

;; 05:4aaf:l_op _SELECT_CURSOR_MODE

05:4b2a jump_table_05_4b2a

05:4b5d call_05_4b5d

;; 05:4c0f:l_op _SELECT_CURSOR_MODE

;; 05:4c28:r_op BANK(call_restore_backup_selection)
;; 05:4c2c Banked call used for call_restore_backup_selection unnecessarily

;; 05:4c39:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 05:4c3b:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 05:4c3e:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 05:4c4b:r_op BANK(call_05_4040)
;; 05:4c4f Banked call used for call_05_4040 unnecessarily

;; 05:4c74:l_op _SELECT_CURSOR_MODE

;; 05:4d92:r_op LOW(call_01_7655)
;; 05:4d94:r_op HIGH(call_01_7655)
;; 05:4d9e:r_op BANK(call_01_7655)

;; 05:4e64:l_op _SELECT_CURSOR_MODE

05:4ed7 jump_table_05_4ed7

05:4f46 jump_table_05_4f46

;; 05:5088:r_op LOW(call_01_7655)
;; 05:508a:r_op HIGH(call_01_7655)
;; 05:5092:r_op BANK(call_01_7655)

;; 05:5192:l_op _SELECT_CURSOR_MODE

05:5205 jump_table_05_5205

05:5274 jump_table_05_5274

;; 05:53b6:r_op LOW(call_01_7655)
;; 05:53b8:r_op HIGH(call_01_7655)
;; 05:53c0:r_op BANK(call_01_7655)

;; 05:54ac:l_op _SELECT_CURSOR_MODE

05:551f jump_table_05_551f

05:558e jump_table_05_558e

;; 05:56d8:r_op LOW(call_01_7655)
;; 05:56da:r_op HIGH(call_01_7655)
;; 05:56e2:r_op BANK(call_01_7655)

;; 05:5802:l_op _SELECT_CURSOR_MODE

05:5875 jump_table_05_5875

05:58e4 jump_table_05_58e4

;; 05:5a30:r_op LOW(call_01_7655)
;; 05:5a32:r_op HIGH(call_01_7655)
;; 05:5a3a:r_op BANK(call_01_7655)

;; 05:5bcc:r_op _NORMAL_CURSOR_MODE

05:5c01 jump_table_05_5c01

;; 05:5dc6:l_op _NO_CURSOR_MODE

;; 05:5dd7:l_op _SELECT_CURSOR_MODE

;; 05:5e26:r_op LOW(call_02_77e6)
;; 05:5e28:r_op HIGH(call_02_77e6)
;; 05:5e2b:r_op BANK(call_02_77e6)

;; 05:5e4e:r_op LOW(call_02_7b9b)
;; 05:5e50:r_op HIGH(call_02_7b9b)
;; 05:5e53:r_op BANK(call_02_7b9b)

;; 05:5e6d:r_op BANK(call_move_screen_up)
;; 05:5e71 Banked call used for call_move_screen_up unnecessarily

;; 05:5e7a Unused bank for call_00_2490
;; 05:5e7e Banked call used for call_00_2490 unnecessarily

;; 05:5ebd:r_op _SRAM_TABLE_COMMANDS_1
;; 05:5ee6:r_op _SRAM_TABLE_COMMANDS_1_BANK
;; 05:5efb:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 05:5f1a:r_op _SRAM_TABLE_COMMAND_VALUES_1_BANK

;; 05:5f5b:r_op _SRAM_TABLE_COMMANDS_2
;; 05:5f84:r_op _SRAM_TABLE_COMMANDS_2_BANK

;; 05:5f99:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 05:5fb8:r_op _SRAM_TABLE_COMMAND_VALUES_2_BANK

;; 05:5fcd:r_op BANK(call_move_screen_down)
;; 05:5fd1 Banked call used for call_move_screen_down unnecessarily

;; 05:5fda Unused bank for call_00_2490
;; 05:5fde Banked call used for call_00_2490 unnecessarily

;; 05:5ff4:r_op BANK(call_move_screen_left)
;; 05:5ff8 Banked call used for call_move_screen_left unnecessarily

;; 05:5ffd:r_op LOW(call_00_2490)
;; 05:5fff:r_op HIGH(call_00_2490)
;; 05:6002 Unused bank for call_00_2490
;; 05:6006 Banked call used for call_00_2490 unnecessarily

;; 05:6014:l_op _SELECT_CURSOR_MODE

;; 05:603b:l_op _SELECT_CURSOR_MODE

;; 05:6105:r_op BANK(call_write_backup_selection)
;; 05:6109 Banked call used for call_write_backup_selection unnecessarily

05:612e data_table_screen_cancel_select_string
05:612e .text:000e
05:613c data_table_screen_select_string
05:613c .text:0007

05:6143 call_05_6143

;; 05:616f:r_op _NORMAL_CURSOR_MODE

05:624b jump_table_05_624b

;; 05:63fe:r_op LOW(call_1c_717c)
;; 05:6400:r_op HIGH(call_1c_717c)
;; 05:6403:r_op BANK(call_1c_717c)

05:6413 data_table_screen_cut_string
05:6413 .text:0004
05:6417 data_table_screen_copy_string
05:6417 .text:0005

05:641c call_05_641c

05:6512 jump_table_05_6512

05:66dd data_05_66dd
05:66dd .text:0006

05:66e3 call_05_66e3

05:6936 call_05_6936

05:6967 jump_table_05_6967

05:6991 jump_table_05_6991

05:6a5c jump_table_05_6a5c

05:6b3c jump_table_05_6b3c

05:6c07 jump_table_05_6c07

05:6c9e data_instrument_help_strings
05:6c9e data_envelope_stage_1_instrument_help_string
05:6c9e .text:004d
05:6ceb data_envelope_stage_2_instrument_help_string
05:6ceb .text:004d
05:6d38 data_envelope_stage_3_instrument_help_string
05:6d38 .text:004d
05:6d85 data_pan_instrument_help_string
05:6d85 .text:0015
05:6d9a data_length_instrument_help_string
05:6d9a .text:0014
05:6dae data_pitch_instrument_help_string
05:6dae .text:0080
05:6e2e data_transpose_instrument_help_string
05:6e2e .text:0012
05:6e40 data_command_rate_instrument_help_string
05:6e40 .text:002a
05:6e6a data_table_rate_instrument_help_string
05:6e6a .text:0030
05:6e9a data_amplitude_instrument_help_string
05:6e9a .text:0017
05:6eb1 data_type_instrument_help_string
05:6eb1 .text:0034
05:6ee5 data_pulse_width_instrument_help_string
05:6ee5 .text:0019
05:6efe data_sweep_instrument_help_string
05:6efe .text:0034
05:6f32 data_transpose_pulse2_instrument_help_string
05:6f32 .text:0012
05:6f44 data_finetune_instrument_help_string
05:6f44 .text:0019
05:6f5d data_synth_finetune_instrument_help_string
05:6f5d .text:000f
05:6f6c data_synth_manual_wave_instrument_help_string
05:6f6c .text:000d
05:6f79 data_synth_num_instrument_help_string
05:6f79 .text:0023
05:6f9c data_synth_type_instrument_help_string
05:6f9c .text:0092
05:702e data_synth_speed_instrument_help_string
05:702e .text:000b
05:7039 data_synth_length_instrument_help_string
05:7039 .text:0010
05:7049 data_synth_loop_pos_instrument_help_string
05:7049 .text:0013
05:705c data_kit_num_left_instrument_help_string
05:705c .text:0012
05:706e data_kit_num_right_instrument_help_string
05:706e .text:0013
05:7081 data_kit_finetune_instrument_help_string
05:7081 .text:000c
05:708d data_kit_offset_instrument_help_string
05:708d .text:001a
05:70a7 data_kit_length_instrument_help_string
05:70a7 .text:001b
05:70c2 data_kit_loop_instrument_help_string
05:70c2 .text:0046
05:7108 data_wave_speed_instrument_help_string
05:7108 .text:0010
05:7118 data_kit_clip_instrument_help_string
05:7118 .text:002f
05:7147 data_noise_pitch_type_instrument_help_string
05:7147 .text:0026
05:716d data_vibrato_instrument_help_string
05:716d .text:0014

05:7181 call_05_7181

05:7199 jump_table_05_7199

05:721c data_synth_help_strings
05:721c data_signal_synth_help_string
05:721c .text:0036
05:7252 data_filter_synth_help_string
05:7252 .text:002b
05:727d data_distortion_synth_help_string
05:727d .text:005d
05:72da data_phase_synth_help_string
05:72da .text:001b
05:72f5 data_volume_synth_help_string
05:72f5 .text:000e
05:7303 data_cutoff_synth_help_string
05:7303 .text:0018
05:731b data_q_synth_help_string
05:731b .text:0039
05:7354 data_vshift_synth_help_string
05:7354 .text:000f
05:7363 data_limit_synth_help_string
05:7363 .text:0055

05:73b8 call_write_backup_selection
;; 05:73b8 Backup the current selection, for use when cancelling a selection.
;; 05:73b8 Sets the cursor mode to selection mode.
;; 05:73b8 Sets the selection screen to the current screen.
;; 05:73b8 Registers used: A, HL

;; 05:73eb:r_op _SELECT_CURSOR_MODE

05:73f6 call_restore_backup_selection
;; 05:73f6 Restore the backed up selection when cancelling the current selection.
;; 05:73f6 Registers used: A, HL

05:7427 data_bank_05_padding
;; 05:7427 05:7427
;; 05:7427:replace:0bd9 ds $8000 - @, $ff

06:4000 call_06_4000

06:4022 data_06_4022
06:4022 .data:0004

06:4026 call_06_4026

06:405d call_read_word_value
;; 06:405d Read a byte from the word at the current speech/word cursor position.
;; 06:405d Result: E
;; 06:405d Registers used: A, DE, HL

;; 06:4066 The following loop will rotate the speech cursor left 5 times, multiplying it by 32.

06:406a .jump_calculate_address_1
06:406f .jump_calculate_address_2

;; 06:4072:r_op _SRAM_SPEECH_WORDS
;; 06:40a0 Read the word value
;; 06:40a5:r_op _SRAM_SPEECH_WORDS_BANK

;; 06:40af Return

06:40b3 call_write_word_value
;; 06:40b3 Write a byte to the word at the current speech/word cursor position.
;; 06:40b3 Args: value
;; 06:40b3 Registers used: A, DE, HL

;; 06:40bc The following loop will rotate the current speech cursor row left 5 times, multiplying it by 32.

06:40c0 .jump_calculate_address_1
06:40c5 .jump_calculate_address_2

;; 06:40c8:r_op _SRAM_SPEECH_WORDS
;; 06:40f6 Read the speech word value
;; 06:4101:r_op _SRAM_SPEECH_WORDS_BANK

;; 06:410a Return

06:410e call_06_410e

06:414f call_06_414f

06:41a2 call_06_41a2

;; 06:41a5:r_op LOW(call_01_6d5c)
;; 06:41a7:r_op HIGH(call_01_6d5c)
;; 06:41aa:r_op BANK(call_01_6d5c)

;; 06:41de:r_op _SRAM_SPEECH_WORD_NAMES
;; 06:41f9:r_op _SRAM_SPEECH_WORD_NAMES_BANK

;; 06:4222:r_op LOW(call_1f_6ff1)
;; 06:4224:r_op HIGH(call_1f_6ff1)
;; 06:4227:r_op BANK(call_1f_6ff1)

;; 06:4242:r_op _SRAM_SPEECH_WORDS
;; 06:427a:r_op _SRAM_SPEECH_WORDS_BANK

06:42fb data_text_to_speech_screen_strings
06:42fb data_text_to_speech_word_string
06:42fb .text:006
06:4301 data_text_to_speech_empty_string
06:4301 .text:005

06:4306 call_06_4306

06:431d call_06_431d

;; 06:4416:l_op _SELECT_CURSOR_MODE

;; 06:4426:r_op _NORMAL_CURSOR_MODE

;; 06:47ed:r_op call_move_screen_left
;; 06:47f1:r_op BANK(call_move_screen_left)

;; 06:47fa:r_op LOW(call_00_2490)
;; 06:47fc:r_op HIGH(call_00_2490)
;; 06:47ff Unused bank for call_00_2490
;; 06:4803 Banked call used for call_00_2490 unnecessarily

;; 06:4815:r_op call_move_screen_up
;; 06:4819:r_op BANK(call_move_screen_up)

;; 06:4822:r_op LOW(call_00_2490)
;; 06:4824:r_op HIGH(call_00_2490)
;; 06:4827 Unused bank for call_00_2490
;; 06:482b Banked call used for call_00_2490 unnecessarily

;; 06:483d:r_op call_move_screen_down
;; 06:4841:r_op BANK(call_move_screen_down)

;; 06:484a:r_op LOW(call_00_2490)
;; 06:484c:r_op HIGH(call_00_2490)
;; 06:484f Unused bank for call_00_2490
;; 06:4853 Banked call used for call_00_2490 unnecessarily

;; 06:486a:r_op LOW(call_02_77e6)
;; 06:486c:r_op HIGH(call_02_77e6)
;; 06:486f:r_op BANK(call_02_77e6)

;; 06:4892:r_op LOW(call_02_7b9b)
;; 06:4894:r_op HIGH(call_02_7b9b)
;; 06:4897:r_op BANK(call_02_7b9b)

06:48ab call_06_48ab

06:48e9 call_06_48e9

06:493c call_read_wave_sample
;; 06:493c Reads a single sample from the current synth wave frame.
;; 06:493c Args: sample
;; 06:493c Result: E
;; 06:493c Registers used: A, DE, HL

;; 06:4942:l_op _FRAME_SAMPLES

06:494a .jump_calculate_address_1
;; 06:4958 The following loop shifts the current wave frame left 4 times, multiplying it by 16
06:495c .jump_calculate_address_2
06:4961 .jump_calculate_address_3

;; 06:4966:r_op _SRAM_WAVE_FRAMES
;; 06:4988 Read the wave frame
;; 06:4989:r_op _SRAM_WAVE_FRAMES_BANK

;; 06:4993 Check if we are reading an even or odd byte

06:49a3 .jump_handle_odd_byte

06:49ab .jump_return
;; 06:49ab Mask the value so only the first character of the byte is returned

06:49b4 call_06_49b4
;; 06:49d4:r_op _SRAM_WAVE_FRAMES
;; 06:4a05:r_op _SRAM_WAVE_FRAMES_BANK

06:4a5a call_06_4a5a

06:4ac0 call_06_4ac0

;; 06:4ad7:l_op _SELECT_CURSOR_MODE

06:4aea call_06_4aea

;; 06:4b13:l_op _SELECT_CURSOR_MODE

06:4b51 call_06_4b51

06:4bff call_06_4bff

06:4e56 call_06_4e56

06:4e67 call_06_4e67

06:4eac call_06_4eac

06:4ec2 call_06_4ec2

;; 06:4eca:r_op BANK(call_01_6d5c)
;; 06:4ece:r_op LOW(call_01_6d5c)
;; 06:4ed0:r_op HIGH(call_01_6d5c)

;; 06:4edd:r_op call_05_4040
;; 06:4ee1:r_op BANK(call_05_4040)

06:4eec call_06_4eec

06:4f53 call_06_4f53

06:4fa5 call_06_4fa5

06:4ff8 call_06_4ff8

06:5029 call_06_5029

;; 06:5099:l_op _SELECT_CURSOR_MODE

;; 06:50a6:r_op call_restore_backup_selection
;; 06:50aa:r_op BANK(call_restore_backup_selection)

;; 06:5127:l_op _SELECT_CURSOR_MODE

;; 06:5144:l_op _SELECT_CURSOR_MODE

;; 06:51c8:r_op LOW(call_02_77e6)
;; 06:51ca:r_op HIGH(call_02_77e6)
;; 06:51cd:r_op BANK(call_02_77e6)

;; 06:51f0:r_op LOW(call_02_7b9b)
;; 06:51f2:r_op HIGH(call_02_7b9b)
;; 06:51f5:r_op BANK(call_02_7b9b)

;; 06:5225:r_op call_move_screen_left
;; 06:5229:r_op BANK(call_move_screen_left)

;; 06:5232:r_op LOW(call_00_2490)
;; 06:5234:r_op HIGH(call_00_2490)
;; 06:5237 Unused bank for call_00_2490
;; 06:523b Banked call used for call_00_2490 unnecessarily

;; 06:5252:r_op call_move_screen_down
;; 06:5256:r_op BANK(call_move_screen_down)

;; 06:525f:r_op LOW(call_00_2490)
;; 06:5261:r_op HIGH(call_00_2490)
;; 06:5264 Unused bank for call_00_2490
;; 06:5268 Banked call used for call_00_2490 unnecessarily

;; 06:5288:l_op _NO_CURSOR_MODE
;; 06:528d:l_op _NORMAL_CURSOR_MODE
;; 06:5292:l_op _SELECT_CURSOR_MODE

;; 06:529a:r_op call_write_backup_selection
;; 06:529e:r_op BANK(call_write_backup_selection)

;; 06:52d1:l_op _SELECT_CURSOR_MODE

;; 06:52f7:l_op _NORMAL_CURSOR_MODE

06:532d data_wave_screen_cancel_select_string
06:532d .text:000e
06:533b data_wave_screen_select_string
06:533b .text:0007

06:5342 call_06_5342

;; 06:53fd:r_op _NORMAL_CURSOR_MODE

;; 06:53ff:r_op LOW(call_1c_717c)
;; 06:5401:r_op HIGH(call_1c_717c)
;; 06:5404:r_op BANK(call_1c_717c)

06:5411 data_wave_screen_copy_string
06:5411 .text:0005

06:5416 call_06_5416

06:549e data_06_549e
06:549e .text:0006

06:54a4 call_06_54a4

06:54b9 data_06_54b9
06:54b9 .data:0002

06:54bb call_06_54bb

;; 06:54c5:r_op LOW(call_read_chain_phrase)
;; 06:54c7:r_op HIGH(call_read_chain_phrase)
;; 06:54d7:r_op BANK(call_read_chain_phrase)

06:550d call_06_550d

06:55d0 call_06_55d0

06:55fc data_06_55fc
06:55fc .text:0003

06:55ff call_write_chain_transpose
;; 06:55ff Write a transpose value to a chain row.
;; 06:55ff Args: chain, row, transpose
;; 06:55ff Registers used: A, DE, HL

;; 06:5605:l_op _CHAINS

06:560d .jump_verify_row

;; 06:5610:l_op _CHAIN_ROWS

06:5618 .jump_calculate_address_1

;; 06:561d The following loop shifts the chain left 4 times, multiplying it by 16.

06:5621 .jump_calculate_address_2
06:5626 .jump_calculate_address_3

;; 06:5629:r_op _SRAM_CHAIN_TRANSPOSES
;; 06:5644 Write transpose
;; 06:5647:r_op _SRAM_CHAIN_TRANSPOSES_BANK

;; 06:5650 Return

06:5654 call_read_chain_transpose
;; 06:5654 Read a transpose value from a chain row.
;; 06:5654 Args: cahin, row
;; 06:5654 Result: E
;; 06:5654 Registers used: A, DE, HL

;; 06:565a:l_op _CHAINS

06:5662 .jump_calculate_address_1

;; 06:5667 The next loop rotates the chain number left 4 times, multiplying it by 16.

06:566b .jump_calculate_address_2
06:5670 .jump_calculate_address_3

;; 06:5673:r_op _SRAM_CHAIN_TRANSPOSES
;; 06:568b Read the chain transpose value
;; 06:568c:r_op _SRAM_CHAIN_TRANSPOSES_BANK

;; 06:5696 Return

06:569a call_06_569a
;; 06:5702:r_op _SRAM_PHRASE_INSTRUMENTS
;; 06:5719:r_op _SRAM_BOOKMARKS
;; 06:5737:r_op _SRAM_PHRASE_INSTRUMENTS
;; 06:574e:r_op _SRAM_BOOKMARKS

06:583a data_cloned_phrase_string
06:583a .text:000e

06:5848 call_06_5848

06:589c call_06_589c
;; 06:58b1:r_op _SRAM_CHAIN_PHRASES
;; 06:58cd:r_op _SRAM_CHAIN_PHRASES_BANK
;; 06:58db:r_op _SRAM_CHAIN_PHRASES_BANK

06:58e8 call_06_58e8

;; 06:590d:r_op LOW(call_01_6d5c)
;; 06:590f:r_op HIGH(call_01_6d5c)
;; 06:5912:r_op BANK(call_01_6d5c)

;; 06:59ed:r_op LOW(call_1f_6ff1)
;; 06:59ef:r_op HIGH(call_1f_6ff1)
;; 06:59f2:r_op BANK(call_1f_6ff1)

06:59ff data_06_59ff
06:59ff .text:0004

06:5a03 call_06_5a03

06:5a5f call_06_5a5f

06:5aa1 call_06_5aa1

;; 06:5acc:l_op _SELECT_CURSOR_MODE

;; 06:5af6:r_op call_restore_backup_selection
;; 06:5afa:r_op BANK(call_restore_backup_selection)

;; 06:5b0b:r_op call_copy_current_screen_bg_tile_page
;; 06:5b0f:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 06:5b18:r_op call_05_4040
;; 06:5b1c:r_op BANK(call_05_4040)

;; 06:5bad:r_op LOW(call_01_4eb3)
;; 06:5baf:r_op HIGH(call_01_4eb3)
;; 06:5bb2:r_op BANK(call_01_4eb3)

;; 06:5bc6:r_op LOW(call_read_chain_phrase)
;; 06:5bc8:r_op HIGH(call_read_chain_phrase)
;; 06:5bd9:r_op BANK(call_read_chain_phrase)

;; 06:5c0f:r_op LOW(call_01_4eb3)
;; 06:5c11:r_op HIGH(call_01_4eb3)
;; 06:5c14:r_op BANK(call_01_4eb3)

;; 06:5c28:r_op LOW(call_01_4cfb)
;; 06:5c2a:r_op HIGH(call_01_4cfb)
;; 06:5c32:r_op BANK(call_01_4cfb)

;; 06:5c43:r_op LOW(call_write_chain_phrase)
;; 06:5c45:r_op HIGH(call_write_chain_phrase)
;; 06:5c5b:r_op BANK(call_write_chain_phrase)

;; 06:5e92:r_op LOW(call_read_chain_phrase)
;; 06:5e95:r_op HIGH(call_read_chain_phrase)
;; 06:5eb0:r_op BANK(call_read_chain_phrase)

;; 06:5edb:r_op LOW(call_write_chain_phrase)
;; 06:5ede:r_op HIGH(call_write_chain_phrase)
;; 06:5efe:r_op BANK(call_write_chain_phrase)

;; 06:6084:r_op LOW(call_read_chain_phrase)
;; 06:6087:r_op HIGH(call_read_chain_phrase)
;; 06:60a5:r_op BANK(call_read_chain_phrase)

;; 06:60fd:r_op LOW(call_write_chain_phrase)
;; 06:6100:r_op HIGH(call_write_chain_phrase)
;; 06:6123:r_op BANK(call_write_chain_phrase)

;; 06:62ce:r_op LOW(call_read_chain_phrase)
;; 06:62d1:r_op HIGH(call_read_chain_phrase)
;; 06:62ef:r_op BANK(call_read_chain_phrase)

;; 06:630b:r_op LOW(call_write_chain_phrase)
;; 06:630e:r_op HIGH(call_write_chain_phrase)
;; 06:6331:r_op BANK(call_write_chain_phrase)

;; 06:64d6:r_op LOW(call_read_chain_phrase)
;; 06:64d9:r_op HIGH(call_read_chain_phrase)
;; 06:64f7:r_op BANK(call_read_chain_phrase)

;; 06:654f:r_op LOW(call_write_chain_phrase)
;; 06:6552:r_op HIGH(call_write_chain_phrase)
;; 06:6575:r_op BANK(call_write_chain_phrase)

;; 06:679e:r_op _NORMAL_CURSOR_MODE

;; 06:67c8:r_op LOW(call_read_chain_phrase)
;; 06:67ca:r_op HIGH(call_read_chain_phrase)
;; 06:67db:r_op BANK(call_read_chain_phrase)

;; 06:6841:r_op LOW(call_write_chain_phrase)
;; 06:6843:r_op HIGH(call_write_chain_phrase)
;; 06:6858:r_op BANK(call_write_chain_phrase)

;; 06:688f:l_op _NO_CURSOR_MODE

;; 06:68ec:r_op LOW(call_read_chain_phrase)
;; 06:68ee:r_op HIGH(call_read_chain_phrase)
;; 06:68ff:r_op BANK(call_read_chain_phrase)

;; 06:690b:r_op call_restore_backup_selection
;; 06:690f:r_op BANK(call_restore_backup_selection)

;; 06:6925:r_op LOW(call_01_4eb3)
;; 06:6927:r_op HIGH(call_01_4eb3)
;; 06:692c:r_op BANK(call_01_4eb3)

;; 06:694d:r_op LOW(call_write_chain_phrase)
;; 06:694f:r_op HIGH(call_write_chain_phrase)
;; 06:6965:r_op BANK(call_write_chain_phrase)

;; 06:6999:r_op LOW(call_01_75c6)
;; 06:699b:r_op HIGH(call_01_75c6)
;; 06:699e:r_op BANK(call_01_75c6)

;; 06:69d0:r_op LOW(call_02_77e6)
;; 06:69d2:r_op HIGH(call_02_77e6)
;; 06:69d5:r_op BANK(call_02_77e6)

;; 06:6a17:r_op LOW(call_read_chain_phrase)
;; 06:6a19:r_op HIGH(call_read_chain_phrase)
;; 06:6a32:r_op BANK(call_read_chain_phrase)

;; 06:6a52:r_op BANK(call_read_chain_phrase)

;; 06:6a67:r_op LOW(call_02_7b9b)
;; 06:6a69:r_op HIGH(call_02_7b9b)
;; 06:6a6c:r_op BANK(call_02_7b9b)

;; 06:6a99:r_op LOW(call_01_761f)
;; 06:6a9b:r_op HIGH(call_01_761f)
;; 06:6a9e:r_op BANK(call_01_761f)

;; 06:6aac:r_op call_move_screen_right
;; 06:6ab0:r_op BANK(call_move_screen_right)

;; 06:6ab9:r_op LOW(call_00_2490)
;; 06:6abb:r_op HIGH(call_00_2490)
;; 06:6abe Unused bank for call_00_2490
;; 06:6ac2 Banked call used for call_00_2490 unnecessarily

;; 06:6ae2:r_op call_move_screen_left
;; 06:6ae6:r_op BANK(call_move_screen_left)

;; 06:6aef:r_op LOW(call_00_2490)
;; 06:6af1:r_op HIGH(call_00_2490)
;; 06:6af4 Unused bank for call_00_2490
;; 06:6af8 Banked call used for call_00_2490 unnecessarily

;; 06:6b1b:r_op call_move_screen_up
;; 06:6b1f:r_op BANK(call_move_screen_up)

;; 06:6b28:r_op LOW(call_00_2490)
;; 06:6b2a:r_op HIGH(call_00_2490)
;; 06:6b2d Unused bank for call_00_2490
;; 06:6b31 Banked call used for call_00_2490 unnecessarily

;; 06:6b51:r_op call_move_screen_down
;; 06:6b55:r_op BANK(call_move_screen_down)

;; 06:6b5e:r_op LOW(call_00_2490)
;; 06:6b60:r_op HIGH(call_00_2490)
;; 06:6b63 Unused bank for call_00_2490
;; 06:6b67 Banked call used for call_00_2490 unnecessarily

;; 06:6c76:r_op call_write_backup_selection
;; 06:6c7a:r_op BANK(call_write_backup_selection)

06:6cb1 data_chain_screen_cancel_select_string
06:6cb1 .text:000e
06:6cbf data_chain_screen_select_string
06:6cbf .text:0007

06:6cc6 call_06_6cc6

;; 06:6cd8:r_op _NORMAL_CURSOR_MODE

;; 06:6d76:r_op LOW(call_read_chain_phrase)
;; 06:6d79:r_op HIGH(call_read_chain_phrase)
;; 06:6d94:r_op BANK(call_read_chain_phrase)

;; 06:6dba:r_op LOW(call_write_chain_phrase)
;; 06:6dbd:r_op HIGH(call_write_chain_phrase)
;; 06:6ddc:r_op BANK(call_write_chain_phrase)

;; 06:6e35:r_op LOW(call_1c_717c)
;; 06:6e37:r_op HIGH(call_1c_717c)
;; 06:6e3a:r_op BANK(call_1c_717c)

06:6e74 data_chain_screen_cut_string
06:6e74 .text:0005
06:6e79 data_chain_screen_copy_string
06:6e79 .text:0005

06:6e7e call_06_6e7e

;; 06:6ee9:r_op LOW(call_write_chain_phrase)
;; 06:6eec:r_op HIGH(call_write_chain_phrase)
;; 06:6f0c:r_op BANK(call_write_chain_phrase)

06:6f71 data_chain_screen_paste_string
06:6f71 .text:0006

06:6f77 call_06_6f77

06:715e call_06_715e

06:7235 call_06_7235

06:732d data_06_732d
06:732d .text:0004

06:7331 call_draw_sync_wait_status_string
;; 06:7331 Draw a string describing the current status of sync wait.
;; 06:7331 Args: address
;; 06:7331 Registers used: A, DE, Hl

06:734d call_06_734d

06:737d call_06_737d

06:73c6 data_sync_strings_1
06:73c6 data_wait_sync_string_1
06:73c6 .text:0005
06:73cb data_lead_sync_string_1
06:73cb .text:0005
06:73d0 data_sync_string_1
06:73d0 .text:0005
06:73d5 data_empty_sync_string_1
06:73d5 .text:0005

06:73da call_06_73da

06:740f data_sync_strings_2
06:740f data_sync_string_2
06:740f .text:005
06:7414 data_wait_sync_string_2
06:7414 .text:005
06:7419 data_empty_sync_string_2
06:7419 .text:005

06:741e call_06_741e

06:7481 data_sync_strings_3
06:7481 data_sync_string_3
06:7481 .text:005
06:7486 data_empty_sync_string_3
06:7486 .text:005
06:748b data_lead_sync_string_2
06:748b .text:005
06:7490 data_empty_sync_string_4
06:7490 .text:005

06:7495 call_06_7495

06:7517 data_06_7517
06:7517 .data:0014

06:752b call_06_752b

06:7655 data_notes_string
06:7655 .text:0005
06:765a .text:0024
06:767e .text:0024
06:76a2 .text:0024
06:76c6 .text:0024
06:76ea .text:0024
06:770e .text:0024
06:7732 .text:0024
06:7756 .text:0024
06:777a .text:0023

06:779d data_note_strings
06:779d data_empty_note_string
06:779d .text:0004
06:77a1 data_c5_note_string
06:77a1 .text:0004
06:77a5 data_f5_note_string
06:77a5 .text:0004
06:77a9 data_c6_note_string
06:77a9 .text:0004
06:77ad data_c7_note_string
06:77ad .text:0004
06:77b1 data_c8_note_string
06:77b1 .text:0004
06:77b5 data_invalid_note_string_1
06:77b5 .text:0004
06:77b9 data_invalid_note_string_2
06:77b9 .text:0004

06:77bd call_shift_left_values_8x
;; 06:77bd Shift left 8 bytes at the given address.
;; 06:77bd Entry conditions: DE = address
;; 06:77bd Registers used: A, DE, HL

06:77e0 call_set_oscilloscope_graphical_chunk
;; 06:77e0 Set a chunk of graphical oscilloscope data given raw oscilloscope data.
;; 06:77e0 A chunk of oscilloscope data is 8 bytes.
;; 06:77e0
;; 06:77e0 Entry conditions:
;; 06:77e0   C = raw_data_address (range 0xffa0 - 0xffaf)
;; 06:77e0   DE = graphical_data_address (range 0xcba3 - 0xcbba)
;; 06:77e0
;; 06:77e0 Exit conditions:
;; 06:77e0   The 8 bytes of graphical data at the given address will be set.
;; 06:77e0
;; 06:77e0 Registers used: A, BC, DE, HL

06:7801 jump_clear_oscilloscope

06:7829 call_set_oscilloscope_graphical_data
;; 06:7829 Set oscilloscope graphical data given the current raw data.
;; 06:7829
;; 06:7829 Entry conditions:
;; 06:7829   ENABLE_OSCILLOSCOPE must be set
;; 06:7829   OSCILLOSCOPE_DRAW_TYPE must be set
;; 06:7829   OSCILLOSCOPE_VALUES must be set
;; 06:7829
;; 06:7829 Registers used: A, BC, DE, HL

;; 06:7834:l_op _CLEAR_DRAW_OSCILLOSCOPE

;; 06:783a:r_op LOW(OSCILLOSCOPE_VALUES) + 1

06:787b data_bank_06_padding
;; 06:787b 06:787b
;; 06:787b:replace:0785 ds $8000 - @, $ff

07:4000 call_07_4000

07:403f data_07_403f
07:403f .data:0008

07:4047 data_07_4047
07:4047 .data:0004

07:404b call_07_404b

07:4084 call_07_4084

07:40d0 call_write_song_chain
;; 07:40d0 Write a chain number to a row in a song.
;; 07:40d0 Args: channel, row, chain
;; 07:40d0 Registers used: A, DE, HL

;; 07:40d6:l_op _CHANNELS

07:40de .jump_verify_row

;; 07:40df:r_op _SONG_ROWS -1

07:40ea .jump_verify_chain

;; 07:40f5:l_op _CHAINS

07:40fd .jump_calculate_address_1

;; 07:4102 The following loop will rotate the row number right 2 times, multiplying it by 4.

07:4106 .jump_calculate_address_2
07:410b .jump_calculate_address_3

;; 07:410e:r_op _SRAM_SONG_CHAINS
;; 07:4126 Write the chain to the song row
;; 07:412c:r_op _SRAM_SONG_CHAINS_BANK

;; 07:4135 Return

07:4139 call_07_4139

;; 07:413c:r_op call_restore_backup_selection
;; 07:4140:r_op BANK(call_restore_backup_selection)

;; 07:4149:r_op LOW(call_1f_4bbb)
;; 07:414b:r_op HIGH(call_1f_4bbb)
;; 07:414e:r_op BANK(call_1f_4bbb)

;; 07:418b:r_op LOW(call_read_chain_phrase)
;; 07:418d:r_op HIGH(call_read_chain_phrase)
;; 07:4197:r_op BANK(call_read_chain_phrase)

;; 07:4213:r_op LOW(call_write_chain_phrase)
;; 07:4215:r_op HIGH(call_write_chain_phrase)
;; 07:4226:r_op BANK(call_write_chain_phrase)

;; 07:4232:r_op LOW(call_01_4eb3)
;; 07:4234:r_op HIGH(call_01_4eb3)
;; 07:4237:r_op BANK(call_01_4eb3)

;; 07:4249:r_op LOW(call_01_75c6)
;; 07:424b:r_op HIGH(call_01_75c6)
;; 07:4250:r_op BANK(call_01_75c6)

;; 07:425e:r_op LOW(call_06_569a)
;; 07:4260:r_op HIGH(call_06_569a)
;; 07:426d:r_op BANK(call_06_569a)

;; 07:4276:r_op LOW(call_write_chain_phrase)
;; 07:4278:r_op HIGH(call_write_chain_phrase)
;; 07:4289:r_op BANK(call_write_chain_phrase)

;; 07:42a6:r_op LOW(call_write_chain_phrase)
;; 07:42a8:r_op HIGH(call_write_chain_phrase)
;; 07:42b8:r_op BANK(call_write_chain_phrase)

;; 07:42c4:r_op LOW(call_write_chain_phrase)
;; 07:42c6:r_op HIGH(call_write_chain_phrase)
;; 07:42d6:r_op BANK(call_write_chain_phrase)

;; 07:42df:r_op LOW(call_read_chain_transpose)
;; 07:42e1:r_op HIGH(call_read_chain_transpose)
;; 07:42ee:r_op BANK(call_read_chain_transpose)

;; 07:42fa:r_op LOW(call_write_chain_transpose)
;; 07:42fc:r_op HIGH(call_write_chain_transpose)
;; 07:430a:r_op BANK(call_write_chain_transpose)

07:4351 data_clone_chain_strings
07:4351 data_cloned_chain_string
07:4351 .text:000d
07:435e data_cloned_chain_phrases_string
07:435e .text:0015

07:4373 call_07_4373

07:43c2 call_07_43c2

07:4441 call_07_4441

07:44fc call_07_44fc

07:451e call_07_451e

07:4552 call_07_4552

;; 07:4553:r_op LOW(call_01_6d5c)
;; 07:4555:r_op HIGH(call_01_6d5c)
;; 07:4558:r_op BANK(call_01_6d5c)

;; 07:4615:r_op LOW(call_1f_6ff1)
;; 07:4617:r_op HIGH(call_1f_6ff1)
;; 07:461a:r_op BANK(call_1f_6ff1)

;; 07:4626:r_op call_05_4040
;; 07:462a:r_op BANK(call_05_4040)

07:4635 call_07_4635

07:4788 call_07_4788

07:47ad call_07_47ad

07:4908 data_07_4908
07:4908 .text:0003

07:490b call_07_490b

07:492c call_07_492c

07:4951 call_07_4951

07:4976 call_07_4976

07:49c5 call_07_49c5

;; 07:49ca:l_op _SELECT_CURSOR_MODE

07:4a03 call_07_4a03

07:4a57 call_07_4a57

;; 07:4a5c:l_op _SELECT_CURSOR_MODE

07:4a96 call_07_4a96

;; 07:4a9f:r_op call_write_backup_selection
;; 07:4aa3:r_op BANK(call_write_backup_selection)

;; 07:4ab6:r_op LOW(call_02_6d31)
;; 07:4ab8:r_op HIGH(call_02_6d31)
;; 07:4abb:r_op BANK(call_02_6d31)

;; 07:4ac4:r_op call_restore_backup_selection
;; 07:4ac8:r_op BANK(call_restore_backup_selection)

07:4adb call_07_4adb

;; 07:4b45:l_op _SELECT_CURSOR_MODE

;; 07:4b6f:r_op call_restore_backup_selection
;; 07:4b73:r_op BANK(call_restore_backup_selection)

;; 07:4bbb:r_op LOW(call_1f_4bbb)
;; 07:4bbd:r_op HIGH(call_1f_4bbb)
;; 07:4bc0:r_op BANK(call_1f_4bbb)

;; 07:4c12:r_op LOW(call_01_4d67)
;; 07:4c14:r_op HIGH(call_01_4d67)
;; 07:4c1e:r_op BANK(call_01_4d67)

;; 07:4c38:r_op LOW(call_1f_4bbb)
;; 07:4c3a:r_op HIGH(call_1f_4bbb)
;; 07:4c3f:r_op BANK(call_1f_4bbb)

07:5010 jump_07_5010

;; 07:5123:r_op call_move_screen_up
;; 07:5127:r_op BANK(call_move_screen_up)

;; 07:5130:r_op LOW(call_00_2490)
;; 07:5132:r_op HIGH(call_00_2490)
;; 07:5135 Unused bank for call_00_2490
;; 07:5139 Banked call used for call_00_2490 unnecessarily

;; 07:5159:r_op call_move_screen_down
;; 07:515d:r_op BANK(call_move_screen_down)

;; 07:5166:r_op LOW(call_00_2490)
;; 07:5168:r_op HIGH(call_00_2490)
;; 07:516b Unused bank for call_00_2490
;; 07:516f Banked call used for call_00_2490 unnecessarily

;; 07:51b3:r_op _NORMAL_CURSOR_MODE

;; 07:5206:r_op _SRAM_SONG_CHAINS

;; 07:5296:l_op _NO_CURSOR_MODE

;; 07:5382:r_op LOW(call_02_6d46)
;; 07:5384:r_op HIGH(call_02_6d46)
;; 07:5387:r_op BANK(call_02_6d46)

;; 07:539b:r_op LOW(call_02_7b9b)
;; 07:539d:r_op HIGH(call_02_7b9b)
;; 07:53a0:r_op BANK(call_02_7b9b)

;; 07:53a9:r_op LOW(call_02_7b9b)
;; 07:53ab:r_op HIGH(call_02_7b9b)
;; 07:53ae:r_op BANK(call_02_7b9b)

;; 07:53f0:r_op LOW(call_02_6d31)
;; 07:53f2:r_op HIGH(call_02_6d31)
;; 07:53f5:r_op BANK(call_02_6d31)

;; 07:5421:r_op LOW(call_02_7b9b)
;; 07:5423:r_op HIGH(call_02_7b9b)
;; 07:5426:r_op BANK(call_02_7b9b)

;; 07:5498:r_op LOW(call_01_7601)
;; 07:549a:r_op HIGH(call_01_7601)
;; 07:549d:r_op BANK(call_01_7601)

;; 07:54b9:r_op LOW(call_read_chain_phrase)
;; 07:54bb:r_op HIGH(call_read_chain_phrase)
;; 07:54c9:r_op BANK(call_read_chain_phrase)

;; 07:54e0:r_op call_move_screen_right
;; 07:54e4:r_op BANK(call_move_screen_right)

;; 07:54ed:r_op LOW(call_00_2490)
;; 07:54ef:r_op HIGH(call_00_2490)
;; 07:54f2 Unused bank for call_00_2490
;; 07:54f6 Banked call used for call_00_2490 unnecessarily

;; 07:5668:r_op call_write_backup_selection
;; 07:566c:r_op BANK(call_write_backup_selection)

07:56c0 data_song_screen_cancel_select_string
07:56c0 .text:000e
07:56ce data_select_slim_clone_string
07:56ce .text:0015
07:56e3 data_select_deep_clone_string
07:56e3 .text:0015

07:56f8 call_07_56f8

;; 07:570a:r_op _NORMAL_CURSOR_MODE

;; 07:5815:r_op _SRAM_SONG_CHAINS

07:5919 data_cut_chains_string
07:5919 .text:000b
07:5924 data_copied_chains_string
07:5924 .text:000e

07:5932 call_07_5932

;; 07:59ae Last song chain row
;; 07:59ae:r_op _SRAM_SONG_CHAINS + _CHANNELS * (_SONG_ROWS - 1)

07:5ad1 data_pasted_chains_string
07:5ad1 .text:000e

07:5adf call_07_5adf

07:5d7a data_07_5d7a
07:5d7a .data:0020

07:5d9a call_07_5d9a

07:5e0b data_00_5e0b
07:5e0b .data:0200
07:600b data_07_600b
07:600b .data:0200

07:620b call_07_620b

07:623e call_07_623e
;; 07:624d:r_op _SRAM_BOOKMARKS
;; 07:6274:r_op _SRAM_BOOKMARKS_BANK

07:62e2 call_is_song_row_bookmarked
;; 07:62e2 Checks if the given row in the song is bookmarked.
;; 07:62e2 Args: row
;; 07:62e2 Result: E

;; 07:62ec Check for empty song row

07:62f6 .jump_calculate_address

;; 07:62fb:r_op _SRAM_BOOKMARKS
;; 07:6306 Read the bookmark
;; 07:630c:r_op _SRAM_BOOKMARKS_BANK

;; 07:6317 Check if row has been overshot (bookmarks are sorted)

07:6323 .jump_check_bookmark

07:632f .jump_increment_loop

07:633a .jump_return

07:633e call_07_633e

;; 07:633f Last bookmark
;; 07:633f:r_op _SRAM_BOOKMARKS + _BOOKMARKS - 1
;; 07:6343:r_op _SRAM_BOOKMARKS_BANK

;; 07:6353:r_op LOW(call_01_763e)
;; 07:6355:r_op HIGH(call_01_763e)
;; 07:6358:r_op BANK(call_01_763e)

;; 07:6369:r_op _SRAM_BOOKMARKS + _BOOKMARKS - 1

07:6377 call_07_6377
;; 07:6399:r_op _SRAM_BOOKMARKS
;; 07:63a8:r_op _SRAM_BOOKMARKS_BANK

07:63d5 call_07_63d5

07:63ff call_07_63ff
;; 07:6407:r_op _SRAM_BOOKMARKS
;; 07:640b Assume the bank is set to the bank for _SRAM_BOOKMARKS

07:6411 call_07_6411
;; 07:641d:r_op _SRAM_BOOKMARKS
;; 07:642e:r_op _SRAM_BOOKMARKS_BANK

07:648c call_07_648c
;; 07:6498:r_op _SRAM_BOOKMARKS
;; 07:64a9:r_op _SRAM_BOOKMARKS_BANK

07:6505 call_07_6505

07:65ec data_07_65ec
07:65ec .data:0080
07:666c data_07_666c
07:666c .data:0080

07:66ec call_07_66ec

07:66fe digits_2
;; 07:66fe gbdk 2.95 libc/gb/digits.c:digits
07:66fe .text:0011

07:670f call_07_670f

;; 07:6715:r_op LOW(call_01_493b)
;; 07:6717:r_op HIGH(call_01_493b)
;; 07:6720:r_op BANK(call_01_493b)

;; 07:67c2:r_op LOW(call_01_7828)
;; 07:67c4:r_op HIGH(call_01_7828)
;; 07:67c7:r_op BANK(call_01_7828)

07:67d4 call_07_67d4

07:684b data_07_684b
07:684b .text:0005
07:6850 data_07_6850
07:6850 .text:0005
07:6855 data_07_6855
07:6855 .text:0005
07:685a data_07_685a
07:685a .text:0005
07:685f data_07_685f
07:685f .text:0005

07:6864 call_07_6864

;; 07:6c37:r_op LOW(call_02_4679)
;; 07:6c39:r_op HIGH(call_02_4679)
;; 07:6c3c:r_op BANK(call_02_4679)

07:6dee data_pulse_channel_combo_strings
07:6dee data_pulse1_pulse_channel_combo_string_1
07:6dee .text:0006
07:6df4 data_pulse2_pulse_channel_combo_string_1
07:6df4 .text:0006
07:6dfa data_pulse1_pulse2_pulse_channel_combo_string_1
07:6dfa .text:0006
07:6e00 data_pulse1_pulse_channel_combo_string_2
07:6e00 .text:0006
07:6e06 data_pulse2_pulse_channel_combo_string_2
07:6e06 .text:0006
07:6e0c data_pulse1_pulse2_pulse_channel_combo_string_2
07:6e0c .text:0006

07:6e12 call_07_6e12

;; 07:6e3f:l_op _PHRASE_SCREEN

;; 07:6e59:r_op LOW(call_04_4caa)
;; 07:6e5b:r_op HIGH(call_04_4caa)
;; 07:6e66:r_op BANK(call_04_4caa)

;; 07:6f3c:l_op _PHRASE_SCREEN

;; 07:6f58:r_op LOW(call_04_4caa)
;; 07:6f5a:r_op HIGH(call_04_4caa)
;; 07:6f63:r_op BANK(call_04_4caa)

07:6fd4 call_07_6fd4

07:6ff5 call_07_6ff5

07:7010 call_07_7010

07:7059 call_07_7059

;; 07:7065:r_op _HELP_SCREEN

;; 07:7067:r_op call_01_6d3b
;; 07:706b:r_op BANK(call_01_6d3b)

07:7140 data_keyboard_calibration_strings
07:7140 data_keyboard_calibration_title_string
07:7140 .text:0015
07:7155 data_keyboard_calibration_string_1
07:7155 .text:0013
07:7168 data_keyboard_calibration_string_2
07:7168 .text:0011
07:7179 data_keyboard_calibration_string_3
07:7179 .text:000b
07:7184 data_keyboard_calibration_fail_string
07:7184 .text:0006
07:718a data_keyboard_calibration_ok_string
07:718a .text:0004

07:718e call_07_718e

07:71d9 call_07_71d9

07:71ef call_oam_vram_safe_write_low_increment
;; 07:71ef Write a byte to OAM/VRAM when both are safe to use, then increment the given values.
;; 07:71ef Only safe to use with addresses which have read/write addresses with low bytes below 0xff.
;; 07:71ef
;; 07:71ef Entry conditions:
;; 07:71ef   DE = read_address
;; 07:71ef   HL = write_address
;; 07:71ef
;; 07:71ef Exit conditions:
;; 07:71ef   E will be incremented.
;; 07:71ef   L will be incremented.
;; 07:71ef
;; 07:71ef Registers used: A, DE, HL

;; 07:71f1:l_op STATF_BUSY | STATF_OAM

07:71fa call_07_71fa

07:7245 call_07_7245

07:7290 call_07_7290

07:732a call_07_732a

07:73c4 call_07_73c4
;; 07:73d8:l_op [rRAMB]
;; 07:73db:r_op CART_RAM_ENABLE
;; 07:73dd:l_op [rRAMG]
;; 07:73e3:l_op [rRAMG]

07:73f1 call_07_73f1
;; 07:7401:l_op [rRAMB]
;; 07:7404:r_op CART_RAM_ENABLE
;; 07:7406:l_op [rRAMG]
;; 07:740c:l_op [rRAMG]

07:741a data_bank_07_padding
;; 07:741a 07:741a
;; 07:741a:replace:0be6 ds $8000 - @, $ff

1b:4000 call_1b_4000

1b:401b call_1b_401b

1b:4058 data_1b_4058
1b:4058 .data:0040

1b:4098 data_help_page_index_strings
1b:4098 data_title_help_page_index_string
1b:4098 .text:000f
1b:40a7 data_screens_help_page_index_string
1b:40a7 .text:000a
1b:40b1 data_song_help_page_index_string
1b:40b1 .text:0005
1b:40b6 data_chain_help_page_index_string
1b:40b6 .text:0006
1b:40bc data_phrase_help_page_index_string
1b:40bc .text:0007
1b:40c3 data_instrument_help_page_index_string
1b:40c3 .text:0006
1b:40c9 data_groove_help_page_index_string
1b:40c9 .text:0007
1b:40d0 data_wave_help_page_index_string
1b:40d0 .text:0006
1b:40d6 data_command_list_help_page_index_string
1b:40d6 .text:000e
1b:40e4 data_live_mode_help_page_index_string
1b:40e4 .text:000a
1b:40ee data_select_help_page_index_string
1b:40ee .text:0012
1b:4100 data_mute_help_page_index_string
1b:4100 .text:000e

1b:410e data_help_page_strings
1b:410e data_song_help_page_string
1b:410e .text:00ff
1b:420d .text:003b
1b:4248 data_live_help_page_string
1b:4248 .text:00c6
1b:430e data_chain_help_page_string
1b:430e .text:00ff
1b:440d .text:000d
1b:441a data_phrase_help_page_string
1b:441a .text:00ff
1b:4519 .text:0010
1b:4529 data_instrument_help_page_string
1b:4529 .text:00ea
1b:4613 data_groove_help_page_string
1b:4613 .text:006c
1b:467f data_wave_help_page_string
1b:467f .text:00b0
1b:472f data_command_list_help_page_string
1b:472f .text:00fc
1b:482b data_select_help_page_string
1b:482b .text:00ff
1b:492a .text:0047
1b:4971 data_mute_help_page_string
1b:4971 .text:0087

1b:49f8 call_1b_49f8

1b:4a4d call_1b_4a4d

1b:4a62 call_1b_4a62

;; 1b:4a63:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1b:4a65:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1b:4a68:r_op BANK(call_copy_current_screen_bg_tile_page)

1b:4a79 call_1b_4a79

1b:4aa6 call_1b_4aa6

1b:4ac5 call_1b_4ac5

;; 1b:4ac9:r_op _PROJECT_SCREEN

;; 1b:4acb:r_op LOW(call_00_2490)
;; 1b:4acd:r_op HIGH(call_00_2490)
;; 1b:4ad0 Unused bank for call_00_2490
;; 1b:4ad4 Banked call used for call_00_2490 unnecessarily

1b:4adb call_1b_4adb

1b:4ae7 call_1b_4ae7

1b:4b6d call_1b_4b6d

1b:4baf data_1b_4baf
1b:4baf .data:0014

1b:4bc3 call_1b_4bc3

1b:4c30 call_1b_4c30

1b:4c6a data_keyboard_keys_strings
1b:4c6a data_keyboard_keys_string_1
1b:4c6a .text:000b
1b:4c75 data_keyboard_keys_string_2
1b:4c75 .text:000b
1b:4c80 data_keyboard_keys_string_3
1b:4c80 .text:000b
1b:4c8b data_keyboard_keys_string_4
1b:4c8b .text:0006
;; 1b:4c91 1b:4c91
;; 1b:4c91:replace:0005 db _SPECIAL_ASCII_CODE, " ", _BACKSPACE_ASCII_CODE, _OKAY_ASCII_CODE, $00

1b:4c96 call_1b_4c96

1b:4cba call_1b_4cba

1b:4e8a call_1b_4e8a

;; 1b:4ea0:r_op LOW(call_01_493b)
;; 1b:4ea2:r_op HIGH(call_01_493b)
;; 1b:4eab:r_op BANK(call_01_493b)

;; 1b:4eeb:l_op _FILE_SCREEN

;; 1b:5111:r_op _CRASH_SCREEN

1b:5117 data_save_name_strings
1b:5117 data_save_as_name_string
1b:5117 .text:0009
1b:5120 data_save_name_string
1b:5120 .text:0006

1b:5126 call_1b_5126

;; 1b:5132:r_op LOW(call_1c_5098)
;; 1b:5134:r_op HIGH(call_1c_5098)
;; 1b:5137:r_op BANK(call_1c_5098)

;; 1b:5173:r_op LOW(call_1c_4e10)
;; 1b:5175:r_op HIGH(call_1c_4e10)
;; 1b:517e:r_op BANK(call_1c_4e10)

;; 1b:522f:r_op LOW(call_01_4a49)
;; 1b:5231:r_op HIGH(call_01_4a49)
;; 1b:523a:r_op BANK(call_01_4a49)

;; 1b:5257:r_op _SRAM_SPEECH_WORD_NAMES
;; 1b:5279:r_op _SRAM_SPEECH_WORD_NAMES_BANK

;; 1b:52c6:r_op LOW(call_00_2490)
;; 1b:52c8:r_op HIGH(call_00_2490)
;; 1b:52cb Unused bank for call_00_2490
;; 1b:52cf Banked call used for call_00_2490 unnecessarily

1b:52d8 data_save_progress_strings
1b:52d8 data_save_progress_saving_string
1b:52d8 .text:000a
1b:52e2 data_save_progress_fail_string_1
1b:52e2 .text:0006
1b:52e8 data_save_progress_out_of_memory_string
1b:52e8 .text:000f
1b:52f7 data_save_progress_ok_string
1b:52f7 .text:0006
1b:52fd data_save_progress_fail_string_2
1b:52fd .text:0006

1b:5303 call_1b_5303

1b:53e8 call_1b_53e8

;; 1b:5683:r_op LOW(call_00_2490)
;; 1b:5685:r_op HIGH(call_00_2490)
;; 1b:5688 Unused bank for call_00_2490
;; 1b:568c Banked call used for call_00_2490 unnecessarily

1b:569c call_1b_569c

1b:5707 data_font_1_name_string
1b:5707 .text:0005
1b:570c data_font_2_name_string
1b:570c .text:0005
1b:5711 data_font_3_name_string
1b:5711 .text:0005

1b:5716 data_dmg_palette_1_name_string
1b:5716 .text:0005
1b:571b data_dmg_palette_2_name_string
1b:571b .text:0005
1b:5720 data_dmg_palette_3_name_string
1b:5720 .text:0005
1b:5725 data_dmg_palette_4_name_string
1b:5725 .text:0005

1b:572a .data:000f

1b:5739 data_palette_1_name_string
1b:5739 .text:0005
1b:573e data_palette_2_name_string
1b:573e .text:0005
1b:5743 data_palette_3_name_string
1b:5743 .text:0005
1b:5748 data_palette_4_name_string
1b:5748 .text:0005
1b:574d data_palette_5_name_string
1b:574d .text:0005
1b:5752 data_palette_6_name_string
1b:5752 .text:0005
1b:5757 data_palette_7_name_string
1b:5757 .text:0005

1b:575c .data:0026

1b:5782 call_1b_5782
;; 1b:5788:r_op _SRAM_SYNC
;; 1b:578c:r_op _SRAM_SYNC_BANK

1b:5796 call_1b_5796
;; 1b:57b3:r_op _SRAM_PS2_DELAY
;; 1b:57b7:r_op _SRAM_PS2_DELAY_BANK

1b:57c1 call_1b_57c1

1b:582c call_1b_582c
;; 1b:5832:r_op _SRAM_TEMPO
;; 1b:5836:r_op _SRAM_TEMPO_BANK
;; 1b:5845:r_op _SRAM_OVERCLOCK
;; 1b:5849:r_op _SRAM_OVERCLOCK_BANK

1b:5853 call_1b_5853

1b:5861 call_1b_5861

1b:5876 call_1b_5876

1b:5896 call_1b_5896

1b:58b1 call_1b_58b1

1b:59b7 data_project_screen_param_strings
1b:59b7 data_off_project_screen_param_string
1b:59b7 .text:0007
1b:59be data_lsdj_project_screen_param_string
1b:59be .text:0007
1b:59c5 data_midi_project_screen_param_string
1b:59c5 .text:0007
1b:59cc data_keyboard_project_screen_param_string
1b:59cc .text:0007
1b:59d3 data_analog_in_project_screen_param_string
1b:59d3 .text:0007
1b:59da data_analog_out_project_screen_param_string
1b:59da .text:0007
1b:59e1 data_ps2_delay_project_screen_param_string
1b:59e1 .text:000c
1b:59ed data_ticks_project_screen_param_string
1b:59ed .text:000c
1b:59f9 data_empty_project_screen_param_string
1b:59f9 .text:000e

1b:5a07 call_1b_5a07

1b:5a42 call_1b_5a42

1b:5a90 call_1b_5a90

1b:5ae3 call_1b_5ae3

1b:5b06 data_1b_5b06
1b:5b06 .text:0003

1b:5b09 call_1b_5b09

1b:5b23 call_1b_5b23

1b:5b56 data_prelisten_strings
1b:5b56 data_prelisten_on_string
1b:5b56 .text:0004
1b:5b5a data_prelisten_off_string
1b:5b5a .text:0004
1b:5b5e data_prelisten_na_string
1b:5b5e .text:0004

1b:5b62 call_1b_5b62

1b:5b7a call_1b_5b7a

;; 1b:5bd1:r_op _SRAM_WORK_TIME_HOURS
;; 1b:5bd5:r_op _SRAM_WORK_TIME_HOURS_BANK
;; 1b:5beb:r_op _SRAM_WORK_TIME_MINUTES
;; 1b:5bef:r_op _SRAM_WORK_TIME_MINUTES_BANK

1b:5c03 data_stat_strings
1b:5c03 data_play_stat_string
1b:5c03 .text:0009
1b:5c0c data_worked_stat_string
1b:5c0c .text:000b

1b:5c17 call_1b_5c17

;; 1b:5c1a:r_op LOW(call_1c_4057)
;; 1b:5c1c:r_op HIGH(call_1c_4057)
;; 1b:5c1f:r_op BANK(call_1c_4057)

;; 1b:5c2c:r_op LOW(call_01_6d5c)
;; 1b:5c2e:r_op HIGH(call_01_6d5c)
;; 1b:5c31:r_op BANK(call_01_6d5c)

;; 1b:5cf9:r_op _SRAM_TOTAL_TIME_HOURS
;; 1b:5cfd:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 1b:5d0d:r_op _SRAM_TOTAL_TIME_DAYS
;; 1b:5d11:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 1b:5d2d:r_op _SRAM_TOTAL_TIME_MINUTES
;; 1b:5d31:r_op _SRAM_TOTAL_TIME_MINUTES_BANK

1b:5d4f data_project_screen_strings_1
1b:5d4f data_project_screen_deep_string_1
1b:5d4f .text:0005
1b:5d54 data_project_screen_slim_string_1
1b:5d54 .text:0005
1b:5d59 data_project_screen_load_save_string
1b:5d59 .text:000f
1b:5d68 data_project_screen_reset_memory_string
1b:5d68 .text:000d
1b:5d75 data_1b_5d75
1b:5d75 .text:0007

1b:5d7c call_1b_5d7c

;; 1b:5d9a:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1b:5d9c:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1b:5d9f:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1b:5dab:r_op call_05_4040
;; 1b:5daf:r_op BANK(call_05_4040)

1b:5dbf call_1b_5dbf

;; 1b:5e78:r_op call_move_screen_down
;; 1b:5e7c:r_op BANK(call_move_screen_down)

;; 1b:5e85:r_op LOW(call_00_2490)
;; 1b:5e87:r_op HIGH(call_00_2490)
;; 1b:5e8a Unused bank for call_00_2490
;; 1b:5e8e Banked call used for call_00_2490 unnecessarily

;; 1b:5ec1:r_op call_move_screen_right
;; 1b:5ec5:r_op BANK(call_move_screen_right)

;; 1b:5ece:r_op LOW(call_00_2490)
;; 1b:5ed0:r_op HIGH(call_00_2490)
;; 1b:5ed3 Unused bank for call_00_2490
;; 1b:5ed7 Banked call used for call_00_2490 unnecessarily

1b:5f0f jump_table_1b_5f0f

;; 1b:5f5f:r_op LOW(call_07_5d9a)
;; 1b:5f61:r_op HIGH(call_07_5d9a)
;; 1b:5f64:r_op BANK(call_07_5d9a)

;; 1b:6005:r_op _SRAM_CLONE_TYPE_BANK
;; 1b:6009:r_op _SRAM_CLONE_TYPE

;; 1b:6062:r_op _SRAM_PALETTE_NUM
;; 1b:6066:r_op _SRAM_PALETTE_NUM_BANK

;; 1b:6072:r_op LOW(call_01_4c61)
;; 1b:6074:r_op HIGH(call_01_4c61)
;; 1b:6077:r_op BANK(call_01_4c61)

;; 1b:6091:r_op LOW(call_1e_7aa0)
;; 1b:6093:r_op HIGH(call_1e_7aa0)
;; 1b:6096:r_op BANK(call_1e_7aa0)

;; 1b:60d1:r_op _SRAM_KEY_REPEAT
;; 1b:60d5:r_op _SRAM_KEY_REPEAT_BANK

;; 1b:60f1:r_op _SRAM_PRELISTEN
;; 1b:60f5:r_op _SRAM_PRELISTEN_BANK

1b:6117 jump_table_1b_6117

;; 1b:614b:r_op _SRAM_PALETTE_NUM
;; 1b:614f:r_op _SRAM_PALETTE_NUM_BANK

;; 1b:6158:r_op LOW(call_01_4c61)
;; 1b:615a:r_op HIGH(call_01_4c61)
;; 1b:615d:r_op BANK(call_01_4c61)

;; 1b:617a:r_op LOW(call_1e_7aa0)
;; 1b:617c:r_op HIGH(call_1e_7aa0)
;; 1b:617f:r_op BANK(call_1e_7aa0)

;; 1b:61c4:r_op LOW(call_07_5d9a)
;; 1b:61c6:r_op HIGH(call_07_5d9a)
;; 1b:61c9:r_op BANK(call_07_5d9a)

;; 1b:626e:r_op _SRAM_CLONE_TYPE
;; 1b:6272:r_op _SRAM_CLONE_TYPE_BANK

;; 1b:62b5:r_op _SRAM_KEY_REPEAT
;; 1b:62b9:r_op _SRAM_KEY_REPEAT_BANK

;; 1b:62d5:r_op _SRAM_PRELISTEN
;; 1b:62d9:r_op _SRAM_PRELISTEN_BANK

;; 1b:631b:r_op _SRAM_FONT
;; 1b:631f:r_op _SRAM_FONT_BANK

;; 1b:632b:r_op LOW(call_1e_7aa0)
;; 1b:632d:r_op HIGH(call_1e_7aa0)
;; 1b:6330:r_op BANK(call_1e_7aa0)

;; 1b:635f:r_op LOW(call_07_5d9a)
;; 1b:6361:r_op HIGH(call_07_5d9a)
;; 1b:6364:r_op BANK(call_07_5d9a)

;; 1b:63e0:r_op _SRAM_KEY_DELAY
;; 1b:63e4:r_op _SRAM_KEY_DELAY_BANK

;; 1b:642d:r_op LOW(call_07_5d9a)
;; 1b:642f:r_op HIGH(call_07_5d9a)
;; 1b:6432:r_op BANK(call_07_5d9a)

;; 1b:649a:r_op _SRAM_FONT
;; 1b:649e:r_op _SRAM_FONT_BANK

;; 1b:64aa:r_op LOW(call_1e_7aa0)
;; 1b:64ac:r_op HIGH(call_1e_7aa0)
;; 1b:64af:r_op BANK(call_1e_7aa0)

;; 1b:64e9:r_op _SRAM_KEY_DELAY
;; 1b:64ed:r_op _SRAM_KEY_DELAY_BANK

;; 1b:666a:r_op LOW(call_1c_47b1)
;; 1b:666c:r_op HIGH(call_1c_47b1)
;; 1b:666f:r_op BANK(call_1c_47b1)

;; 1b:667c:r_op _SRAM_TOTAL_TIME_DAYS
;; 1b:6680:r_op _SRAM_TOTAL_TIME_DAYS_BANK

;; 1b:668d:r_op _SRAM_TOTAL_TIME_MINUTES
;; 1b:6691:r_op _SRAM_TOTAL_TIME_MINUTES_BANK

;; 1b:669e:r_op _SRAM_TOTAL_TIME_HOURS
;; 1b:66a2:r_op _SRAM_TOTAL_TIME_HOURS_BANK

;; 1b:66eb:r_op LOW(call_07_5d9a)
;; 1b:66ed:r_op HIGH(call_07_5d9a)
;; 1b:66f0:r_op BANK(call_07_5d9a)

;; 1b:6704:r_op LOW(call_1c_5098)
;; 1b:6706:r_op HIGH(call_1c_5098)
;; 1b:6709:r_op BANK(call_1c_5098)

;; 1b:672a:r_op LOW(call_1f_6278)
;; 1b:672c:r_op HIGH(call_1f_6278)
;; 1b:672f:r_op BANK(call_1f_6278)

;; 1b:6740:r_op LOW(call_1c_5098)
;; 1b:6742:r_op HIGH(call_1c_5098)
;; 1b:6745:r_op BANK(call_1c_5098)

;; 1b:6766:r_op LOW(call_1f_634c)
;; 1b:6768:r_op HIGH(call_1f_634c)
;; 1b:676b:r_op BANK(call_1f_634c)

;; 1b:677f:r_op _HELP_SCREEN

;; 1b:6781:r_op LOW(call_00_2490)
;; 1b:6783:r_op HIGH(call_00_2490)
;; 1b:6786 Unused bank for call_00_2490
;; 1b:678a Banked call used for call_00_2490 unnecessarily

;; 1b:679d:r_op LOW(call_1c_5098)
;; 1b:679f:r_op HIGH(call_1c_5098)
;; 1b:67a2:r_op BANK(call_1c_5098)

;; 1b:67ab:r_op call_07_7059
;; 1b:67af:r_op BANK(call_07_7059)

;; 1b:67bb:r_op LOW(call_00_2490)
;; 1b:67bd:r_op HIGH(call_00_2490)
;; 1b:67c0 Unused bank for call_00_2490
;; 1b:67c4 Banked call used for call_00_2490 unnecessarily

;; 1b:67e1:r_op _FILE_SCREEN

;; 1b:67ed:r_op LOW(call_1c_5597)
;; 1b:67ef:r_op HIGH(call_1c_5597)
;; 1b:67f2:r_op BANK(call_1c_5597)

;; 1b:67fb:r_op LOW(call_00_2490)
;; 1b:67fd:r_op HIGH(call_00_2490)
;; 1b:6800 Unused bank for call_00_2490
;; 1b:6804 Banked call used for call_00_2490 unnecessarily

;; 1b:68cd:r_op LOW(call_1c_5098)
;; 1b:68cf:r_op HIGH(call_1c_5098)
;; 1b:68d2:r_op BANK(call_1c_5098)

;; 1b:68e7:r_op _SRAM_TOTAL_TIME_DAYS
;; 1b:68eb:r_op _SRAM_TOTAL_TIME_DAYS_BANK

;; 1b:68f8:r_op _SRAM_TOTAL_TIME_MINUTES
;; 1b:68fc:r_op _SRAM_TOTAL_TIME_MINUTES_BANK

;; 1b:6909:r_op _SRAM_TOTAL_TIME_HOURS
;; 1b:690d:r_op _SRAM_TOTAL_TIME_HOURS_BANK

;; 1b:6916:r_op LOW(call_1c_47b1)
;; 1b:6918:r_op HIGH(call_1c_47b1)
;; 1b:691b:r_op BANK(call_1c_47b1)

;; 1b:6924:r_op LOW(call_01_45d1)
;; 1b:6926:r_op HIGH(call_01_45d1)
;; 1b:6929:r_op BANK(call_01_45d1)

;; 1b:6936:r_op _SRAM_CURRENT_FILE
;; 1b:693a:r_op _SRAM_CURRENT_FILE_BANK

;; 1b:6943:r_op LOW(call_1c_4a46)
;; 1b:6945:r_op HIGH(call_1c_4a46)
;; 1b:6948:r_op BANK(call_1c_4a46)

;; 1b:698e:r_op LOW(call_01_7c94)
;; 1b:6990:r_op HIGH(call_01_7c94)
;; 1b:6997:r_op BANK(call_01_7c94)

;; 1b:69ae:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1b:69b0:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1b:69b3:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1b:69bc:r_op LOW(call_00_2490)
;; 1b:69be:r_op HIGH(call_00_2490)
;; 1b:69c1 Unused bank for call_00_2490
;; 1b:69c5 Banked call used for call_00_2490 unnecessarily

;; 1b:69ca:r_op call_05_4040
;; 1b:69ce:r_op BANK(call_05_4040)

;; 1b:69f6:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1b:69f8:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1b:69fb:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1b:6a07:r_op call_05_4040
;; 1b:6a0b:r_op BANK(call_05_4040)

;; 1b:6a32:r_op _SONG_SCREEN
;; 1b:6a45:r_op _PROJECT_SCREEN

;; 1b:6a34:r_op LOW(call_02_7b9b)
;; 1b:6a36:r_op HIGH(call_02_7b9b)
;; 1b:6a39:r_op BANK(call_02_7b9b)

1b:6a5c data_project_screen_strings_2
1b:6a5c data_project_screen_slim_string_2
1b:6a5c .text:0005
1b:6a61 data_project_screen_deep_string_2
1b:6a61 .text:0005
1b:6a66 data_project_screen_reset_cartridge_string
1b:6a66 .text:0011
1b:6a77 data_project_screen_reset_cartridge_yes_string
1b:6a77 .text:0004
1b:6a7b data_project_screen_reset_cartridge_no_string
1b:6a7b .text:0003
1b:6a7e data_project_screen_reset_cartridge_complete_string
1b:6a7e .text:000e

1b:6a8c call_1b_6a8c

1b:6b7a call_1b_6b7a

1b:6c38 data_1b_6c38
1b:6c38 .data:03c6
1b:6ffe data_1b_6ffe
1b:6ffe .data:00ba

1b:70b8 call_1b_70b8

1b:7200 call_1b_7200

1b:726e call_1b_726e

1b:74e4 call_1b_74e4

1b:754f call_1b_754f

1b:7570 data_bank_1b_padding
;; 1b:7570 1b:7570
;; 1b:7570:replace:0a90 ds $8000 - @, $ff

1c:4000 call_1c_4000
;; 1c:4011:r_op rRAMB
;; 1c:4016:r_op rRAMG
;; 1c:4019:r_op CART_RAM_ENABLE
;; 1c:402f:r_op rRAMG
;; 1c:4032:r_op CART_RAM_DISABLE

1c:4047 data_default_wave_frame_3
1c:4047 .data:0010

1c:4057 call_1c_4057
;; 1c:4058:r_op _SRAM_INIT_FLAG_1
;; 1c:405c:r_op _SRAM_INIT_FLAG_1_BANK + 4
;; 1c:4071:r_op _SRAM_INIT_FLAG_1 + 1
;; 1c:4075:r_op _SRAM_INIT_FLAG_1_BANK + 4
;; 1c:408a:r_op _SRAM_INIT_FLAG_2
;; 1c:408e:r_op _SRAM_INIT_FLAG_2_BANK + 4
;; 1c:40a3:r_op _SRAM_INIT_FLAG_2 + 1
;; 1c:40a7:r_op _SRAM_INIT_FLAG_2_BANK + 4
;; 1c:40bc:r_op _SRAM_INIT_FLAG_3
;; 1c:40c0:r_op _SRAM_INIT_FLAG_3_BANK + 4
;; 1c:40d5:r_op _SRAM_INIT_FLAG_3 + 1
;; 1c:40d9:r_op _SRAM_INIT_FLAG_3_BANK + 4

1c:40f2 call_1c_40f2
;; 1c:4101:r_op _SRAM_FILE_INIT_FLAG
;; 1c:4105:r_op _SRAM_FILE_INIT_FLAG_BANK + 8
;; 1c:4115:r_op _SRAM_FILE_INIT_FLAG + 1
;; 1c:4119:r_op _SRAM_FILE_INIT_FLAG_BANK + 8
;; 1c:4129:r_op _SRAM_INIT_FLAG_1
;; 1c:412d:r_op _SRAM_INIT_FLAG_1_BANK + 8
;; 1c:413d:r_op _SRAM_INIT_FLAG_1 + 1
;; 1c:4141:r_op _SRAM_INIT_FLAG_1_BANK + 8

1c:415a call_1c_415a

1c:42d6 call_1c_42d6

1c:42e9 call_1c_42e9

1c:4335 call_1c_4335

1c:4352 call_1c_4352
;; 1c:4383:r_op rRAMB
;; 1c:4388:r_op rRAMG
;; 1c:438b:r_op CART_RAM_ENABLE
;; 1c:439b:r_op rRAMG
;; 1c:439e:r_op CART_RAM_DISABLE

1c:43b9 data_empty_string_1
1c:43b9 .text:0008

1c:43c1 call_1c_43c1

1c:441f call_1c_441f
;; 1c:4434:r_op _SRAM_PHRASE_NOTES
;; 1c:4438:r_op _SRAM_PHRASE_NOTES_BANK
;; 1c:4444:r_op _SRAM_PHRASE_NOTES + 1
;; 1c:4448:r_op _SRAM_PHRASE_NOTES_BANK

1c:46e3 call_1c_46e3

1c:4778 call_1c_4778

1c:47a3 data_verify_string
1c:47a3 .text:000e

1c:47b1 call_1c_47b1
;; 1c:47b8:r_op _SRAM_INIT_FLAG_1
;; 1c:47bc:r_op _SRAM_INIT_FLAG_1_BANK + 4
;; 1c:47c5:r_op _SRAM_FILE_NAMES
;; 1c:47f2:r_op _SRAM_FILE_NAMES_BANK
;; 1c:47ff:r_op _SRAM_CURRENT_FILE
;; 1c:482c:r_op _SRAM_CURRENT_FILE_BANK
;; 1c:4840:r_op _SRAM_FILE_INIT_FLAG
;; 1c:4844:r_op _SRAM_FILE_INIT_FLAG_BANK
;; 1c:4851:r_op _SRAM_FILE_INIT_FLAG + 1
;; 1c:4855:r_op _SRAM_FILE_INIT_FLAG_BANK

1c:4862 call_1c_4862

1c:48d4 call_1c_48d4

1c:4969 call_1c_4969

1c:49d4 call_1c_49d4

1c:4a46 call_1c_4a46
;; 1c:4a49:r_op _SRAM_FILE_CHANGED
;; 1c:4a4d:r_op _SRAM_FILE_CHANGED_BANK
;; 1c:4a59:r_op _SRAM_CURRENT_FILE
;; 1c:4a5d:r_op _SRAM_CURRENT_FILE_BANK

1c:4c11 data_empty_string_2
1c:4c11 .text:0009

1c:4c1a call_1c_4c1a
;; 1c:4c2b:r_op _SRAM_FILE_NAMES
;; 1c:4c58:r_op _SRAM_FILE_NAMES_BANK
;; 1c:4c82 Start of last file name
;; 1c:4c82:r_op _SRAM_FILE_NAMES + (_MAX_FILES - 1) * _FILE_NAME_LENGTH
;; 1c:4c86:r_op _SRAM_FILE_NAMES_BANK
;; 1c:4c94:r_op _SRAM_FILE_VERSIONS
;; 1c:4cc1:r_op _SRAM_FILE_VERSIONS_BANK

1c:4d58 call_1c_4d58
;; 1c:4d77:r_op _SRAM_CURRENT_FILE
;; 1c:4d7b:r_op _SRAM_CURRENT_FILE_BANK
;; 1c:4dc3:r_op _SRAM_CURRENT_FILE
;; 1c:4dc7:r_op _SRAM_CURRENT_FILE_BANK

1c:4dd1 call_1c_4dd1
;; 1c:4dd2:r_op _SRAM_WORK_TIME_MINUTES
;; 1c:4dd6:r_op _SRAM_WORK_TIME_MINUTES_BANK
;; 1c:4de3:r_op _SRAM_LAST_SAVED_MINUTES
;; 1c:4de7:r_op _SRAM_LAST_SAVED_MINUTES_BANK
;; 1c:4df0:r_op _SRAM_WORK_TIME_HOURS
;; 1c:4df4:r_op _SRAM_WORK_TIME_HOURS_BANK
;; 1c:4e01:r_op _SRAM_LAST_SAVED_HOURS
;; 1c:4e05:r_op _SRAM_LAST_SAVED_HOURS_BANK

1c:4e10 call_1c_4e10
;; 1c:4e2c:r_op _SRAM_FILE_NAMES
;; 1c:4e53:r_op _SRAM_FILE_VERSIONS_BANK
;; 1c:4f8c:r_op _SRAM_FILE_CHANGED
;; 1c:4f90:r_op _SRAM_FILE_CHANGED_BANK
;; 1c:4ebc:r_op _SRAM_CURRENT_FILE
;; 1c:4ec0:r_op _SRAM_CURRENT_FILE_BANK
;; 1c:4f03:r_op _SRAM_CURRENT_FILE
;; 1c:4f07:r_op _SRAM_CURRENT_FILE_BANK
;; 1c:4f46:r_op _SRAM_FILE_NAMES
;; 1c:4f79:r_op _SRAM_FILE_VERSIONS_BANK

1c:4fa5 call_1c_4fa5

1c:5077 call_1c_5077

1c:5092 data_1c_5092
1c:5092 .data:0006

1c:5098 call_1c_5098

;; 1c:509b:l_op _INTERRUPT_ENABLE

1c:50b3 call_1c_50b3

;; 1c:50b6:r_op _SRAM_KEY_REPEAT
;; 1c:50ba:r_op _SRAM_KEY_REPEAT_BANK
;; 1c:50c6:r_op _SRAM_KEY_DELAY
;; 1c:50ca:r_op _SRAM_KEY_DELAY_BANK
;; 1c:50d6:r_op _SRAM_SYNC
;; 1c:50da:r_op _SRAM_SYNC_BANK
;; 1c:50e6:r_op _SRAM_PS2_DELAY
;; 1c:50ea:r_op _SRAM_PS2_DELAY_BANK
;; 1c:5147:r_op _SRAM_TOTAL_TIME_DAYS
;; 1c:514b:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 1c:5164:r_op _SRAM_TOTAL_TIME_HOURS
;; 1c:5168:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 1c:5186:r_op _SRAM_TOTAL_TIME_MINUTES
;; 1c:518a:r_op _SRAM_TOTAL_TIME_MINUTES_BANK
;; 1c:51a8:r_op _SRAM_TOTAL_TIME_CHECKSUM
;; 1c:51ac:r_op _SRAM_TOTAL_TIME_CHECKSUM_BANK

;; 1c:5203:r_op LOW(call_00_2490)
;; 1c:5205:r_op HIGH(call_00_2490)
;; 1c:5208 Unused bank for call_00_2490
;; 1c:520c Banked call used for call_00_2490 unnecessarily

;; 1c:521b:r_op _SRAM_TOTAL_TIME_DAYS
;; 1c:521f:r_op _SRAM_TOTAL_TIME_DAYS_BANK
;; 1c:5231:r_op _SRAM_TOTAL_TIME_HOURS
;; 1c:5235:r_op _SRAM_TOTAL_TIME_HOURS_BANK
;; 1c:5247:r_op _SRAM_TOTAL_TIME_MINUTES
;; 1c:524b:r_op _SRAM_TOTAL_TIME_MINUTES_BANK
;; 1c:525d:r_op _SRAM_TOTAL_TIME_CHECKSUM
;; 1c:525d:r_op _SRAM_TOTAL_TIME_CHECKSUM_BANK

;; 1c:526d:r_op LOW(call_01_45d1)
;; 1c:526f:r_op HIGH(call_01_45d1)
;; 1c:5272:r_op BANK(call_01_45d1)

;; 1c:529c:r_op _SRAM_KEY_DELAY
;; 1c:52a0:r_op _SRAM_KEY_DELAY_BANK
;; 1c:52ae:r_op _SRAM_KEY_REPEAT
;; 1c:52b2:r_op _SRAM_KEY_REPEAT_BANK
;; 1c:52c0:r_op _SRAM_SYNC
;; 1c:52c4:r_op _SRAM_SYNC_BANK
;; 1c:52d2:r_op _SRAM_PS2_DELAY
;; 1c:52d6:r_op _SRAM_PS2_DELAY_BANK

;; 1c:52f6:r_op _SRAM_CURRENT_FILE
;; 1c:52fa:r_op _SRAM_CURRENT_FILE_BANK
;; 1c:5307:r_op _SRAM_FILE_CHANGED
;; 1c:530b:r_op _SRAM_FILE_CHANGED_BANK

;; 1c:531a:r_op LOW(call_01_7c94)
;; 1c:531c:r_op HIGH(call_01_7c94)
;; 1c:531e:r_op BANK(call_01_7c94)

;; 1c:5335:r_op _FILE_SCREEN

;; 1c:5337:r_op LOW(call_00_2490)
;; 1c:5339:r_op HIGH(call_00_2490)
;; 1c:533c Unused bank for call_00_2490
;; 1c:5340 Banked call used for call_00_2490 unnecessarily

1c:534e data_loading_progress_string
1c:534e .text:000d
1c:535b data_loading_fail_string
1c:535b .text:0006

1c:5361 call_1c_5361

1c:5531 call_draw_file_action_cursor
;; 1c:5531 Draw the cursor for the currently selected file action.
;; 1c:5531 Registers used: A, DE, HL

1c:5563 call_1c_5563

1c:5597 call_1c_5597

1c:55f1 call_1c_55f1
;; 1c:55ff:r_op _SRAM_CURRENT_FILE
;; 1c:5603:r_op _SRAM_CURRENT_FILE_BANK

1c:57ac data_empty_string_3
1c:57ac .text:000f

1c:57bb call_1c_57bb

;; 1c:57bc:r_op LOW(call_01_6d5c)
;; 1c:57be:r_op HIGH(call_01_6d5c)
;; 1c:57c1:r_op BANK(call_01_6d5c)

1c:589a data_file_screen_strings
1c:589a data_file_screen_load_string
1c:589a .text:0005
1c:589f data_file_screen_save_string
1c:589f .text:0005
1c:58a4 data_file_screen_erase_string
1c:58a4 .text:0006
1c:58aa data_file_screen_blocks_used_string
1c:58aa .text:0011
1c:58bb data_1c_58bb
1c:58bb .text:0003
1c:58be data_1c_58be
1c:58be .text:0003

1c:58c1 call_1c_58c1
;; 1c:58d8:r_op _SRAM_CURRENT_FILE
;; 1c:58dc:r_op _SRAM_CURRENT_FILE_BANK

1c:590b call_1c_590b
;; 1c:5917:r_op _SRAM_CURRENT_FILE
;; 1c:591b:r_op _SRAM_CURRENT_FILE_BANK

1c:594a call_1c_594a

1c:595f call_1c_595f
;; 1c:5962:r_op _SRAM_WORK_TIME_HOURS
;; 1c:5966:r_op _SRAM_WORK_TIME_HOURS_BANK
;; 1c:5976:r_op _SRAM_LAST_SAVED_HOURS
;; 1c:597a:r_op _SRAM_LAST_SAVED_HOURS_BANK
;; 1c:59a7:r_op _SRAM_WORK_TIME_MINUTES
;; 1c:59ab:r_op _SRAM_WORK_TIME_MINUTES_BANK
;; 1c:59c3:r_op _SRAM_LAST_SAVED_MINUTES
;; 1c:59c7:r_op _SRAM_LAST_SAVED_MINUTES_BANK

1c:59e6 call_1c_59e6

;; 1c:5a22:r_op LOW(call_02_77e6)
;; 1c:5a24:r_op HIGH(call_02_77e6)
;; 1c:5a27:r_op BANK(call_02_77e6)

;; 1c:5be1:r_op _SRAM_CURRENT_FILE
;; 1c:5be5:r_op _SRAM_CURRENT_FILE_BANK

;; 1c:5ae3:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1c:5ae5:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1c:5ae8:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1c:5d51:r_op _SRAM_CURRENT_FILE
;; 1c:5d55:r_op _SRAM_CURRENT_FILE_BANK

;; 1c:5c56:r_op LOW(call_1b_4e8a)
;; 1c:5c58:r_op HIGH(call_1b_4e8a)
;; 1c:5c5b:r_op BANK(call_1b_4e8a)

;; 1c:5dd5:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1c:5dd7:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1c:5dda:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1c:5e1c:r_op _PROJECT_SCREEN

;; 1c:5e1e:r_op LOW(call_00_2490)
;; 1c:5e20:r_op HIGH(call_00_2490)
;; 1c:5e23 Unused bank for call_00_2490
;; 1c:5e27 Banked call used for call_00_2490 unnecessarily

1c:602d data_1c_602d
1c:602d .data:0002

1c:602f data_erase_file_strings
1c:602f data_file_erased_string
1c:602f .text:000d
1c:603c data_erase_file_confirm_1_string
1c:603c .text:0010
1c:604c data_erase_file_confirm_2_string
1c:604c .text:0011
1c:605d data_erase_file_yes_string_1
1c:605d .text:0004
1c:6061 data_erase_file_no_string_1
1c:6061 .text:0003
1c:6064 data_erase_file_empty_string
1c:6064 .text:0008
1c:606c data_erase_file_confirm_3_string
1c:606c .text:0007
1c:6073 data_erase_file_yes_string_2
1c:6073 .text:0004
1c:6077 data_erase_file_no_string_2
1c:6077 .text:0003

1c:607a call_read_current_instrument_param_2
;; 1c:607a Read a single param from CURRENT_INSTRUMENT_2.
;; 1c:607a See also call_read_instrument_param.
;; 1c:607a
;; 1c:607a Args: param (see param constants)
;; 1c:607a
;; 1c:607a Result: E
;; 1c:607a
;; 1c:607a Registers used: A, DE, HL

1c:608e call_write_current_instrument_param_2
;; 1c:608e Write a single param for the current instrument.
;; 1c:608e See also call_write_current_instrument_param_1, call_write_instrument_param.
;; 1c:608e
;; 1c:608e Args: param (see param constants), value
;; 1c:608e
;; 1c:608e Registers used: A, DE, HL

1c:60a3 call_1c_60a3

1c:60e2 call_1c_60e2

1c:6184 call_1c_6184

1c:6194 call_1c_6194

1c:61cb call_1c_61cb

1c:61db call_1c_61db

1c:6239 call_1c_6239

1c:6281 call_1c_6281

1c:62bd call_1c_62bd

1c:62e4 call_1c_62e4

1c:6343 call_1c_6343

1c:6374 call_1c_6374

1c:6384 call_1c_6384

1c:63b9 call_1c_63b9

1c:63c9 call_1c_63c9
;; 1c:63cd:r_op rRAMG
;; 1c:63d0:r_op CART_RAM_ENABLE
;; 1c:63d2:r_op rRAMB
;; 1c:644b:r_op rRAMB
;; 1c:648b:r_op rRAMG
;; 1c:648e:r_op CART_RAM_DISABLE

1c:6495 call_1c_6495

1c:64b1 call_1c_64b1

1c:64c1 call_1c_64c1

1c:64de call_1c_64de

1c:64ee call_1c_64ee

1c:6519 call_1c_6519

1c:6533 call_1c_6533

1c:6567 call_1c_6567

;; 1c:65e7:r_op call_read_chain_transpose
;; 1c:65eb:r_op BANK(call_read_chain_transpose)

;; 1c:6628:r_op call_write_chain_transpose
;; 1c:662c:r_op BANK(call_write_chain_transpose)

1c:664c call_1c_664c

1c:6873 call_1c_6873

1c:689f data_1c_689f
1c:689f .data:0008

1c:68a7 call_1c_68a7

1c:6907 call_1c_6907

1c:6921 call_1c_6921

1c:6955 call_1c_6955
;; 1c:6959:r_op rRAMG
;; 1c:695c:r_op CART_RAM_ENABLE
;; 1c:695e:r_op rRAMB
;; 1c:6961:r_op _SRAM_TABLE_COMMANDS_1_BANK
;; 1c:6963:r_op _SRAM_TABLE_COMMANDS_1
;; 1c:6994 Assume that the banks are the same for _SRAM_TABLE_COMMANDS_1 and _SRAM_TABLE_COMMANDS_2
;; 1c:6994:r_op _SRAM_TABLE_COMMANDS_2
;; 1c:69c5:r_op rRAMB
;; 1c:69c8:r_op _SRAM_PHRASE_COMMANDS_BANK
;; 1c:69ca:r_op _SRAM_PHRASE_COMMANDS
;; 1c:69fb:r_op rRAMG
;; 1c:69fe:r_op CART_RAM_DISABLE

1c:6a05 call_1c_6a05

1c:6a20 call_1c_6a20

1c:6a80 call_1c_6a80

1c:6a9a call_1c_6a9a

1c:6ab6 call_1c_6ab6

1c:6ac6 call_1c_6ac6
;; 1c:6ad1:r_op rRAMG
;; 1c:6ad4:r_op CART_RAM_ENABLE
;; 1c:6ad6:r_op rRAMB
;; 1c:6b4b:r_op rRAMG
;; 1c:6b4e:r_op CART_RAM_DISABLE

1c:6b55 call_1c_6b55

1c:6bd7 call_1c_6bd7

1c:6bf4 call_1c_6bf4

1c:6c04 call_1c_6c04

1c:6dea data_1c_6dea
1c:6dea .data:0070

1c:6e5a call_1c_6e5a

1c:6f21 call_1c_6f21
;; 1c:6f24:r_op _SRAM_SYNTH_PARAMS
;; 1c:6f42:r_op _SRAM_SYNTH_PARAMS_BANK

1c:6f75 call_1c_6f75
;; 1c:6f76:r_op _SRAM_VERSION_FLAG
;; 1c:6f7a:r_op _SRAM_VERSION_FLAG_BANK

;; 1c:7098:r_op _SRAM_VERSION_FLAG
;; 1c:709c:r_op _SRAM_VERSION_FLAG_BANK

1c:70a7 data_upgrading_string
1c:70a7 .text:0010

1c:70b7 call_1c_70b7

1c:70cd call_1c_70cd
;; 1c:70e6:l_op [rRAMB]
;; 1c:70f4:r_op CART_RAM_ENABLE
;; 1c:70f7:l_op [rRAMG]
;; 1c:7100:l_op [rRAMG]

1c:710a call_1c_710a

1c:7116 call_1c_7116

1c:714b call_request_send_byte
;; 1c:714b Request an IO transfer and send a byte.
;; 1c:714b This subroutine will idle briefly after sending the byte.
;; 1c:714b
;; 1c:714b Args: byte
;; 1c:714b
;; 1c:714b Registers used: A, DE, HL

;; 1c:714e:l_op _IO_TRANSFER_REQUESTED

;; 1c:714e Enable transfer request bytes

;; 1c:7151 Throw error if extra bytes enabled
;; 1c:7151:l_op _IO_TRANSFER_REQUESTED

1c:7159 .jump_send_byte

;; 1c:7163 Check gameboy type

1c:7170 .jump_set_delay_3ms

1c:7172 .jump_delay

;; 1c:717a Return

1c:717c call_1c_717c

;; 1c:7183:l_op _NORMAL_CURSOR_MODE

1c:729d call_wait_io_receive
;; 1c:729d Wait to receive a byte from IO and write it to an address.
;; 1c:729d Once IO_STATUS is no longer in _IO_RECEIVING mode, reads the byte from IO_IN, writes it to the address, and returns.
;; 1c:729d If a button is pressed, it will do the same.
;; 1c:729d
;; 1c:729d Args: address
;; 1c:729d
;; 1c:729d Exit conditions:
;; 1c:729d   receive_byte will be called, so that another byte can be received
;; 1c:729d
;; 1c:729d Registers used: A, DE, HL

1c:729e .jump_get_io_status

;; 1c:72a2:l_op _IO_RECEIVING

;; 1c:72a7 Read held buttons
;; 1c:72ad 0 = no buttons held

1c:72b0 .jump_read_address

;; 1c:72b5 Read IO in byte
;; 1c:72b9 Store IO in byte at address
;; 1c:72bd Return

1c:72bf call_1c_72bf

;; 1c:72c5:r_op _NO_CURSOR_MODE

;; 1c:73a3:r_op _NORMAL_CURSOR_MODE

1c:73b1 call_1c_73b1

1c:73cc call_1c_73cc

1c:73d5 call_1c_73d5
;; 1c:73e1:l_op [rRAMB]

1c:73eb data_1c_73eb
1c:73eb .data:000f
;; 1c:7409:l_op [rRAMG]
;; 1c:7439:l_op [rRAMG]

1c:741d data_1c_741d
1c:741d .data:000f

1c:744d call_1c_744d

1c:7450 call_1c_7450

1c:748f call_1c_748f
;; 1c:7496:l_op [rRAMB]
;; 1c:74a5:r_op CART_RAM_ENABLE
;; 1c:74a8:l_op [rRAMG]
;; 1c:74b7:l_op [rRAMG]

1c:74c2 call_1c_74c2

1c:74ed call_1c_74ed

1c:753d call_1c_753d

1c:7582 data_bank_1c_padding
;; 1c:7582 1c:7582
;; 1c:7582:replace:0a7e ds $8000 - @, $ff

1d:4000 call_1d_4000

;; 1d:402e:r_op _SRAM_GROOVES
;; 1d:404b:r_op _SRAM_GROOVES_BANK

1d:4058 data_1d_4058
1d:4058 .data:0002

1d:405a call_read_groove_row
;; 1d:405a Read the groove value at a particular row in the current groove.
;; 1d:405a Args: row
;; 1d:405a Result: E
;; 1d:405a Registers used: A, DE, HL

;; 1d:4060 Make sure the row does not exceed 0xf

1d:4067 .jump_throw_exception

1d:406a .jump_verify_groove

;; 1d:406e:l_op _GROOVES

1d:4076 .jump_calculate_address_1

;; 1d:407c The following loop will rotate the groove left 4 times, multiplying it by 16.

1d:4080 .jump_calculate_address_2
1d:4085 .jump_calculate_address_3

;; 1d:4088:r_op _SRAM_GROOVES
;; 1d:409f Read the groove row
;; 1d:40a0:r_op _SRAM_GROOVES_BANK

;; 1d:40aa Return

1d:40ae call_1d_40ae

1d:40ea call_1d_40ea

1d:41f6 data_1d_41f6
1d:41f6 .text:0007
1d:41fd data_1d_41fd
1d:41fd .text:0005

1d:4202 call_1d_4202

;; 1d:4219:r_op LOW(call_01_6d5c)
;; 1d:421b:r_op HIGH(call_01_6d5c)
;; 1d:421e:r_op BANK(call_01_6d5c)

;; 1d:422d:r_op LOW(call_1f_6ff1)
;; 1d:422f:r_op HIGH(call_1f_6ff1)
;; 1d:4232:r_op BANK(call_1f_6ff1)

1d:423d call_1d_423d

1d:4283 call_1d_4283

1d:4382 data_1d_4382
1d:4382 .text:0003

1d:4385 call_1d_4385

1d:43bc call_1d_43bc

1d:43f7 call_1d_43f7

;; 1d:4479:l_op _SELECT_CURSOR_MODE

;; 1d:4486:r_op call_restore_backup_selection
;; 1d:448a:r_op BANK(call_restore_backup_selection)

;; 1d:449b:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1d:449d:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1d:44a2:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1d:44ab:r_op call_05_4040
;; 1d:44af:r_op BANK(call_05_4040)

;; 1d:4528:l_op _SELECT_CURSOR_MODE

;; 1d:4564:l_op _SELECT_CURSOR_MODE

;; 1d:457b:l_op _SELECT_CURSOR_MODE

;; 1d:4631:l_op _SELECT_CURSOR_MODE

;; 1d:46e2:l_op _SELECT_CURSOR_MODE

;; 1d:48df:r_op _NORMAL_CURSOR_MODE

;; 1d:49da:l_op _NO_CURSOR_MODE

;; 1d:49eb:l_op _SELECT_CURSOR_MODE

;; 1d:4a21:r_op LOW(call_02_77e6)
;; 1d:4a23:r_op HIGH(call_02_77e6)
;; 1d:4a26:r_op BANK(call_02_77e6)

;; 1d:4a5d:r_op _SONG_SCREEN

;; 1d:4a65:r_op _CHAIN_SCREEN

;; 1d:4a78:r_op _GROOVE_SCREEN

;; 1d:4a67:r_op LOW(call_02_7b9b)
;; 1d:4a69:r_op HIGH(call_02_7b9b)
;; 1d:4a6c:r_op BANK(call_02_7b9b)

;; 1d:4a87:r_op call_move_screen_up
;; 1d:4a8b:r_op BANK(call_move_screen_up)

;; 1d:4a94:r_op LOW(call_00_2490)
;; 1d:4a96:r_op HIGH(call_00_2490)
;; 1d:4a99 Unused bank for call_00_2490
;; 1d:4a9d Banked call used for call_00_2490 unnecessarily

;; 1d:4aab:l_op _SELECT_CURSOR_MODE

;; 1d:4ad2:l_op _SELECT_CURSOR_MODE

;; 1d:4b63:r_op call_write_backup_selection
;; 1d:4b67:r_op BANK(call_write_backup_selection)

1d:4b8d data_cancel_select_string_2
1d:4b8d .text:000e
1d:4b9b data_select_string
1d:4b9b .text:0007

1d:4ba2 call_1d_4ba2

;; 1d:4bc0:r_op _NORMAL_CURSOR_MODE

;; 1d:4c4e:r_op LOW(call_1c_717c)
;; 1d:4c50:r_op HIGH(call_1c_717c)
;; 1d:4c53:r_op BANK(call_1c_717c)

1d:4c61 data_cut_string
1d:4c61 .text:0004
1d:4c65 data_copy_string
1d:4c65 .text:0005

1d:4c6a call_1d_4c6a

1d:4cdf data_paste_string
1d:4cdf .text:0006

1d:4ce5 call_1d_4ce5

1d:4d5f call_1d_4d5f

1d:4d88 call_1d_4d88

1d:4ef7 data_1d_4ef7
1d:4ef7 .data:0200
1d:50f7 data_1d_50f7
1d:50f7 .data:00a0

1d:5197 call_1d_5197

1d:532a call_1d_532a

1d:569c call_1d_569c

1d:56c4 jump_table_1d_56c4

1d:58e1 call_increment_synth_phase_value
;; 1d:58e1 Add 1 to a value, capping out at 0x1f and cycling back to 0x00.
;; 1d:58e1 Used for phase calculations.
;; 1d:58e1
;; 1d:58e1 Args: value
;; 1d:58e1
;; 1d:58e1 Result: E
;; 1d:58e1
;; 1d:58e1 Registers used: A, DE, HL

1d:58ed call_1d_58ed

1d:5bc4 call_1d_5bc4

1d:5e5a call_1d_5e5a

1d:5f07 call_1d_5f07

1d:5f30 call_1d_5f30

1d:5f97 call_1d_5f97
;; 1d:5fb9 First frame of last synth
;; 1d:5fb9:r_op _SRAM_WAVE_FRAMES + (_SYNTHS - 1) * _SYNTH_FRAMES * _SYNTH_FRAME_SIZE

1d:603c call_1d_603c

1d:60ae call_1d_60ae

1d:60ec data_1d_60ec
1d:60ec .data:0030

1d:611c call_1d_611c

1d:614b call_1d_614b

1d:619a call_1d_619a

1d:62af call_1d_62af

1d:62c2 jump_table_1d_62c2

1d:62fc data_resync_type_strings
1d:62fc data_pinch_resync_type_string
1d:62fc .text:0007
1d:6303 data_warp_resync_type_string
1d:6303 .text:0007
1d:630a data_default_resync_type_string
1d:630a .text:0007
1d:6311 data_resync2_resync_type_string
1d:6311 .text:0007

1d:6318 call_read_current_synth_param
;; 1d:6318 Read a synth param from the current synth screen.
;; 1d:6318 Args: param
;; 1d:6318 Result: E
;; 1d:6318 Registers used: A, DE, HL

;; 1d:6321 The loop below will shift the phrase number left 4 times, multiplying it by 16.

1d:6325 .jump_calculate_address_1
1d:632a .jump_calculate_address_2

;; 1d:632d:r_op _SRAM_SYNTH_PARAMS
;; 1d:634d:r_op _SRAM_SYNTH_PARAMS_BANK

1d:635b call_does_current_synth_have_frame_signal
;; 1d:635b Check if the current synth has a frame signal type.
;; 1d:635b If it does, return true. Otherwise return false.
;; 1d:635b
;; 1d:635b Result: E
;; 1d:635b
;; 1d:635b Registers used: A, DE, HL

;; 1d:635c:r_op _SIGNAL_SYNTH_PARAM
;; 1d:6367:l_op _FRAME_SYNTH_SIGNAL

1d:6370 .jump_false
1d:6371 .jump_return

1d:6375 call_1d_6375

1d:63ad jump_table_1d_63ad

1d:63f7 data_filter_type_strings
1d:63f7 data_empty_filter_type_string
1d:63f7 .text:0006
1d:63fd data_lowpass_filter_type_string
1d:63fd .text:0006
1d:6403 data_highpass_filter_type_string
1d:6403 .text:0006
1d:6409 data_bandpass_filter_type_string
1d:6409 .text:0006
1d:640f data_allpass_filter_type_string
1d:640f .text:0006
1d:6415 data_notch_filter_type_string
1d:6415 .text:0006

1d:641b call_1d_641b

1d:643e jump_table_1d_643e

1d:6490 data_1d_6490
1d:6490 .data:0005
1d:6495 data_1d_6495
1d:6495 .data:0005
1d:649a data_1d_649a
1d:649a .data:0005
1d:649f data_1d_649f
1d:649f .data:0004
1d:64a3 data_1d_64a3
1d:64a3 .data:0003

1d:64a6 call_1d_64a6

1d:650a call_1d_650a

1d:657e call_1d_657e

1d:65ba data_distortion_type_strings
1d:65ba data_clip_distortion_type_string
1d:65ba .text:0005
1d:65bf data_fold_distortion_type_string
1d:65bf .text:0005
1d:65c4 data_wrap_distortion_type_string
1d:65c4 .text:0005

1d:65c9 call_1d_65c9
;; 1d:65de:r_op _SRAM_SYNTH_PARAMS
;; 1d:664b:r_op _SRAM_SYNTH_PARAMS_BANK

1d:68ac data_1d_68ac
1d:68ac .text:0003
1d:68af data_1d_68af
1d:68af .text:0003

1d:68b2 call_1d_68b2

;; 1d:68cf:r_op LOW(call_01_6d5c)
;; 1d:68d1:r_op HIGH(call_01_6d5c)
;; 1d:68d4:r_op BANK(call_01_6d5c)

;; 1d:68e0:r_op LOW(call_1f_6ff1)
;; 1d:68e2:r_op HIGH(call_1f_6ff1)
;; 1d:68e5:r_op BANK(call_1f_6ff1)

;; 1d:68f1:r_op call_05_4040
;; 1d:68f5:r_op BANK(call_05_4040)

1d:6900 call_1d_6900
;; 1d:6928:r_op _SRAM_SYNTH_PARAMS
;; 1d:693d:r_op _SRAM_SYNTH_PARAMS_BANK

1d:6b3a call_1d_6b3a

1d:6d16 call_1d_6d16

1d:6d76 call_1d_6d76

1d:6de4 data_hand_drawn_waves_warning_strings
1d:6de4 data_hand_drawn_waves_warning_1_string
1d:6de4 .text:000a
1d:6dee data_hand_drawn_waves_warning_2_string
1d:6dee .text:000b
1d:6df9 data_hand_drawn_waves_warning_3_string
1d:6df9 .text:0007
1d:6e00 data_hand_drawn_waves_warning_yes_string
1d:6e00 .text:0004
1d:6e04 data_hand_drawn_waves_warning_no_string
1d:6e04 .text:0003

1d:6e07 call_1d_6e07

;; 1d:6e08:r_op LOW(call_00_2490)
;; 1d:6e0a:r_op HIGH(call_00_2490)
;; 1d:6e0d Unused bank for call_00_2490
;; 1d:6e11 Banked call used for call_00_2490 unnecessarily

1d:6e18 call_1d_6e18

1d:6e75 call_write_current_synth_param
;; 1d:6e75 Set a param in the current synth.
;; 1d:6e75 Args: param, value
;; 1d:6e75 Registers used: A, D, HL

;; 1d:6e7e The loop below will shift the synth number left 4 times, multiplying it by 16.

1d:6e82 .jump_calculate_address_1
1d:6e87 .jump_calculate_address_2

;; 1d:6e8a:r_op _SRAM_SYNTH_PARAMS
;; 1d:6eb0:r_op _SRAM_SYNTH_PARAMS_BANK

1d:6ebd call_add_synth_param
;; 1d:6ebd Add an amount to a synth param and draw its updated digits.
;; 1d:6ebd Args: param (see synth param constants), amount, max
;; 1d:6ebd Registers used: A, DE, HL

;; 1d:6ec6 The following loop will shift CURRENT_SYNTH_SCREEN left 4 times, multiplying it by 16.

1d:6eca .jump_calculate_address_1
1d:6ecf .jump_calculate_address_2

;; 1d:6ed2:r_op _SRAM_SYNTH_PARAMS
;; 1d:6eed Read synth param
;; 1d:6ef2:r_op _SRAM_SYNTH_PARAMS_BANK

;; 1d:6efc Add to synth param

;; 1d:6f16 Check if synth param + addition amount is greater than max

;; 1d:6f21 Set synth param to max

1d:6f25 .jump_draw_digits

;; 1d:6f31 Write synth param

;; 1d:6f42 Return

1d:6f46 call_subtract_synth_param
;; 1d:6f46 Subtract an amount from a synth param and draw its updated digits.
;; 1d:6f46 Args: param (see synth param constants), amount
;; 1d:6f46 Registers used: A, DE, HL

;; 1d:6f4f The following loop will shift CURRENT_SYNTH_SCREEN left 4 times, multiplying it by 16.

1d:6f53 .jump_calculate_address_1
1d:6f58 .jump_calculate_address_2

;; 1d:6f5b:r_op _SRAM_SYNTH_PARAMS
;; 1d:6f76 Read synth param
;; 1d:6f7b:r_op _SRAM_SYNTH_PARAMS_BANK

;; 1d:6f83 Subtract from synth param

;; 1d:6f9e Check if synth param is greater than subtraction amount

;; 1d:6fa4 Set synth param to 0

1d:6faa .jump_draw_digits

;; 1d:6fb5 Write synth param

;; 1d:6fc7 Return

1d:6fcb call_increment_synth_param
;; 1d:6fcb Decrement a synth param and draw its updated digts.
;; 1d:6fcb Args: param (see synth param constants), max
;; 1d:6fcb Registers used: A, DE, HL

;; 1d:6fd4 The following loop will shift CURRENT_SYNTH_SCREEN left 4 times, multiplying it by 16.

1d:6fd8 .jump_calculate_address_1
1d:6fdd .jump_calculate_address_2

;; 1d:6fe0:r_op _SRAM_SYNTH_PARAMS
;; 1d:6ffb Read synth param
;; 1d:7000:r_op _SRAM_SYNTH_PARAMS_BANK

;; 1d:700a Check if synth param is at max

1d:7013 .jump_increment_param

;; 1d:7014 Draw digits

;; 1d:701d Write synth param

;; 1d:702e Return

1d:7032 call_decrement_synth_param
;; 1d:7032 Decrement a synth param and draw its updated digits.
;; 1d:7032 Args: param (see synth param constants)
;; 1d:7032 Registers used: A, DE, Hl

;; 1d:703b The following loop will shift CURRENT_SYNTH_SCREEN left 4 times, multiplying it by 16.

1d:703f .jump_calculate_address_1
1d:7044 .jump_calculate_address_2

;; 1d:7047:r_op _SRAM_SYNTH_PARAMS
;; 1d:7062 Read synth param
;; 1d:7067:r_op _SRAM_SYNTH_PARAMS_BANK

;; 1d:7076 Decrement param

;; 1d:7078 Draw digits

;; 1d:7080 Write synth param

1d:7091 .jump_return

1d:7095 call_1d_7095

1d:70c3 call_1d_70c3

1d:70eb call_1d_70eb

1d:7118 call_1d_7118

1d:713f call_1d_713f

;; 1d:7226:r_op call_05_7181
;; 1d:722a:r_op BANK(call_05_7181)

1d:7315 jump_table_1d_7315

1d:735c jump_table_1d_735c

1d:73b7 jump_table_1d_73b7

1d:7627 jump_table_1d_7627

1d:7872 jump_table_1d_7872

1d:7a15 jump_table_1d_7a15

;; 1d:7b9a:r_op LOW(call_02_77e6)
;; 1d:7b9c:r_op HIGH(call_02_77e6)
;; 1d:7b9f:r_op BANK(call_02_77e6)

;; 1d:7bc2:r_op LOW(call_02_7b9b)
;; 1d:7bc4:r_op HIGH(call_02_7b9b)
;; 1d:7bc7:r_op BANK(call_02_7b9b)

;; 1d:7be2:r_op call_move_screen_down
;; 1d:7be6:r_op BANK(call_move_screen_down)

;; 1d:7c04:r_op call_move_screen_left
;; 1d:7c08:r_op BANK(call_move_screen_left)

;; 1d:7c60:r_op call_move_screen_right
;; 1d:7c64:r_op BANK(call_move_screen_right)

;; 1d:7c71 Unused bank for call_00_2490
;; 1d:7c75 Banked call used for call_00_2490 unnecessarily

;; 1d:7c8b:r_op _NORMAL_CURSOR_MODE

;; 1d:7ca4:r_op _SRAM_SYNTH_PARAMS
;; 1d:7cbf:r_op _SRAM_SYNTH_PARAMS_BANK

;; 1d:7cfb:r_op LOW(call_1c_717c)
;; 1d:7cfd:r_op HIGH(call_1c_717c)
;; 1d:7d00:r_op BANK(call_1c_717c)

;; 1d:7d12:l_op _NO_CURSOR_MODE

;; 1d:7d40:r_op _SRAM_SYNTH_PARAMS
;; 1d:7d6b:r_op _SRAM_SYNTH_PARAMS_BANK

1d:7d92 data_copied_synth_string
1d:7d92 .text:000d
1d:7d9f data_pasted_synth_string
1d:7d9f .text:000d

1d:7dac call_1d_7dac

1d:7ddf data_bank_1d_padding
;; 1d:7ddf 1d:7ddf
;; 1d:7ddf:replace:0221 ds $8000 - @, $ff

1e:4000 call_1e_4000

;; 1e:4005:l_op _WAVE_EDITOR_SCREEN

1e:42c8 data_1e_42c8
1e:42c8 .data:0062

1e:432a tileset
1e:432a .image:0300:w64

;; 1e:4045:l_op _PHRASE_SCREEN
;; 1e:404a:l_op _GROOVE_SCREEN
;; 1e:404f:l_op _CHAIN_SCREEN
;; 1e:4054:l_op _SONG_SCREEN
;; 1e:4059:l_op _TABLE_SCREEN
;; 1e:405e:l_op _WORD_SCREEN

1e:462a data_1e_462a
1e:462a .data:0082

1e:46ac font_3_content
1e:46ac .image:00470:w64
1e:4b1c data_1e_4b1c
1e:4b1c .data:09a4
1e:54c0 data_1e_54c0
1e:54c0 .data:0082
1e:5542 font_1_content
1e:5542 .image:00470:w64
1e:59b2 data_1e_59b2
1e:59b2 .data:04d2
1e:5e84 data_1e_5e84
1e:5e84 .data:04d2
1e:6356 data_1e_6356
1e:6356 .data:0082
1e:63d8 font_2_content
1e:63d8 .image:00470:w64
1e:6848 data_1e_6848
1e:6848 .data:04d2
1e:6d1a data_1e_6d1a
1e:6d1a .data:0ce0

1e:79fa call_1e_79fa

1e:7a38 call_1e_7a38

1e:7a4b call_1e_7a4b

1e:7aa0 call_1e_7aa0

1e:7bab data_bank_1e_padding
;; 1e:7bab 1e:7bab
;; 1e:7bab:replace:0455 ds $8000 - @, $ff

1f:4000 call_draw_table_type_instrument_params
;; 1f:4000 Draw the table on/step instrument param text for the current instrument.
;; 1f:4000 Registers used: A, DE, HL

;; 1f:4001:r_op _INSTRUMENT_TYPE_INSTRUMENT_PARAM

;; 1f:400c Check that instrument type is valid

1f:401b .jump_table_instrument_type
1f:4027 .jump_handle_pulse_instrument_type
1f:4032 .jump_handle_wave_instrument_type
1f:403d .jump_handle_kit_instrument_type
1f:4048 .jump_handle_noise_instrument_type

;; 1f:4040 The table is drawn on a different row for noise instruments

1f:4050 .jump_read_instrument_params

;; 1f:4050:r_op _TABLE_ON_INSTRUMENT_PARAM
;; 1f:405b Check table on bit

;; 1f:4060:r_op _TABLE_STEP_INSTRUMENT_PARAM
;; 1f:406b Check table step bit

1f:4078 .jump_load_tick_type_string

1f:407d .jump_return_1

1f:4080 .jump_load_off_string

1f:4085 .jump_write_bg_map_attrs

;; 1f:408b Return

1f:408d data_instrument_table_type_strings
1f:408d data_step_instrument_table_type_string
1f:408d .text:0005
1f:4092 data_tick_instrument_table_type_string
1f:4092 .text:0005
1f:4097 data_off_instrument_table_type_string
1f:4097 .text:0005

1f:409c call_draw_table_instrument_param
;; 1f:409c Draw the table instrument param for the current instrument.
;; 1f:409c Registers used: A, DE, HL

;; 1f:409d:r_op _TABLE_ON_INSTRUMENT_PARAM

;; 1f:40a9 Check that table number does not exceed 0x1f

;; 1f:40af Mask the table number so it does not exceed 0x1f

1f:40bc .jump_write_empty_param
1f:40c5 .jump_return

1f:40c7 data_empty_table_on_param_value_string
1f:40c7 .text:0003

1f:40ca call_1f_40ca

1f:4113 data_kit_loop_type_strings
1f:4113 data_attack_kit_loop_type_string
1f:4113 .text:0004
1f:4117 data_on_kit_loop_type_string
1f:4117 .text:0004
1f:411b data_off_kit_loop_type_string
1f:411b .text:0004

1f:411f call_1f_411f

1f:4157 call_read_current_instrument_env_1_byte_1
;; 1f:4157 Read the first byte from the envelope stage 1 param in the current instrument.
;; 1f:4157 Result: E
;; 1f:4157 Registers used: A, DE, HL

;; 1f:4158:r_op _ENV_STAGE_1_INSTRUMENT_PARAM

;; 1f:4163 Get first byte

1f:4169 call_1f_4169

1f:418a call_1f_418a

1f:4236 data_1f_4236
1f:4236 .text:0007

1f:423d call_1f_423d

;; 1f:42f9:r_op LOW(call_01_518c)
;; 1f:42fb:r_op HIGH(call_01_518c)
;; 1f:4303:r_op BANK(call_01_518c)

;; 1f:4314:r_op LOW(call_01_522d)
;; 1f:4316:r_op HIGH(call_01_522d)
;; 1f:431e:r_op BANK(call_01_522d)

1f:438f data_instrument_length_strings
1f:438f data_unlim_instrument_length_string
1f:438f .text:0006
1f:4395 data_empty_instrument_length_string
1f:4395 .text:0004

1f:4399 call_1f_4399

;; 1f:4443:r_op LOW(call_01_5208)
;; 1f:4445:r_op HIGH(call_01_5208)
;; 1f:444b:r_op BANK(call_01_5208)

;; 1f:445c:r_op LOW(call_01_522d)
;; 1f:445e:r_op HIGH(call_01_522d)
;; 1f:4466:r_op BANK(call_01_522d)

1f:44a3 data_noise_instrument_param_strings
1f:44a3 data_unlim_noise_instrument_param_string
1f:44a3 .text:0006
1f:44a9 data_empty_noise_instrument_param_string
1f:44a9 .text:0004
1f:44ad data_safe_noise_instrument_param_string
1f:44ad .text:0005
1f:44b2 data_free_noise_instrument_param_string
1f:44b2 .text:0005

1f:44b7 call_1f_44b7

1f:44dd call_1f_44dd

;; 1f:460a:r_op LOW(call_03_4a63)
;; 1f:460c:r_op HIGH(call_03_4a63)
;; 1f:4614:r_op BANK(call_03_4a63)

;; 1f:4711:r_op LOW(call_01_518c)
;; 1f:4713:r_op HIGH(call_01_518c)
;; 1f:471b:r_op BANK(call_01_518c)

1f:473e data_1f_473e
1f:473e .text:0004
1f:4742 data_1f_4742
1f:4742 .text:0004
1f:4746 data_1f_4746
1f:4746 .text:0004
1f:474a data_1f_474a
1f:474a .text:0004

1f:474e call_1f_474e

;; 1f:47e6:r_op LOW(call_01_518c)
;; 1f:47e8:r_op HIGH(call_01_518c)
;; 1f:47f0:r_op BANK(call_01_518c)

;; 1f:4801:r_op LOW(call_01_522d)
;; 1f:4803:r_op HIGH(call_01_522d)
;; 1f:480b:r_op BANK(call_01_522d)

;; 1f:482e:r_op call_03_4cf8
;; 1f:4832:r_op BANK(call_03_4cf8)

;; 1f:483b:r_op call_03_4d34
;; 1f:483f:r_op BANK(call_03_4d34)

;; 1f:4848:r_op call_03_49b4
;; 1f:484c:r_op BANK(call_03_49b4)

;; 1f:4855:r_op call_draw_wave_loop_pos_instrument_param
;; 1f:4859:r_op BANK(call_draw_wave_loop_pos_instrument_param)

;; 1f:4862:r_op call_03_49e0
;; 1f:4866:r_op BANK(call_03_49e0)

1f:48c4 call_write_chain_phrase
;; 1f:48c4 Write a phrase number to a row in the given chain.
;; 1f:48c4 Args: chain, row, phrase
;; 1f:48c4 Registers used: A, DE, HL

;; 1f:48ca Chains cannot exceed 0x7f so bit 7 should never be set

1f:48d2 .jump_verify_row

;; 1f:48d5:l_op _CHAIN_ROWS

1f:48dd .jump_calculate_address_1
;; 1f:48e2 The following loop shifts the chain number left 4 times, multiplying it by 16.
1f:48e6 .jump_calculate_address_2
1f:48eb .jump_calculate_address_3

;; 1f:48ee:r_op _SRAM_CHAIN_PHRASES
;; 1f:4906 Write the phrase to the chain
;; 1f:490c:r_op _SRAM_CHAIN_PHRASES_BANK

;; 1f:4917 Return

1f:4919 data_default_wave_frame_4
1f:4919 .data:0010

1f:4929 call_1f_4929
;; 1f:493c:r_op _SRAM_INSTRUMENT_ALLOC
;; 1f:494b:r_op _SRAM_INSTRUMENT_ALLOC_BANK

1f:4a01 data_instrument_param_defaults
1f:4a01 data_pulse_instrument_param_defaults
1f:4a01 .data:000b
1f:4a0c data_noise_instrument_param_defaults
1f:4a0c .data:000b
1f:4a17 data_wave_instrument_param_defaults
1f:4a17 .data:000e

1f:4a25 call_1f_4a25

1f:4a64 call_1f_4a64

;; 1f:4a80:r_op LOW(call_write_phrase_instrument)
;; 1f:4a82:r_op HIGH(call_write_phrase_instrument)
;; 1f:4a98:r_op BANK(call_write_phrase_instrument)

1f:4ab3 call_1f_4ab3

1f:4af8 call_1f_4af8
;; 1f:4b0f:r_op _SRAM_TABLE_TRANSPOSE
;; 1f:4b1e:r_op _SRAM_TABLE_TRANSPOSE_BANK
;; 1f:4b37:r_op _SRAM_TABLE_COMMANDS_1
;; 1f:4b3e:r_op _SRAM_TABLE_COMMANDS_1_BANK
;; 1f:4b57:r_op _SRAM_TABLE_COMMANDS_2
;; 1f:4b5e:r_op _SRAM_TABLE_COMMANDS_2_BANK
;; 1f:4b77:r_op _SRAM_TABLE_VOLS
;; 1f:4b7e:r_op _SRAM_TABLE_VOLS_BANK

1f:4b8c call_1f_4b8c

1f:4bbb call_1f_4bbb
;; 1f:4be9:r_op _SRAM_CHAIN_ALLOC
;; 1f:4bf8:r_op _SRAM_CHAIN_ALLOC_BANK

;; 1f:4c1a:r_op LOW(call_01_4d67)
;; 1f:4c1c:r_op HIGH(call_01_4d67)
;; 1f:4c24:r_op BANK(call_01_4d67)

;; 1f:4c54:r_op LOW(call_01_75c6)
;; 1f:4c56:r_op HIGH(call_01_75c6)
;; 1f:4c59:r_op BANK(call_01_75c6)

1f:4c68 call_1f_4c68
;; 1f:4d1b:r_op _SRAM_INSTRUMENT_ALLOC
;; 1f:4d2e:r_op _SRAM_INSTRUMENT_ALLOC_BANK

;; 1f:4e1b:r_op rRAMB
;; 1f:4e21:r_op rRAMG
;; 1f:4e24:r_op CART_RAM_ENABLE
;; 1f:4e39:r_op rRAMG
;; 1f:4e3c:r_op CART_RAM_DISABLE

;; 1f:4cda:r_op LOW(call_read_phrase_instrument)
;; 1f:4cdd:r_op HIGH(call_read_phrase_instrument)
;; 1f:4cf6:r_op BANK(call_read_phrase_instrument)

;; 1f:4dc1:r_op LOW(call_01_4a49)
;; 1f:4dc3:r_op HIGH(call_01_4a49)
;; 1f:4dcb:r_op BANK(call_01_4a49)

1f:4e9f call_1f_4e9f

1f:4eb7 call_1f_4eb7

1f:4ec9 call_1f_4ec9

1f:4ee4 call_1f_4ee4
;; 1f:4f02:r_op _SRAM_PHRASE_COMMAND_VALUES
;; 1f:4f20:r_op _SRAM_PHRASE_COMMAND_VALUES_BANK

1f:4f60 call_1f_4f60
;; 1f:4f74:r_op _SRAM_TABLE_COMMANDS_1
;; 1f:4f7e:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 1f:4f88:r_op _SRAM_TABLE_COMMANDS_2
;; 1f:4f92:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 1f:4fb0 Assume the banks are the same for _SRAM_TABLE_*
;; 1f:4fb0:r_op _SRAM_TABLE_COMMANDS_1_BANK

1f:502c call_1f_502c

;; 1f:502d:r_op LOW(call_01_4f99)
;; 1f:502f:r_op HIGH(call_01_4f99)
;; 1f:5037:r_op BANK(call_01_4f99)

1f:5043 call_1f_5043

1f:5067 call_1f_5067

1f:5091 call_1f_5091

1f:50d8 call_1f_50d8

1f:50fa call_1f_50fa

1f:511e call_1f_511e

1f:5154 call_1f_5154
;; 1f:5173:r_op _SRAM_TABLE_COMMANDS_1
;; 1f:517d:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 1f:5187:r_op _SRAM_TABLE_COMMANDS_2
;; 1f:5191:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 1f:519b:r_op _SRAM_TABLE_TRANSPOSE

1f:5206 call_1f_5206

1f:524e call_1f_524e

1f:5275 call_1f_5275

;; 1f:528c:r_op LOW(call_01_4e43)
;; 1f:528e:r_op HIGH(call_01_4e43)
;; 1f:5293:r_op BANK(call_01_4e43)

;; 1f:52e9:r_op LOW(call_01_4d67)
;; 1f:52ec:r_op HIGH(call_01_4d67)
;; 1f:5301:r_op BANK(call_01_4d67)

;; 1f:5330:r_op LOW(call_01_4f59)
;; 1f:5332:r_op HIGH(call_01_4f59)
;; 1f:5337:r_op BANK(call_01_4f59)

;; 1f:536d:r_op LOW(call_write_chain_transpose)
;; 1f:5370:r_op HIGH(call_write_chain_transpose)
;; 1f:5390:r_op BANK(call_write_chain_transpose)

1f:53ae call_1f_53ae

;; 1f:53bd:r_op LOW(call_read_chain_phrase)
;; 1f:53bf:r_op HIGH(call_read_chain_phrase)
;; 1f:53cb:r_op BANK(call_read_chain_phrase)

;; 1f:53dd:r_op LOW(call_01_4cfb)
;; 1f:53df:r_op HIGH(call_01_4cfb)
;; 1f:53e9:r_op BANK(call_01_4cfb)

1f:53fc call_1f_53fc

;; 1f:53fd:r_op LOW(call_01_4f59)
;; 1f:53ff:r_op HIGH(call_01_4f59)
;; 1f:5407:r_op BANK(call_01_4f59)

1f:5413 call_1f_5413

1f:5437 call_1f_5437
;; 1f:544b:r_op rRAMG
;; 1f:544e:r_op CART_RAM_ENABLE
;; 1f:5498:r_op rRAMB
;; 1f:54d3:r_op rRAMB
;; 1f:54d6:r_op _SRAM_PHRASE_INSTRUMENTS_BANK
;; 1f:54dd:r_op _SRAM_PHRASE_INSTRUMENTS
;; 1f:54ed:r_op _SRAM_PHRASE_INSTRUMENTS
;; 1f:552e:r_op rRAMB
;; 1f:5588 Assume the banks are the same for _SRAM_BOOKMARKS and _SRAM_PHRASE_INSTRUMENTS
;; 1f:5588:r_op _SRAM_BOOKMARKS
;; 1f:5598:r_op _SRAM_BOOKMARKS

1f:55df call_1f_55df
;; 1f:55f3:r_op rRAMG
;; 1f:55f6:r_op CART_RAM_ENABLE
;; 1f:561b:r_op _SRAM_CHAIN_PHRASES
;; 1f:5635:r_op _SRAM_CHAIN_PHRASES
;; 1f:5640:r_op rRAMB
;; 1f:5643:r_op _SRAM_CHAIN_PHRASES_BANK
;; 1f:5680:r_op _SRAM_CHAIN_TRANSPOSES
;; 1f:5690:r_op _SRAM_CHAIN_TRANSPOSES

1f:56d7 call_1f_56d7
;; 1f:5709:r_op rRAMG
;; 1f:570c:r_op CART_RAM_ENABLE
;; 1f:570e:r_op rRAMB
;; 1f:5711:r_op _SRAM_TABLE_COMMANDS_1_BANK
;; 1f:5718:r_op _SRAM_TABLE_COMMANDS_1
;; 1f:5732:r_op _SRAM_TABLE_COMMANDS_1
;; 1f:5778:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 1f:5788:r_op _SRAM_TABLE_COMMAND_VALUES_1
;; 1f:57ce:r_op _SRAM_TABLE_COMMANDS_2
;; 1f:57de:r_op _SRAM_TABLE_COMMANDS_2
;; 1f:5824:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 1f:5834:r_op _SRAM_TABLE_COMMAND_VALUES_2
;; 1f:587a:r_op _SRAM_TABLE_VOLS
;; 1f:588a:r_op _SRAM_TABLE_VOLS
;; 1f:5895:r_op rRAMB
;; 1f:58d5:r_op _SRAM_TABLE_TRANSPOSE
;; 1f:58e5:r_op _SRAM_TABLE_TRANSPOSE
;; 1f:58f0:r_op rRAMB

1f:5931 call_1f_5931
;; 1f:5934:r_op _SRAM_CHAIN_PHRASES
;; 1f:5938:r_op rRAMG
;; 1f:593b:r_op CART_RAM_ENABLE
;; 1f:593d:r_op rRAMB
;; 1f:5940:r_op _SRAM_CHAIN_PHRASES_BANK
;; 1f:595d:r_op rRAMG
;; 1f:5960:r_op CART_RAM_DISABLE
;; 1f:59b9:r_op rRAMB

;; 1f:5963:r_op LOW(call_01_4dd3)
;; 1f:5965:r_op HIGH(call_01_4dd3)
;; 1f:596d:r_op BANK(call_01_4dd3)

1f:59ad call_1f_59ad
;; 1f:59b0:r_op _SRAM_SONG_CHAINS
;; 1f:59b4:r_op rRAMG
;; 1f:59b7:r_op CART_RAM_ENABLE
;; 1f:59d9:r_op rRAMG
;; 1f:59bc:r_op _SRAM_SONG_CHAINS_BANK
;; 1f:59dc:r_op CART_RAM_DISABLE

;; 1f:59df:r_op LOW(call_01_4e43)
;; 1f:59e1:r_op HIGH(call_01_4e43)
;; 1f:59e9:r_op BANK(call_01_4e43)

1f:5a29 call_1f_5a29
;; 1f:5a3b:r_op rRAMG
;; 1f:5a3e:r_op CART_RAM_ENABLE
;; 1f:5a40:r_op rRAMB
;; 1f:5ad5:r_op rRAMB
;; 1f:5b29:r_op rRAMG
;; 1f:5b2c:r_op CART_RAM_DISABLE

1f:5b79 call_1f_5b79

1f:5c13 call_1f_5c13

1f:5cb0 data_1f_5cb0
1f:5cb0 .text:0003

1f:5cb3 call_1f_5cb3

1f:5d61 data_1f_5d61
1f:5d61 .text:0003

1f:5d64 call_1f_5d64

1f:5d8e call_1f_5d8e

1f:5db8 call_1f_5db8
;; 1f:5dbb:r_op rRAMB
;; 1f:5dbe:r_op _SRAM_PHRASE_ALLOC_BANK
;; 1f:5dc1:r_op rRAMG
;; 1f:5dc4:r_op CART_RAM_ENABLE
;; 1f:5dce:r_op _SRAM_PHRASE_ALLOC
;; 1f:5dd7:r_op rRAMG
;; 1f:5dda:r_op CART_RAM_DISABLE
;; 1f:5e33:r_op rRAMG
;; 1f:5e36:r_op CART_RAM_ENABLE
;; 1f:5e38:r_op rRAMB
;; 1f:5e50:r_op rRAMB
;; 1f:5e93:r_op rRAMB
;; 1f:5eab:r_op rRAMG
;; 1f:5eae:r_op CART_RAM_DISABLE

1f:5ebb call_1f_5ebb

1f:5f20 call_1f_5f20

1f:5f5d call_1f_5f5d

1f:5f87 call_1f_5f87

1f:600f call_1f_600f

1f:60e7 call_1f_60e7

1f:60fe call_1f_60fe
;; 1f:6118:r_op rRAMB
;; 1f:611e:r_op rRAMG
;; 1f:6121:r_op CART_RAM_ENABLE
;; 1f:6131:r_op rRAMG
;; 1f:6134:r_op CART_RAM_DISABLE

1f:6139 call_1f_6139

1f:615f call_1f_615f
;; 1f:6179:r_op rRAMB
;; 1f:617f:r_op rRAMG
;; 1f:6182:r_op CART_RAM_ENABLE
;; 1f:6192:r_op rRAMG
;; 1f:6195:r_op CART_RAM_DISABLE

1f:619a data_synth_param_defaults
1f:619a .data:0010

1f:61aa call_1f_61aa

1f:6258 call_1f_6258

1f:6278 call_1f_6278

1f:6318 data_dedup_song_strings
1f:6318 data_dedup_song_title_string
1f:6318 .text:000b
1f:6323 data_dedup_song_freeing_string
1f:6323 .text:0009
1f:632c data_dedup_song_chains_string
1f:632c .text:000b
1f:6337 data_1f_6337
1f:6337 .text:0003
1f:633a data_dedup_song_phrases_string
1f:633a .text:000b
1f:6345 data_1f_6345
1f:6345 .text:0003
1f:6348 data_dedup_song_ok_string
1f:6348 .text:0004

1f:634c call_1f_634c

1f:63e8 data_dedup_instruments_strings
1f:63e8 data_dedup_instruments_title_string
1f:63e8 .text:000b
1f:63f3 data_dedup_instruments_freeing_string
1f:63f3 .text:0009
1f:63fc data_dedup_instruments_instruments_string
1f:63fc .text:000b
1f:6407 data_1f_6407
1f:6407 .text:0003
1f:640a data_dedup_instruments_tables_string
1f:640a .text:000b
1f:6415 data_1f_6415
1f:6415 .text:0003
1f:6418 data_dedup_instruments_synths_string
1f:6418 .text:000b
1f:6423 data_1f_6423
1f:6423 .text:0003
1f:6426 data_dedup_instruments_ok_string
1f:6426 .text:0004

1f:642a call_1f_642a

1f:647c data_1f_647c
1f:647c .data:001e

1f:649a call_1f_649a

;; 1f:654a:r_op LOW(call_read_chain_phrase)
;; 1f:654c:r_op HIGH(call_read_chain_phrase)
;; 1f:6564:r_op BANK(call_read_chain_phrase)

;; 1f:6597:r_op BANK(call_read_chain_phrase)

;; 1f:65cf:r_op LOW(call_04_4ce5)
;; 1f:65d1:r_op HIGH(call_04_4ce5)
;; 1f:65d4:r_op BANK(call_04_4ce5)

;; 1f:65dd:r_op LOW(call_1e_4000)
;; 1f:65df:r_op HIGH(call_1e_4000)
;; 1f:65e2:r_op BANK(call_1e_4000)

1f:65f1 call_1f_65f1

1f:6612 call_1f_6612

1f:6633 call_1f_6633

;; 1f:6667:r_op _NORMAL_CURSOR_MODE

1f:6738 jump_table_1f_6738

;; 1f:6764:r_op LOW(call_read_current_phrase_note)
;; 1f:6767:r_op HIGH(call_read_current_phrase_note)
;; 1f:677c:r_op BANK(call_read_current_phrase_note)

;; 1f:67b5:r_op LOW(call_write_current_phrase_note)
;; 1f:67b8:r_op HIGH(call_write_current_phrase_note)
;; 1f:67d0:r_op BANK(call_write_current_phrase_note)

;; 1f:684b:r_op LOW(call_read_current_phrase_note)
;; 1f:684e:r_op HIGH(call_read_current_phrase_note)
;; 1f:6863:r_op BANK(call_read_current_phrase_note)

;; 1f:6889:r_op LOW(call_write_current_phrase_note)
;; 1f:688c:r_op HIGH(call_write_current_phrase_note)
;; 1f:68a5:r_op BANK(call_write_current_phrase_note)

;; 1f:68b3:r_op LOW(call_read_current_phrase_note)
;; 1f:68b6:r_op HIGH(call_read_current_phrase_note)
;; 1f:68cb:r_op BANK(call_read_current_phrase_note)

;; 1f:68fe:r_op LOW(call_write_current_phrase_note)
;; 1f:6901:r_op HIGH(call_write_current_phrase_note)
;; 1f:691a:r_op BANK(call_write_current_phrase_note)

;; 1f:6928:r_op LOW(call_read_phrase_instrument)
;; 1f:692b:r_op HIGH(call_read_phrase_instrument)
;; 1f:6946:r_op BANK(call_read_phrase_instrument)

;; 1f:696c:r_op LOW(call_write_phrase_instrument)
;; 1f:696f:r_op HIGH(call_write_phrase_instrument)
;; 1f:698e:r_op BANK(call_write_phrase_instrument)

;; 1f:699c:r_op LOW(call_read_phrase_command)
;; 1f:699f:r_op HIGH(call_read_phrase_command)
;; 1f:69ba:r_op BANK(call_read_phrase_command)

;; 1f:69e0:r_op LOW(call_write_phrase_command)
;; 1f:69e3:r_op HIGH(call_write_phrase_command)
;; 1f:6a02:r_op BANK(call_write_phrase_command)

;; 1f:6a10:r_op LOW(call_read_phrase_command_value)
;; 1f:6a13:r_op HIGH(call_read_phrase_command_value)
;; 1f:6a2e:r_op BANK(call_read_phrase_command_value)

;; 1f:6a54:r_op LOW(call_write_phrase_command_value)
;; 1f:6a57:r_op HIGH(call_write_phrase_command_value)
;; 1f:6a76:r_op BANK(call_write_phrase_command_value)

;; 1f:6a9d:r_op LOW(call_1c_717c)
;; 1f:6a9f:r_op HIGH(call_1c_717c)
;; 1f:6aa2:r_op BANK(call_1c_717c)

;; 1f:6abb:r_op LOW(call_04_4ce5)
;; 1f:6abd:r_op HIGH(call_04_4ce5)
;; 1f:6ac0:r_op BANK(call_04_4ce5)

1f:6acd data_1f_6acd
1f:6acd .text:0004
1f:6ad1 data_1f_6ad1
1f:6ad1 .text:0005

1f:6ad6 call_1f_6ad6

1f:6bac call_1f_6bac

1f:6bc2 call_1f_6bc2
;; 1f:6bdd:r_op _SRAM_SPEECH_WORD_NAMES
;; 1f:6c00:r_op _SRAM_SPEECH_WORD_NAMES_BANK

1f:6c2c data_1f_6c2c
1f:6c2c .text:0004

1f:6c30 call_1f_6c30

1f:6cd7 call_1f_6cd7

1f:6e7d call_1f_6e7d

1f:6e93 call_1f_6e93

1f:6fd7 data_1f_6fd7
1f:6fd7 .data:0004
1f:6fdb data_1f_6fdb
1f:6fdb .data:0004

1f:6fdf data_song_screen_instrument_window_strings
1f:6fdf data_song_screen_instrument_window_mute_string
1f:6fdf .text:0005
1f:6fe4 data_song_screen_instrument_window_l_string
1f:6fe4 .text:0002
1f:6fe6 data_song_screen_instrument_window_r_string
1f:6fe6 .text:0002
1f:6fe8 data_song_screen_instrument_window_channels_string
1f:6fe8 .text:0005
1f:6fed data_song_screen_instrument_window_empty_string
1f:6fed .text:0004

1f:6ff1 call_1f_6ff1

1f:7016 call_1f_7016

;; 1f:7017:r_op LOW(call_00_2490)
;; 1f:7019:r_op HIGH(call_00_2490)
;; 1f:701c Unused bank for call_00_2490
;; 1f:7020 Banked call used for call_00_2490 unnecessarily

1f:7027 call_1f_7027

1f:7035 call_1f_7035

1f:705e call_1f_705e

1f:7087 call_1f_7087

;; 1f:708d:r_op _TALK_SCREEN

;; 1f:708f:r_op LOW(call_copy_current_screen_bg_tile_page)
;; 1f:7091:r_op HIGH(call_copy_current_screen_bg_tile_page)
;; 1f:7094:r_op BANK(call_copy_current_screen_bg_tile_page)

;; 1f:709d:r_op LOW(call_1f_6ff1)
;; 1f:709f:r_op HIGH(call_1f_6ff1)
;; 1f:70a2:r_op BANK(call_1f_6ff1)

;; 1f:70ae:r_op _INSTRUMENT_SCREEN

;; 1f:70b0:r_op LOW(call_03_45d0)
;; 1f:70b2:r_op HIGH(call_03_45d0)
;; 1f:70b5:r_op BANK(call_03_45d0)

1f:71be data_type_speech_string
1f:71be .text:000e

1f:71cc call_1f_71cc
;; 1f:723b:r_op _SRAM_SPEECH_WORD_NAMES
;; 1f:7259:r_op _SRAM_SPEECH_WORD_NAMES_BANK

;; 1f:72c2:r_op LOW(call_1b_4e8a)
;; 1f:72c4:r_op HIGH(call_1b_4e8a)
;; 1f:72c7:r_op BANK(call_1b_4e8a)

;; 1f:7316:r_op call_move_screen_down
;; 1f:731a:r_op BANK(call_move_screen_down)

;; 1f:7333:r_op call_move_screen_up
;; 1f:7337:r_op BANK(call_move_screen_up)

;; 1f:7350:r_op call_move_screen_right
;; 1f:7354:r_op BANK(call_move_screen_right)

;; 1f:73b5:r_op _NORMAL_CURSOR_MODE

;; 1f:736d:r_op call_move_screen_left
;; 1f:7371:r_op BANK(call_move_screen_left)

;; 1f:73dc:r_op _SRAM_SPEECH_WORDS
;; 1f:73f7:r_op _SRAM_SPEECH_WORDS_BANK

;; 1f:7496:r_op _SRAM_SPEECH_WORD_NAMES
;; 1f:74b1:r_op _SRAM_SPEECH_WORD_NAMES_BANK

;; 1f:75da:r_op _SRAM_SPEECH_WORDS
;; 1f:7622:r_op _SRAM_SPEECH_WORDS_BANK

;; 1f:767e:r_op _SRAM_SPEECH_WORD_NAMES
;; 1f:76e2:r_op _SRAM_SPEECH_WORD_NAMES_BANK

;; 1f:770c:r_op call_03_45fc
;; 1f:7710:r_op BANK(call_03_45fc)

;; 1f:771e:r_op call_03_4644
;; 1f:7722:r_op BANK(call_03_4644)

;; 1f:7738:r_op LOW(call_02_77e6)
;; 1f:773a:r_op HIGH(call_02_77e6)
;; 1f:773d:r_op BANK(call_02_77e6)

;; 1f:775b:r_op LOW(call_02_7b9b)
;; 1f:775d:r_op HIGH(call_02_7b9b)
;; 1f:7760:r_op BANK(call_02_7b9b)

1f:7774 data_copied_word_string
1f:7774 .text:000c
1f:7780 data_cut_word_string
1f:7780 .text:0009
1f:7789 data_pasted_word_string
1f:7789 .text:000c

1f:7795 data_bank_1f_padding
;; 1f:7795 1f:7795
;; 1f:7795:replace:086c ds $8000 - @, $ff

; Memory

00:c0a0 MOD_PU1_FLAG
;; 00:c0a0 The high byte enables mute/pan on the pulse 1 channel
00:c0a1 MOD_PU2_FLAG
;; 00:c0a1 The high byte enables mute/pan on the pulse 2 channel
00:c0a2 MOD_WAV_FLAG
;; 00:c0a2 The high byte enables mute/pan on the wave channel
00:c0a3 MOD_NOI_FLAG
;; 00:c0a3 The high byte enables mute/pan on the noise channel
00:c0a4 MOD_PU1_TYPE
;; 00:c0a4 Sets mute (0), left pan (1), or right pan (2) for the pulse 1 channel
00:c0a5 MOD_PU2_TYPE
;; 00:c0a5 Sets mute (0), left pan (1), or right pan (2) for the pulse 2 channel
00:c0a6 MOD_WAV_TYPE
;; 00:c0a6 Sets mute (0), left pan (1), or right pan (2) for the wave channel
00:c0a7 MOD_NOI_TYPE
;; 00:c0a7 Sets mute (0), left pan (1), or right pan (2) for the noise channel

00:c0cc CURRENT_PU1_NOTE
00:c0cd CURRENT_PU2_NOTE
00:c0ce CURRENT_WAV_NOTE
00:c0cf CURRENT_NOI_NOTE

00:c0e0 IS_PU1_CHANNEL_PLAYING
00:c0e1 IS_PU2_CHANNEL_PLAYING
00:c0e2 IS_WAV_CHANNEL_PLAYING
00:c0e3 IS_NOI_CHANNEL_PLAYING

00:c110 PLAYING_PU1_PHRASE_NOTE_ADDRESS_LOW
00:c111 PLAYING_PU1_PHRASE_NOTE_ADDRESS_HIGH
00:c112 PLAYING_PU2_PHRASE_NOTE_ADDRESS_LOW
00:c113 PLAYING_PU2_PHRASE_NOTE_ADDRESS_HIGH
00:c114 PLAYING_WAV_PHRASE_NOTE_ADDRESS_LOW
00:c115 PLAYING_WAV_PHRASE_NOTE_ADDRESS_HIGH
00:c116 PLAYING_NOI_PHRASE_NOTE_ADDRESS_LOW
00:c117 PLAYING_NOI_PHRASE_NOTE_ADDRESS_HIGH

00:c160 PU1_NOTE_COUNTDOWN
;; 00:c160 Counts down the time the current note has been playing on the pulse 1 channel. Resets to 0 when the next note starts
00:c161 PU2_NOTE_COUNTDOWN
;; 00:c161 Counts down the time the current note has been playing on the pulse 2 channel. Resets to 0 when the next note starts
00:c162 WAV_NOTE_COUNTDOWN
;; 00:c162 Counts down the time the current note has been playing on the wave channel. Resets to 0 when the next note starts
00:c163 NOI_NOTE_COUNTDOWN
;; 00:c163 Counts down the time the current note has been playing on the noise channel. Resets to 0 when the next note starts

00:c168 PLAYING_PU1_PHRASE
00:c169 PLAYING_PU2_PHRASE
00:c16a PLAYING_WAV_PHRASE
00:c16b PLAYING_NOI_PHRASE

00:c16c CURRENT_PU1_PHRASE_ROW
00:c16d CURRENT_PU2_PHRASE_ROW
00:c16e CURRENT_WAV_PHRASE_ROW
00:c16f CURRENT_NOI_PHRASE_ROW

00:c170 PLAYING_PU1_CHAIN
00:c171 PLAYING_PU2_CHAIN
00:c172 PLAYING_WAV_CHAIN
00:c173 PLAYING_NOI_CHAIN

00:c17c CURRENT_PU1_CHAIN_ROW
00:c17d CURRENT_PU2_CHAIN_ROW
00:c17e CURRENT_WAV_CHAIN_ROW
00:c17f CURRENT_NOI_CHAIN_ROW

00:c200 CURRENT_PU1_SONG_ROW
00:c201 CURRENT_PU2_SONG_ROW
00:c202 CURRENT_WAV_SONG_ROW
00:c203 CURRENT_NOI_SONG_ROW

00:c210 CURRENT_PU1_INSTR
00:c211 CURRENT_PU2_INSTR
00:c212 CURRENT_WAV_INSTR
00:c213 CURRENT_NOI_INSTR

00:c402 CURRENT_SCREEN

00:c403 DMG_SOUND_ON
;; 00:c403 Indicates if sound was on at startup for DMG

00:c407 KEY_DELAY_COUNTER
;; 00:c407 Counts down key delay while a button is pressed
00:c408 KEY_REPEAT_COUNTER
;; 00:c408 Counts down key repeat while a button is pressed

00:c409 KEY_CHANGE_START
;; 00:c409 Set to 0 when a button change has first occurred, then 1 afterwards

00:c40e SELECTION_START_COL
00:c40f SELECTION_START_ROW

00:c410 SELECTION_END_COL
00:c411 SELECTION_END_ROW

00:c412 SELECTION_SCREEN
;; 00:c412 The screen of the current clipboard selection.

00:c414 CURSOR_MODE

00:c415 CURRENT_PHRASE
;; 00:c415 Current phrase opened on the song screen

00:c416 PHRASE_CURSOR_COL
00:c417 PHRASE_CURSOR_ROW
00:c418 CURRENT_GROOVE_SCREEN
00:c419 CURRENT_CHAIN_SCREEN
00:c41a CHAIN_CURSOR_COL
00:c41b CHAIN_CURSOR_ROW
00:c41c CURRENT_TABLE_SCREEN
00:c41d SONG_SCREEN_SCROLL
00:c41e SONG_CURSOR_COL
00:c41f SONG_CURSOR_ROW

00:c428 INSTR_CURSOR_ROW
00:c429 INSTR_CURSOR_COL
00:c42a SPEECH_CURSOR_ROW
00:c42b CURRENT_SYNTH_WAV_FRAME
;; 00:c42b High 8 bits: current synth
;; 00:c42b Low 8 bits: current wave frame
00:c42c WAV_CURSOR_COL

00:c42d KEYBOARD_LETTER_POS
00:c42e KEYBOARD_CURSOR_COL
00:c42f KEYBOARD_CURSOR_ROW

00:c43b SAMPLE_NOTE_STRING
;; 00:c43b A string containing the values for the current sample note.

00:c442 CURRENT_SYNTH_SCREEN
00:c443 SYNTH_CURSOR_POS

00:c448 SRAM_TABLE_COMMANDS_LOW
;; 00:c448 The current table command base location in SRAM
00:c449 SRAM_TABLE_COMMANDS_HIGH

00:c44a SRAM_TABLE_COMMAND_VALUES_LOW
;; 00:c44a The current table command value base location in SRAM
00:c44b SRAM_TABLE_COMMAND_VALUES_HIGH

00:c44c DEFAULT_PU1_CMD
;; 00:c44c The default command to use for empty pulse 1 channel rows
00:c44d DEFAULT_PU2_CMD
;; 00:c44d The default command to use for empty pulse 2 channel rows
00:c44e DEFAULT_WAV_CMD
;; 00:c44e The default command to use for empty wave channel rows
00:c44f DEFAULT_NOI_CMD
;; 00:c44f The default command to use for empty noise channel rows

00:c454 DEFAULT_PU1_CHAIN_PHRASE
;; 00:c454 The default phrase number to use for empty rows on the chain screen for the pulse 1 channel
00:c455 DEFAULT_PU2_CHAIN_PHRASE
;; 00:c455 The default phrase number to use for empty rows on the chain screen for the pulse 2 channel
00:c456 DEFAULT_WAV_CHAIN_PHRASE
;; 00:c456 The default phrase number to use for empty rows on the chain screen for the wave channel
00:c457 DEFAULT_NOI_CHAIN_PHRASE
;; 00:c457 The default phrase number to use for empty rows on the chain screen for the noise channel

00:c468 CURSOR_BUTTON_HOLD

00:c469 DEFAULT_PU1_INSTR
;; 00:c469 The default instrument number to use for empty rows on the pulse 1 phrase screen
00:c46a DEFAULT_PU2_INSTR
;; 00:c46a The default instrument number to use for empty rows on the pulse 2 phrase screen
00:c46b DEFAULT_WAV_INSTR
;; 00:c46b The default instrument number to use for empty rows on the wave phrase screen
00:c46c DEFAULT_NOI_INSTR
;; 00:c46c The default instrument number to use for empty rows on the noise phrase screen

00:c530 CURRENT_PALETTE_NUM

00:c565 BG_MAP_ATTR_SOURCE_LOW
;; 00:c565 The source from which to pull background map attributes.
00:c564 BG_MAP_ATTR_SOURCE_HIGH

00:c567 BG_MAP_ATTR_SHADOWED_PALETTE_LOW
;; 00:c567 The background palette to apply to bytes when writing shaded tiles.
00:c568 BG_MAP_ATTR_SHADOWED_PALETTE_HIGH

00:c569 BG_MAP_ATTR_SELECTED_PALETTE_LOW
;; 00:c569 The background palette to apply to bytes when writing selected tiles.
00:c56a BG_MAP_ATTR_SELECTED_PALETTE_HIGH

00:c570 CURRENT_KEY_PRESS_COUNT
00:c571 TOTAL_KEY_PRESS_COUNT

00:c574 BG_MAP_ATTR_TARGET_LOW
;; 00:c574 The address at which to draw background map attributes.
;; 00:c574 Should be in the range 0x9800 - 0x9afff.
00:c575 BG_MAP_ATTR_TARGET_HIGH

00:c576 PAD_BUTTONS
;; 00:c576 The currently held buttons.

00:c577 CURRENT_INSTRUMENT_1

00:c676 GBC_BG_ATTR_ROW
;; 00:c676 A row of background attributes used on GBC before being copied to VRAM.

00:c693 PLAYING_SYNTH_FRAME

00:c6a8 HELP_BANNER
;; 00:c6a8 The current help banner string.

00:c7a8 HELP_BANNER_SCROLL_COUNTDOWN
;; 00:c7a8 Number of loops left until the help banner should scroll.
00:c7a9 LAST_READ_HELP_BANNER_ADDRESS
;; 00:c7a9 The address of the last read help banner byte.

00:c7ae IS_HANDLING_EXCEPTION
;; 00:c7ae Set to 1 when handling an exception

00:c8de CURRENT_CHANNEL_CHAIN_ROW
;; 00:c8de The address of the currently playing chain for the current channel

00:c8e0 CURRENT_CHANNEL_PHRASE_ROW
;; 00:c8e0 The address of the currently playing phrase row for the current channel

00:c8e2 CURRENT_CHANNEL_NOTE_COUNTDOWN
;; 00:c8e2 The address of the currently playing note countdown for the current channel

00:c8ea CURRENT_CHANNEL_PLAYING_PHRASE
;; 00:c8ea The address of the currently playing phrase for the current channel

00:c8ec CURRENT_CHANNEL_CURRENT_NOTE
;; 00:c8ec The address of the currently playing note for the current channel

00:c8fd CURRENT_SCREEN_COL
00:c8fe CURRENT_SCREEN_ROW
00:c8ff PROJECT_SCREEN_COL
;; 00:c8ff The current column of the project screen based on the current screen.
00:c900 SYNTH_SCREEN_COL
;; 00:c8ff The current column of the synth screen based on the current screen.
;; 00:c8ff The wave screen is always to the right of the synth screen.
00:c901 SCREEN_MOVE_DIRECTION
;; 00:c901 The direction to move the screen in, if any.

00:c905 DEFAULT_PU1_NOTE
;; 00:c905 The default note to use for empty pulse 1 channel rows on the phrase screen
00:c906 DEFAULT_PU2_NOTE
;; 00:c906 The default note to use for empty pulse 2 channel rows on the phrase screen
00:c907 DEFAULT_WAV_NOTE
;; 00:c907 The default note to use for empty wave channel rows on the phrase screen
00:c908 DEFAULT_NOI_NOTE
;; 00:c908 The default note to use for empty noise channel rows on the phrase screen

00:c92d TABLE_CURSOR_COL
00:c92e TABLE_CURSOR_ROW
00:c92f DEFAULT_TABLE_VOL
;; 00:c92f The default volume value to use for empty rows on the table screen
00:c930 DEFAULT_TABLE_TSP
;; 00:c930 The default transpose value to use for empty rows on the table screen

00:c931 HELP_PAGE
00:c932 HELP_CURSOR_ROW

00:c935 WORD_CURSOR_ROW
00:c936 WORD_CURSOR_COL

00:c943 DEFAULT_TSP
;; 00:c943 The default transpose value to use for empty rows on the chain screen

00:c990 FILE_SCREEN_CURSOR_COL
00:c991 FILE_SCREEN_MAX_CURSOR_ROW

00:c996 IS_SELECTING_FILE

00:c997 FILE_SCREEN_CURSOR_ROW

00:c998 FILE_SCREEN_ACTION_TYPE
;; 00:c998 The current file screen action type - see file action type constants

00:c99a RESTRICT_FILE_CURSOR
;; 00:c99a Whether to restrict the file cursor to the current/empty file

00:c99f CURRENT_INSTRUMENT_2
;; 00:c99f A copy of the current instrument.
;; 00:c99f This is used exclusively in bank 0x1c.

00:cba1 ENABLE_OSCILLOSCOPE
00:cba2 OSCILLOSCOPE_DRAW_TYPE
;; 00:cba2 Controls what to do with the oscilloscope next update.
;; 00:cba2 See _*_DRAW_OSCILLOSCOPE constants.

00:cba3 OSCILLOSCOPE_GRAPHICAL_DATA_1
00:cbab OSCILLOSCOPE_GRAPHICAL_DATA_2
00:cbb3 OSCILLOSCOPE_GRAPHICAL_DATA_3

00:cbd1 BACKUP_CURSOR_MODE
;; 00:cbd1 A backup of the last used CURSOR_MODE, used when cancelling a selection.
00:cbd2 BACKUP_SELECTION_SCREEN
;; 00:cbd2 A backup of the last used SELECTION_SCREEN, used when cancelling a selection.
00:cbd3 BACKUP_SELECTION_START_COL
;; 00:cbd3 A backup of the last used SELECTION_START_COL, used when cancelling a selection.
00:cbd4 BACKUP_SELECTION_START_ROW
;; 00:cbd4 A backup of the last used SELECTION_START_ROW, used when cancelling a selection.
00:cbd5 BACKUP_SELECTION_END_COL
;; 00:cbd5 A backup of the last used SELECTION_END_COL, used when cancelling a selection.
00:cbd6 BACKUP_SELECTION_END_ROW
;; 00:cbd6 A backup of the last used SELECTION_END_ROW, used when cancelling a selection.

00:cbd8 CPU
;; 00:cbd8 gbdk 2.95 libc/gb/crt0.s:__cpu
;; 00:cbd8 GB type (GB, PGB, CGB)
00:cbd9 CPU_2
;; 00:cbd9 GB type 2 (used to check for GBA)

00:cbda MODE
;; 00:cbda gbdk 2.95 libc/gb/crt0.s:.mode
;; 00:cbda Current mode

00:cbdb IO_OUT
;; 00:cbdb gbdk 2.95 libc/gb/global.s:__io_out
;; 00:cbdb Byte to send.

00:cbdc IO_IN
;; 00:cbdc gbdk 2.95 libc/gb/global.s:__io_in
;; 00:cbdc Received byte.

00:cbdd IO_STATUS
;; 00:cbdd gbdk 2.95 libc/gb/global.s:__io_status
;; 00:cbdd Current status of serial IO.

00:cbe0 FONT_CURRENT
;; 00:cbe0 gbdk 2.95 libc/gb/font.ms:font_current
00:cbe3 FONT_FIRST_FREE_TILE
;; 00:cbe3 gbdk 2.95 libc/gb/font.ms:font_first_free_tile
;; 00:cbe3 Cached copy of first free tile.
00:cbe4 FONT_TABLE
;; 00:cbe4 gbdk 2.95 libc/gb/font.ms:font_table

00:cbf6 CURX
;; 00:cbf6 gbdk 2.95 libc/gb/font.ms:.curx
;; 00:cbf6 Current cursor X position.
00:cbf7 CURY
;; 00:cbf7 gbdk 2.95 libc/gb/font.ms:.cury
;; 00:cbf7 Current cursor Y position.

00:cbf8 RANDHI
;; 00:cbf8 gbdk 2.95 libc/gb/rand.s:.randhi
;; 00:cbf8 The random seed upper byte.
00:cbf9 RANDLO
;; 00:cbf9 gbdk 2.95 libc/gb/rand.s:.randlo
;; 00:cbf9 The random seed lower byte.

00:cbfa FG_COLOUR
;; 00:cbfa gbdk 2.95 libc/gb/font.ms:.fg_colour
00:cbfb BG_COLOUR
;; 00:cbfb gbdk 2.95 libc/gb/font.ms:.bg_colour

00:ce00 KEY_BUFFER
;; 00:ce00 A buffer of the last pressed keys (up to 0xceff)

00:ff80 REFRESH_OAM
;; 00:ff80 gbdk 2.95 libc/gb/global.s:refresh_OAM

00:ff8c BG_MAP_ATTR_BG_PALETTE
;; 00:ff8c The background palette to apply to bytes when writing background map attributes.

00:ff8d BG_MAP_ATTR_DIGIT_BG_PALETTE
;; 00:ff8d The background palette to apply to bytes when writing digit background map attributes.

00:ff8e CURRENT_BANK
;; 00:ff8e Used to store the current bank number for banked calls.

00:ff90 GAMEBOY_TYPE
;; 00:ff90 Indicates whether the current model is GameBoy Color or original

00:ffa0 OSCILLOSCOPE_VALUES
;; 00:ffa0 The current wave frame data being shown in the oscilloscope viewer.

; Kits

08:4000 kit_1
08:4000 .data:4000
09:4000 kit_2
09:4000 .data:4000
0a:4000 kit_3
0a:4000 .data:4000
0b:4000 kit_4
0b:4000 .data:4000
0c:4000 kit_5
0c:4000 .data:4000
0d:4000 kit_6
0d:4000 .data:4000
0e:4000 kit_7
0e:4000 .data:4000
0f:4000 kit_8
0f:4000 .data:4000
10:4000 kit_9
10:4000 .data:4000
11:4000 kit_10
11:4000 .data:4000
12:4000 kit_11
12:4000 .data:4000
13:4000 kit_12
13:4000 .data:4000
14:4000 kit_13
14:4000 .data:4000
15:4000 kit_14
15:4000 .data:4000
16:4000 kit_15
16:4000 .data:4000
17:4000 kit_16
17:4000 .data:4000
18:4000 kit_17
18:4000 .data:4000
19:4000 kit_18
19:4000 .data:4000
1a:4000 kit_19
1a:4000 .data:4000

20:4000 kit_20
20:4000 .data:4000
21:4000 kit_21
21:4000 .data:4000
22:4000 kit_22
22:4000 .data:4000
23:4000 kit_23
23:4000 .data:4000
24:4000 kit_24
24:4000 .data:4000
25:4000 kit_25
25:4000 .data:4000
26:4000 kit_26
26:4000 .data:4000
27:4000 kit_27
27:4000 .data:4000
28:4000 kit_28
28:4000 .data:4000
29:4000 kit_29
29:4000 .data:4000
2a:4000 kit_30
2a:4000 .data:4000
2b:4000 kit_31
2b:4000 .data:4000
2c:4000 kit_32
2c:4000 .data:4000
2d:4000 kit_33
2d:4000 .data:4000
2e:4000 kit_34
2e:4000 .data:4000
2f:4000 kit_35
2f:4000 .data:4000
30:4000 kit_36
30:4000 .data:4000
31:4000 kit_37
31:4000 .data:4000
32:4000 kit_38
32:4000 .data:4000
33:4000 kit_39
33:4000 .data:4000
34:4000 kit_40
34:4000 .data:4000
35:4000 kit_41
35:4000 .data:4000
36:4000 kit_42
36:4000 .data:4000
37:4000 kit_43
37:4000 .data:4000
38:4000 kit_44
38:4000 .data:4000
39:4000 kit_45
39:4000 .data:4000
3a:4000 kit_46
3a:4000 .data:4000
3b:4000 kit_47
3b:4000 .data:4000
3c:4000 kit_48
3c:4000 .data:4000
3d:4000 kit_49
3d:4000 .data:4000
3e:4000 kit_50
3e:4000 .data:4000
3f:4000 kit_51
3f:4000 .data:4000
